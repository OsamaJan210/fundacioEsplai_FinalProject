import {
  __commonJS
} from "./chunk-5WRI5ZAA.js";

// node_modules/postal-codes-js/generated/postal-codes-alpha2.json
var require_postal_codes_alpha2 = __commonJS({
  "node_modules/postal-codes-js/generated/postal-codes-alpha2.json"(exports2, module2) {
    module2.exports = {
      AF: {
        countryName: "Afghanistan",
        postalCodeFormat: "4Digits.json",
        alpha2: "AF",
        alpha3: "AFG",
        numeric3: "4"
      },
      AX: {
        countryName: "Aland Islands",
        postalCodeFormat: "AX.json",
        alpha2: "AX",
        alpha3: "ALA",
        numeric3: "248"
      },
      AL: {
        countryName: "Albania",
        postalCodeFormat: "4Digits.json",
        alpha2: "AL",
        alpha3: "ALB",
        numeric3: "8"
      },
      DZ: {
        countryName: "Algeria",
        postalCodeFormat: "5Digits.json",
        alpha2: "DZ",
        alpha3: "DZA",
        numeric3: "12"
      },
      AS: {
        countryName: "American Samoa",
        postalCodeFormat: "5Digits.json",
        alpha2: "AS",
        alpha3: "ASM",
        numeric3: "16"
      },
      AD: {
        countryName: "Andorra",
        postalCodeFormat: "AD.json",
        alpha2: "AD",
        alpha3: "AND",
        numeric3: "20"
      },
      AO: {
        countryName: "Angola",
        alpha2: "AO",
        alpha3: "AGO",
        numeric3: "24"
      },
      AI: {
        countryName: "Anguilla",
        postalCodeFormat: "AI.json",
        alpha2: "AI",
        alpha3: "AIA",
        numeric3: "660"
      },
      AQ: {
        countryName: "Antarctica",
        postalCodeFormat: "AQ.json",
        alpha2: "AQ",
        alpha3: "ATA",
        numeric3: "10"
      },
      AG: {
        countryName: "Antigua and Barbuda",
        alpha2: "AG",
        alpha3: "ATG",
        numeric3: "28"
      },
      AR: {
        countryName: "Argentina",
        postalCodeFormat: "4Digits.json",
        alpha2: "AR",
        alpha3: "ARG",
        numeric3: "32"
      },
      AM: {
        countryName: "Armenia",
        postalCodeFormat: "4Digits.json",
        alpha2: "AM",
        alpha3: "ARM",
        numeric3: "51"
      },
      AW: {
        countryName: "Aruba",
        alpha2: "AW",
        alpha3: "ABW",
        numeric3: "533"
      },
      AU: {
        countryName: "Australia",
        postalCodeFormat: "4Digits.json",
        alpha2: "AU",
        alpha3: "AUS",
        numeric3: "36"
      },
      AT: {
        countryName: "Austria",
        postalCodeFormat: "4Digits.json",
        alpha2: "AT",
        alpha3: "AUT",
        numeric3: "40"
      },
      AZ: {
        countryName: "Azerbaijan",
        postalCodeFormat: "AZ.json",
        alpha2: "AZ",
        alpha3: "AZE",
        numeric3: "31"
      },
      BS: {
        countryName: "Bahamas",
        alpha2: "BS",
        alpha3: "BHS",
        numeric3: "44"
      },
      BH: {
        countryName: "Bahrain",
        postalCodeFormat: "BH.json",
        alpha2: "BH",
        alpha3: "BHR",
        numeric3: "48"
      },
      BD: {
        countryName: "Bangladesh",
        postalCodeFormat: "4Digits.json",
        alpha2: "BD",
        alpha3: "BGD",
        numeric3: "50"
      },
      BB: {
        countryName: "Barbados",
        postalCodeFormat: "BB.json",
        alpha2: "BB",
        alpha3: "BRB",
        numeric3: "52"
      },
      BY: {
        countryName: "Belarus",
        postalCodeFormat: "6Digits.json",
        alpha2: "BY",
        alpha3: "BLR",
        numeric3: "112"
      },
      BE: {
        countryName: "Belgium",
        postalCodeFormat: "4Digits.json",
        alpha2: "BE",
        alpha3: "BEL",
        numeric3: "56"
      },
      BZ: {
        countryName: "Belize",
        alpha2: "BZ",
        alpha3: "BLZ",
        numeric3: "84"
      },
      BJ: {
        countryName: "Benin",
        alpha2: "BJ",
        alpha3: "BEN",
        numeric3: "204"
      },
      BM: {
        countryName: "Bermuda",
        alpha2: "BM",
        alpha3: "BMU",
        numeric3: "60"
      },
      BT: {
        countryName: "Bhutan",
        postalCodeFormat: "5Digits.json",
        alpha2: "BT",
        alpha3: "BTN",
        numeric3: "64"
      },
      BO: {
        countryName: "Bolivia",
        postalCodeFormat: "4Digits.json",
        alpha2: "BO",
        alpha3: "BOL",
        numeric3: "68"
      },
      BA: {
        countryName: "Bosnia and Herzegovina",
        postalCodeFormat: "5Digits.json",
        alpha2: "BA",
        alpha3: "BIH",
        numeric3: "70"
      },
      BW: {
        countryName: "Botswana",
        alpha2: "BW",
        alpha3: "BWA",
        numeric3: "72"
      },
      BV: {
        countryName: "Bouvet Island",
        alpha2: "BV",
        alpha3: "BVT",
        numeric3: "74"
      },
      BR: {
        countryName: "Brazil",
        postalCodeFormat: "8Digits.json",
        alpha2: "BR",
        alpha3: "BRA",
        numeric3: "76"
      },
      VG: {
        countryName: "British Virgin Islands",
        postalCodeFormat: "VG.json",
        alpha2: "VG",
        alpha3: "VGB",
        numeric3: "92"
      },
      IO: {
        countryName: "British Indian Ocean Territory",
        postalCodeFormat: "IO.json",
        alpha2: "IO",
        alpha3: "IOT",
        numeric3: "86"
      },
      BN: {
        countryName: "Brunei Darussalam",
        postalCodeFormat: "BN.json",
        alpha2: "BN",
        alpha3: "BRN",
        numeric3: "96"
      },
      BG: {
        countryName: "Bulgaria",
        postalCodeFormat: "4Digits.json",
        alpha2: "BG",
        alpha3: "BGR",
        numeric3: "100"
      },
      BF: {
        countryName: "Burkina Faso",
        alpha2: "BF",
        alpha3: "BFA",
        numeric3: "854"
      },
      BI: {
        countryName: "Burundi",
        alpha2: "BI",
        alpha3: "BDI",
        numeric3: "108"
      },
      KH: {
        countryName: "Cambodia",
        postalCodeFormat: "5Digits.json",
        alpha2: "KH",
        alpha3: "KHM",
        numeric3: "116"
      },
      CM: {
        countryName: "Cameroon",
        alpha2: "CM",
        alpha3: "CMR",
        numeric3: "120"
      },
      CA: {
        countryName: "Canada",
        postalCodeFormat: "CA.json",
        alpha2: "CA",
        alpha3: "CAN",
        numeric3: "124"
      },
      CV: {
        countryName: "Cape Verde",
        postalCodeFormat: "4Digits.json",
        alpha2: "CV",
        alpha3: "CPV",
        numeric3: "132"
      },
      KY: {
        countryName: "Cayman Islands",
        postalCodeFormat: "KY.json",
        alpha2: "KY",
        alpha3: "CYM",
        numeric3: "136"
      },
      CF: {
        countryName: "Central African Republic",
        alpha2: "CF",
        alpha3: "CAF",
        numeric3: "140"
      },
      TD: {
        countryName: "Chad",
        postalCodeFormat: "5Digits.json",
        alpha2: "TD",
        alpha3: "TCD",
        numeric3: "148"
      },
      CL: {
        countryName: "Chile",
        postalCodeFormat: "7Digits.json",
        alpha2: "CL",
        alpha3: "CHL",
        numeric3: "152"
      },
      CN: {
        countryName: "China",
        postalCodeFormat: "6Digits.json",
        alpha2: "CN",
        alpha3: "CHN",
        numeric3: "156"
      },
      HK: {
        countryName: "Hong Kong, Special Administrative Region of China",
        alpha2: "HK",
        alpha3: "HKG",
        numeric3: "344"
      },
      MO: {
        countryName: "Macao, Special Administrative Region of China",
        alpha2: "MO",
        alpha3: "MAC",
        numeric3: "446"
      },
      CX: {
        countryName: "Christmas Island",
        postalCodeFormat: "4Digits.json",
        alpha2: "CX",
        alpha3: "CXR",
        numeric3: "162"
      },
      CC: {
        countryName: "Cocos (Keeling) Islands",
        postalCodeFormat: "4Digits.json",
        alpha2: "CC",
        alpha3: "CCK",
        numeric3: "166"
      },
      CO: {
        countryName: "Colombia",
        postalCodeFormat: "6Digits.json",
        alpha2: "CO",
        alpha3: "COL",
        numeric3: "170"
      },
      KM: {
        countryName: "Comoros",
        alpha2: "KM",
        alpha3: "COM",
        numeric3: "174"
      },
      CG: {
        countryName: "Congo (Brazzaville)",
        alpha2: "CG",
        alpha3: "COG",
        numeric3: "178"
      },
      CD: {
        countryName: "Congo, Democratic Republic of the",
        alpha2: "CD",
        alpha3: "COD",
        numeric3: "180"
      },
      CK: {
        countryName: "Cook Islands",
        alpha2: "CK",
        alpha3: "COK",
        numeric3: "184"
      },
      CR: {
        countryName: "Costa Rica",
        postalCodeFormat: "5Digits.json",
        alpha2: "CR",
        alpha3: "CRI",
        numeric3: "188"
      },
      CI: {
        countryName: "CÃ´te d'Ivoire",
        alpha2: "CI",
        alpha3: "CIV",
        numeric3: "384"
      },
      HR: {
        countryName: "Croatia",
        postalCodeFormat: "5Digits.json",
        alpha2: "HR",
        alpha3: "HRV",
        numeric3: "191"
      },
      CU: {
        countryName: "Cuba",
        postalCodeFormat: "5Digits.json",
        alpha2: "CU",
        alpha3: "CUB",
        numeric3: "192"
      },
      CY: {
        countryName: "Cyprus",
        postalCodeFormat: "4Digits.json",
        alpha2: "CY",
        alpha3: "CYP",
        numeric3: "196"
      },
      CZ: {
        countryName: "Czech Republic",
        postalCodeFormat: "5Digits.json",
        alpha2: "CZ",
        alpha3: "CZE",
        numeric3: "203"
      },
      DK: {
        countryName: "Denmark",
        postalCodeFormat: "DK.json",
        alpha2: "DK",
        alpha3: "DNK",
        numeric3: "208"
      },
      DJ: {
        countryName: "Djibouti",
        alpha2: "DJ",
        alpha3: "DJI",
        numeric3: "262"
      },
      DM: {
        countryName: "Dominica",
        alpha2: "DM",
        alpha3: "DMA",
        numeric3: "212"
      },
      DO: {
        countryName: "Dominican Republic",
        postalCodeFormat: "5Digits.json",
        alpha2: "DO",
        alpha3: "DOM",
        numeric3: "214"
      },
      EC: {
        countryName: "Ecuador",
        postalCodeFormat: "6Digits.json",
        alpha2: "EC",
        alpha3: "ECU",
        numeric3: "218"
      },
      EG: {
        countryName: "Egypt",
        postalCodeFormat: "5Digits.json",
        alpha2: "EG",
        alpha3: "EGY",
        numeric3: "818"
      },
      SV: {
        countryName: "El Salvador",
        postalCodeFormat: "4Digits.json",
        alpha2: "SV",
        alpha3: "SLV",
        numeric3: "222"
      },
      GQ: {
        countryName: "Equatorial Guinea",
        alpha2: "GQ",
        alpha3: "GNQ",
        numeric3: "226"
      },
      ER: {
        countryName: "Eritrea",
        alpha2: "ER",
        alpha3: "ERI",
        numeric3: "232"
      },
      EE: {
        countryName: "Estonia",
        postalCodeFormat: "5Digits.json",
        alpha2: "EE",
        alpha3: "EST",
        numeric3: "233"
      },
      ET: {
        countryName: "Ethiopia",
        postalCodeFormat: "4Digits.json",
        alpha2: "ET",
        alpha3: "ETH",
        numeric3: "231"
      },
      FK: {
        countryName: "Falkland Islands (Malvinas)",
        postalCodeFormat: "FK.json",
        alpha2: "FK",
        alpha3: "FLK",
        numeric3: "238"
      },
      FO: {
        countryName: "Faroe Islands",
        postalCodeFormat: "3Digits.json",
        alpha2: "FO",
        alpha3: "FRO",
        numeric3: "234"
      },
      FJ: {
        countryName: "Fiji",
        alpha2: "FJ",
        alpha3: "FJI",
        numeric3: "242"
      },
      FI: {
        countryName: "Finland",
        postalCodeFormat: "5Digits.json",
        alpha2: "FI",
        alpha3: "FIN",
        numeric3: "246"
      },
      FR: {
        countryName: "France",
        postalCodeFormat: "5Digits.json",
        alpha2: "FR",
        alpha3: "FRA",
        numeric3: "250"
      },
      GF: {
        countryName: "French Guiana",
        postalCodeFormat: "GF.json",
        alpha2: "GF",
        alpha3: "GUF",
        numeric3: "254"
      },
      PF: {
        countryName: "French Polynesia",
        postalCodeFormat: "PF.json",
        alpha2: "PF",
        alpha3: "PYF",
        numeric3: "258"
      },
      TF: {
        countryName: "French Southern Territories",
        alpha2: "TF",
        alpha3: "ATF",
        numeric3: "260"
      },
      GA: {
        countryName: "Gabon",
        alpha2: "GA",
        alpha3: "GAB",
        numeric3: "266"
      },
      GM: {
        countryName: "Gambia",
        alpha2: "GM",
        alpha3: "GMB",
        numeric3: "270"
      },
      GE: {
        countryName: "Georgia",
        postalCodeFormat: "4Digits.json",
        alpha2: "GE",
        alpha3: "GEO",
        numeric3: "268"
      },
      DE: {
        countryName: "Germany",
        postalCodeFormat: "5Digits.json",
        alpha2: "DE",
        alpha3: "DEU",
        numeric3: "276"
      },
      GH: {
        countryName: "Ghana",
        alpha2: "GH",
        alpha3: "GHA",
        numeric3: "288"
      },
      GI: {
        countryName: "Gibraltar",
        postalCodeFormat: "GI.json",
        alpha2: "GI",
        alpha3: "GIB",
        numeric3: "292"
      },
      GR: {
        countryName: "Greece",
        postalCodeFormat: "5Digits.json",
        alpha2: "GR",
        alpha3: "GRC",
        numeric3: "300"
      },
      GL: {
        countryName: "Greenland",
        postalCodeFormat: "4Digits.json",
        alpha2: "GL",
        alpha3: "GRL",
        numeric3: "304"
      },
      GD: {
        countryName: "Grenada",
        alpha2: "GD",
        alpha3: "GRD",
        numeric3: "308"
      },
      GP: {
        countryName: "Guadeloupe",
        postalCodeFormat: "GP.json",
        alpha2: "GP",
        alpha3: "GLP",
        numeric3: "312"
      },
      GU: {
        countryName: "Guam",
        postalCodeFormat: "US.json",
        alpha2: "GU",
        alpha3: "GUM",
        numeric3: "316"
      },
      GT: {
        countryName: "Guatemala",
        postalCodeFormat: "5Digits.json",
        alpha2: "GT",
        alpha3: "GTM",
        numeric3: "320"
      },
      GG: {
        countryName: "Guernsey",
        postalCodeFormat: "GG.json",
        alpha2: "GG",
        alpha3: "GGY",
        numeric3: "831"
      },
      GN: {
        countryName: "Guinea",
        postalCodeFormat: "3Digits.json",
        alpha2: "GN",
        alpha3: "GIN",
        numeric3: "324"
      },
      GW: {
        countryName: "Guinea-Bissau",
        postalCodeFormat: "4Digits.json",
        alpha2: "GW",
        alpha3: "GNB",
        numeric3: "624"
      },
      GY: {
        countryName: "Guyana",
        alpha2: "GY",
        alpha3: "GUY",
        numeric3: "328"
      },
      HT: {
        countryName: "Haiti",
        postalCodeFormat: "4Digits.json",
        alpha2: "HT",
        alpha3: "HTI",
        numeric3: "332"
      },
      HM: {
        countryName: "Heard Island and Mcdonald Islands",
        postalCodeFormat: "4Digits.json",
        alpha2: "HM",
        alpha3: "HMD",
        numeric3: "334"
      },
      VA: {
        countryName: "Holy See (Vatican City State)",
        postalCodeFormat: "VA.json",
        alpha2: "VA",
        alpha3: "VAT",
        numeric3: "336"
      },
      HN: {
        countryName: "Honduras",
        postalCodeFormat: "HN.json",
        alpha2: "HN",
        alpha3: "HND",
        numeric3: "340"
      },
      HU: {
        countryName: "Hungary",
        postalCodeFormat: "4Digits.json",
        alpha2: "HU",
        alpha3: "HUN",
        numeric3: "348"
      },
      IS: {
        countryName: "Iceland",
        postalCodeFormat: "3Digits.json",
        alpha2: "IS",
        alpha3: "ISL",
        numeric3: "352"
      },
      IN: {
        countryName: "India",
        postalCodeFormat: "6Digits.json",
        alpha2: "IN",
        alpha3: "IND",
        numeric3: "356"
      },
      IC: {
        countryName: "Canary Islands",
        postalCodeFormat: "5Digits.json",
        alpha2: "IC",
        alpha3: "",
        numeric3: ""
      },
      ID: {
        countryName: "Indonesia",
        postalCodeFormat: "5Digits.json",
        alpha2: "ID",
        alpha3: "IDN",
        numeric3: "360"
      },
      IR: {
        countryName: "Iran, Islamic Republic of",
        postalCodeFormat: "10Digits.json",
        alpha2: "IR",
        alpha3: "IRN",
        numeric3: "364"
      },
      IQ: {
        countryName: "Iraq",
        postalCodeFormat: "5Digits.json",
        alpha2: "IQ",
        alpha3: "IRQ",
        numeric3: "368"
      },
      IE: {
        countryName: "Ireland",
        postalCodeFormat: "IE.json",
        alpha2: "IE",
        alpha3: "IRL",
        numeric3: "372"
      },
      IM: {
        countryName: "Isle of Man",
        postalCodeFormat: "IM.json",
        alpha2: "IM",
        alpha3: "IMN",
        numeric3: "833"
      },
      IL: {
        countryName: "Israel",
        postalCodeFormat: "7Digits.json",
        alpha2: "IL",
        alpha3: "ISR",
        numeric3: "376"
      },
      IT: {
        countryName: "Italy",
        postalCodeFormat: "5Digits.json",
        alpha2: "IT",
        alpha3: "ITA",
        numeric3: "380"
      },
      JM: {
        countryName: "Jamaica",
        postalCodeFormat: "2Digits.json",
        alpha2: "JM",
        alpha3: "JAM",
        numeric3: "388"
      },
      JP: {
        countryName: "Japan",
        postalCodeFormat: "7Digits.json",
        alpha2: "JP",
        alpha3: "JPN",
        numeric3: "392"
      },
      JE: {
        countryName: "Jersey",
        postalCodeFormat: "JE.json",
        alpha2: "JE",
        alpha3: "JEY",
        numeric3: "832"
      },
      JO: {
        countryName: "Jordan",
        postalCodeFormat: "5Digits.json",
        alpha2: "JO",
        alpha3: "JOR",
        numeric3: "400"
      },
      KZ: {
        countryName: "Kazakhstan",
        postalCodeFormat: "6Digits.json",
        alpha2: "KZ",
        alpha3: "KAZ",
        numeric3: "398"
      },
      KE: {
        countryName: "Kenya",
        postalCodeFormat: "5Digits.json",
        alpha2: "KE",
        alpha3: "KEN",
        numeric3: "404"
      },
      KI: {
        countryName: "Kiribati",
        alpha2: "KI",
        alpha3: "KIR",
        numeric3: "296"
      },
      KP: {
        countryName: "Korea, Democratic People's Republic of",
        alpha2: "KP",
        alpha3: "PRK",
        numeric3: "408"
      },
      KR: {
        countryName: "Korea, Republic of",
        postalCodeFormat: "5Digits.json",
        alpha2: "KR",
        alpha3: "KOR",
        numeric3: "410"
      },
      KW: {
        countryName: "Kuwait",
        postalCodeFormat: "5Digits.json",
        alpha2: "KW",
        alpha3: "KWT",
        numeric3: "414"
      },
      KG: {
        countryName: "Kyrgyzstan",
        postalCodeFormat: "6Digits.json",
        alpha2: "KG",
        alpha3: "KGZ",
        numeric3: "417"
      },
      LA: {
        countryName: "Lao PDR",
        postalCodeFormat: "5Digits.json",
        alpha2: "LA",
        alpha3: "LAO",
        numeric3: "418"
      },
      LV: {
        countryName: "Latvia",
        postalCodeFormat: "LV.json",
        alpha2: "LV",
        alpha3: "LVA",
        numeric3: "428"
      },
      LB: {
        countryName: "Lebanon",
        postalCodeFormat: "LB.json",
        alpha2: "LB",
        alpha3: "LBN",
        numeric3: "422"
      },
      LS: {
        countryName: "Lesotho",
        postalCodeFormat: "3Digits.json",
        alpha2: "LS",
        alpha3: "LSO",
        numeric3: "426"
      },
      LR: {
        countryName: "Liberia",
        postalCodeFormat: "4Digits.json",
        alpha2: "LR",
        alpha3: "LBR",
        numeric3: "430"
      },
      LY: {
        countryName: "Libya",
        postalCodeFormat: "5Digits.json",
        alpha2: "LY",
        alpha3: "LBY",
        numeric3: "434"
      },
      LI: {
        countryName: "Liechtenstein",
        postalCodeFormat: "4Digits.json",
        alpha2: "LI",
        alpha3: "LIE",
        numeric3: "438"
      },
      LT: {
        countryName: "Lithuania",
        postalCodeFormat: "LT.json",
        alpha2: "LT",
        alpha3: "LTU",
        numeric3: "440"
      },
      LU: {
        countryName: "Luxembourg",
        postalCodeFormat: "LU.json",
        alpha2: "LU",
        alpha3: "LUX",
        numeric3: "442"
      },
      MK: {
        countryName: "Macedonia, Republic of",
        postalCodeFormat: "4Digits.json",
        alpha2: "MK",
        alpha3: "MKD",
        numeric3: "807"
      },
      MG: {
        countryName: "Madagascar",
        postalCodeFormat: "3Digits.json",
        alpha2: "MG",
        alpha3: "MDG",
        numeric3: "450"
      },
      MW: {
        countryName: "Malawi",
        alpha2: "MW",
        alpha3: "MWI",
        numeric3: "454"
      },
      MY: {
        countryName: "Malaysia",
        postalCodeFormat: "5Digits.json",
        alpha2: "MY",
        alpha3: "MYS",
        numeric3: "458"
      },
      MV: {
        countryName: "Maldives",
        postalCodeFormat: "5Digits.json",
        alpha2: "MV",
        alpha3: "MDV",
        numeric3: "462"
      },
      ML: {
        countryName: "Mali",
        alpha2: "ML",
        alpha3: "MLI",
        numeric3: "466"
      },
      MT: {
        countryName: "Malta",
        postalCodeFormat: "MT.json",
        alpha2: "MT",
        alpha3: "MLT",
        numeric3: "470"
      },
      MH: {
        countryName: "Marshall Islands",
        postalCodeFormat: "US.json",
        alpha2: "MH",
        alpha3: "MHL",
        numeric3: "584"
      },
      MQ: {
        countryName: "Martinique",
        postalCodeFormat: "5Digits.json",
        alpha2: "MQ",
        alpha3: "MTQ",
        numeric3: "474"
      },
      MR: {
        countryName: "Mauritania",
        alpha2: "MR",
        alpha3: "MRT",
        numeric3: "478"
      },
      MU: {
        countryName: "Mauritius",
        postalCodeFormat: "5Digits.json",
        alpha2: "MU",
        alpha3: "MUS",
        numeric3: "480"
      },
      YT: {
        countryName: "Mayotte",
        postalCodeFormat: "5Digits.json",
        alpha2: "YT",
        alpha3: "MYT",
        numeric3: "175"
      },
      MX: {
        countryName: "Mexico",
        postalCodeFormat: "5Digits.json",
        alpha2: "MX",
        alpha3: "MEX",
        numeric3: "484"
      },
      FM: {
        countryName: "Micronesia, Federated States of",
        postalCodeFormat: "US.json",
        alpha2: "FM",
        alpha3: "FSM",
        numeric3: "583"
      },
      MD: {
        countryName: "Moldova",
        postalCodeFormat: "MD.json",
        alpha2: "MD",
        alpha3: "MDA",
        numeric3: "498"
      },
      MC: {
        countryName: "Monaco",
        postalCodeFormat: "MC.json",
        alpha2: "MC",
        alpha3: "MCO",
        numeric3: "492"
      },
      MN: {
        countryName: "Mongolia",
        postalCodeFormat: "5Digits.json",
        alpha2: "MN",
        alpha3: "MNG",
        numeric3: "496"
      },
      ME: {
        countryName: "Montenegro",
        postalCodeFormat: "5Digits.json",
        alpha2: "ME",
        alpha3: "MNE",
        numeric3: "499"
      },
      MS: {
        countryName: "Montserrat",
        postalCodeFormat: "MS.json",
        alpha2: "MS",
        alpha3: "MSR",
        numeric3: "500"
      },
      MA: {
        countryName: "Morocco",
        postalCodeFormat: "5Digits.json",
        alpha2: "MA",
        alpha3: "MAR",
        numeric3: "504"
      },
      MZ: {
        countryName: "Mozambique",
        postalCodeFormat: "4Digits.json",
        alpha2: "MZ",
        alpha3: "MOZ",
        numeric3: "508"
      },
      MM: {
        countryName: "Myanmar",
        postalCodeFormat: "5Digits.json",
        alpha2: "MM",
        alpha3: "MMR",
        numeric3: "104"
      },
      NA: {
        countryName: "Namibia",
        postalCodeFormat: "5Digits.json",
        alpha2: "NA",
        alpha3: "NAM",
        numeric3: "516"
      },
      NR: {
        countryName: "Nauru",
        alpha2: "NR",
        alpha3: "NRU",
        numeric3: "520"
      },
      NP: {
        countryName: "Nepal",
        postalCodeFormat: "5Digits.json",
        alpha2: "NP",
        alpha3: "NPL",
        numeric3: "524"
      },
      NL: {
        countryName: "Netherlands",
        postalCodeFormat: "NL.json",
        alpha2: "NL",
        alpha3: "NLD",
        numeric3: "528"
      },
      AN: {
        countryName: "Netherlands Antilles",
        alpha2: "AN",
        alpha3: "ANT",
        numeric3: "530"
      },
      NC: {
        countryName: "New Caledonia",
        postalCodeFormat: "NC.json",
        alpha2: "NC",
        alpha3: "NCL",
        numeric3: "540"
      },
      NZ: {
        countryName: "New Zealand",
        postalCodeFormat: "4Digits.json",
        alpha2: "NZ",
        alpha3: "NZL",
        numeric3: "554"
      },
      NI: {
        countryName: "Nicaragua",
        postalCodeFormat: "5Digits.json",
        alpha2: "NI",
        alpha3: "NIC",
        numeric3: "558"
      },
      NE: {
        countryName: "Niger",
        postalCodeFormat: "4Digits.json",
        alpha2: "NE",
        alpha3: "NER",
        numeric3: "562"
      },
      NG: {
        countryName: "Nigeria",
        postalCodeFormat: "6Digits.json",
        alpha2: "NG",
        alpha3: "NGA",
        numeric3: "566"
      },
      NU: {
        countryName: "Niue",
        alpha2: "NU",
        alpha3: "NIU",
        numeric3: "570"
      },
      NF: {
        countryName: "Norfolk Island",
        postalCodeFormat: "4Digits.json",
        alpha2: "NF",
        alpha3: "NFK",
        numeric3: "574"
      },
      MP: {
        countryName: "Northern Mariana Islands",
        postalCodeFormat: "US.json",
        alpha2: "MP",
        alpha3: "MNP",
        numeric3: "580"
      },
      NO: {
        countryName: "Norway",
        postalCodeFormat: "4Digits.json",
        alpha2: "NO",
        alpha3: "NOR",
        numeric3: "578"
      },
      OM: {
        countryName: "Oman",
        postalCodeFormat: "3Digits.json",
        alpha2: "OM",
        alpha3: "OMN",
        numeric3: "512"
      },
      PK: {
        countryName: "Pakistan",
        postalCodeFormat: "5Digits.json",
        alpha2: "PK",
        alpha3: "PAK",
        numeric3: "586"
      },
      PW: {
        countryName: "Palau",
        postalCodeFormat: "US.json",
        alpha2: "PW",
        alpha3: "PLW",
        numeric3: "585"
      },
      PS: {
        countryName: "Palestinian Territory, Occupied",
        postalCodeFormat: "3Digits.json",
        alpha2: "PS",
        alpha3: "PSE",
        numeric3: "275"
      },
      PA: {
        countryName: "Panama",
        postalCodeFormat: "4Digits.json",
        alpha2: "PA",
        alpha3: "PAN",
        numeric3: "591"
      },
      PG: {
        countryName: "Papua New Guinea",
        postalCodeFormat: "3Digits.json",
        alpha2: "PG",
        alpha3: "PNG",
        numeric3: "598"
      },
      PY: {
        countryName: "Paraguay",
        postalCodeFormat: "4Digits.json",
        alpha2: "PY",
        alpha3: "PRY",
        numeric3: "600"
      },
      PE: {
        countryName: "Peru",
        postalCodeFormat: "5Digits.json",
        alpha2: "PE",
        alpha3: "PER",
        numeric3: "604"
      },
      PH: {
        countryName: "Philippines",
        postalCodeFormat: "4Digits.json",
        alpha2: "PH",
        alpha3: "PHL",
        numeric3: "608"
      },
      PN: {
        countryName: "Pitcairn",
        postalCodeFormat: "PN.json",
        alpha2: "PN",
        alpha3: "PCN",
        numeric3: "612"
      },
      PL: {
        countryName: "Poland",
        postalCodeFormat: "PL.json",
        alpha2: "PL",
        alpha3: "POL",
        numeric3: "616"
      },
      PT: {
        countryName: "Portugal",
        postalCodeFormat: "PT.json",
        alpha2: "PT",
        alpha3: "PRT",
        numeric3: "620"
      },
      PR: {
        countryName: "Puerto Rico",
        postalCodeFormat: "US.json",
        alpha2: "PR",
        alpha3: "PRI",
        numeric3: "630"
      },
      QA: {
        countryName: "Qatar",
        alpha2: "QA",
        alpha3: "QAT",
        numeric3: "634"
      },
      RE: {
        countryName: "RÃ©union",
        postalCodeFormat: "RE.json",
        alpha2: "RE",
        alpha3: "REU",
        numeric3: "638"
      },
      RO: {
        countryName: "Romania",
        postalCodeFormat: "6Digits.json",
        alpha2: "RO",
        alpha3: "ROU",
        numeric3: "642"
      },
      RU: {
        countryName: "Russian Federation",
        postalCodeFormat: "RU.json",
        alpha2: "RU",
        alpha3: "RUS",
        numeric3: "643"
      },
      RW: {
        countryName: "Rwanda",
        alpha2: "RW",
        alpha3: "RWA",
        numeric3: "646"
      },
      BL: {
        countryName: "Saint-BarthÃ©lemy",
        postalCodeFormat: "BL.json",
        alpha2: "BL",
        alpha3: "BLM",
        numeric3: "652"
      },
      SH: {
        countryName: "Saint Helena",
        postalCodeFormat: "SH.json",
        alpha2: "SH",
        alpha3: "SHN",
        numeric3: "654"
      },
      KN: {
        countryName: "Saint Kitts and Nevis",
        alpha2: "KN",
        alpha3: "KNA",
        numeric3: "659"
      },
      LC: {
        countryName: "Saint Lucia",
        postalCodeFormat: "LC.json",
        alpha2: "LC",
        alpha3: "LCA",
        numeric3: "662"
      },
      MF: {
        countryName: "Saint-Martin (French part)",
        postalCodeFormat: "MF.json",
        alpha2: "MF",
        alpha3: "MAF",
        numeric3: "663"
      },
      PM: {
        countryName: "Saint Pierre and Miquelon",
        postalCodeFormat: "PM.json",
        alpha2: "PM",
        alpha3: "SPM",
        numeric3: "666"
      },
      VC: {
        countryName: "Saint Vincent and Grenadines",
        postalCodeFormat: "VC.json",
        alpha2: "VC",
        alpha3: "VCT",
        numeric3: "670"
      },
      WS: {
        countryName: "Samoa",
        postalCodeFormat: "WS.json",
        alpha2: "WS",
        alpha3: "WSM",
        numeric3: "882"
      },
      SM: {
        countryName: "San Marino",
        postalCodeFormat: "SM.json",
        alpha2: "SM",
        alpha3: "SMR",
        numeric3: "674"
      },
      ST: {
        countryName: "Sao Tome and Principe",
        alpha2: "ST",
        alpha3: "STP",
        numeric3: "678"
      },
      SA: {
        countryName: "Saudi Arabia",
        postalCodeFormat: "US.json",
        alpha2: "SA",
        alpha3: "SAU",
        numeric3: "682"
      },
      SN: {
        countryName: "Senegal",
        postalCodeFormat: "5Digits.json",
        alpha2: "SN",
        alpha3: "SEN",
        numeric3: "686"
      },
      RS: {
        countryName: "Serbia",
        postalCodeFormat: "5Digits.json",
        alpha2: "RS",
        alpha3: "SRB",
        numeric3: "688"
      },
      SC: {
        countryName: "Seychelles",
        alpha2: "SC",
        alpha3: "SYC",
        numeric3: "690"
      },
      SL: {
        countryName: "Sierra Leone",
        alpha2: "SL",
        alpha3: "SLE",
        numeric3: "694"
      },
      SG: {
        countryName: "Singapore",
        postalCodeFormat: "6Digits.json",
        alpha2: "SG",
        alpha3: "SGP",
        numeric3: "702"
      },
      SK: {
        countryName: "Slovakia",
        postalCodeFormat: "5Digits.json",
        alpha2: "SK",
        alpha3: "SVK",
        numeric3: "703"
      },
      SI: {
        countryName: "Slovenia",
        postalCodeFormat: "4Digits.json",
        alpha2: "SI",
        alpha3: "SVN",
        numeric3: "705"
      },
      SB: {
        countryName: "Solomon Islands",
        alpha2: "SB",
        alpha3: "SLB",
        numeric3: "90"
      },
      SO: {
        countryName: "Somalia",
        postalCodeFormat: "SO.json",
        alpha2: "SO",
        alpha3: "SOM",
        numeric3: "706"
      },
      ZA: {
        countryName: "South Africa",
        postalCodeFormat: "4Digits.json",
        alpha2: "ZA",
        alpha3: "ZAF",
        numeric3: "710"
      },
      GS: {
        countryName: "South Georgia and the South Sandwich Islands",
        postalCodeFormat: "GS.json",
        alpha2: "GS",
        alpha3: "SGS",
        numeric3: "239"
      },
      SS: {
        countryName: "South Sudan",
        alpha2: "SS",
        alpha3: "SSD",
        numeric3: "728"
      },
      ES: {
        countryName: "Spain",
        postalCodeFormat: "5Digits.json",
        alpha2: "ES",
        alpha3: "ESP",
        numeric3: "724"
      },
      LK: {
        countryName: "Sri Lanka",
        postalCodeFormat: "5Digits.json",
        alpha2: "LK",
        alpha3: "LKA",
        numeric3: "144"
      },
      SD: {
        countryName: "Sudan",
        postalCodeFormat: "5Digits.json",
        alpha2: "SD",
        alpha3: "SDN",
        numeric3: "736"
      },
      SR: {
        countryName: "Suriname *",
        alpha2: "SR",
        alpha3: "SUR",
        numeric3: "740"
      },
      SJ: {
        countryName: "Svalbard and Jan Mayen Islands",
        postalCodeFormat: "4Digits.json",
        alpha2: "SJ",
        alpha3: "SJM",
        numeric3: "744"
      },
      SZ: {
        countryName: "Swaziland",
        postalCodeFormat: "SZ.json",
        alpha2: "SZ",
        alpha3: "SWZ",
        numeric3: "748"
      },
      SE: {
        countryName: "Sweden",
        postalCodeFormat: "5Digits.json",
        alpha2: "SE",
        alpha3: "SWE",
        numeric3: "752"
      },
      CH: {
        countryName: "Switzerland",
        postalCodeFormat: "4Digits.json",
        alpha2: "CH",
        alpha3: "CHE",
        numeric3: "756"
      },
      SY: {
        countryName: "Syrian Arab Republic (Syria)",
        alpha2: "SY",
        alpha3: "SYR",
        numeric3: "760"
      },
      TW: {
        countryName: "Taiwan, Republic of China",
        postalCodeFormat: "TW.json",
        alpha2: "TW",
        alpha3: "TWN",
        numeric3: "158"
      },
      TJ: {
        countryName: "Tajikistan",
        postalCodeFormat: "6Digits.json",
        alpha2: "TJ",
        alpha3: "TJK",
        numeric3: "762"
      },
      TZ: {
        countryName: "Tanzania *, United Republic of",
        postalCodeFormat: "5Digits.json",
        alpha2: "TZ",
        alpha3: "TZA",
        numeric3: "834"
      },
      TH: {
        countryName: "Thailand",
        postalCodeFormat: "5Digits.json",
        alpha2: "TH",
        alpha3: "THA",
        numeric3: "764"
      },
      TL: {
        countryName: "Timor-Leste",
        alpha2: "TL",
        alpha3: "TLS",
        numeric3: "626"
      },
      TG: {
        countryName: "Togo",
        alpha2: "TG",
        alpha3: "TGO",
        numeric3: "768"
      },
      TK: {
        countryName: "Tokelau",
        alpha2: "TK",
        alpha3: "TKL",
        numeric3: "772"
      },
      TO: {
        countryName: "Tonga",
        alpha2: "TO",
        alpha3: "TON",
        numeric3: "776"
      },
      TT: {
        countryName: "Trinidad and Tobago",
        postalCodeFormat: "6Digits.json",
        alpha2: "TT",
        alpha3: "TTO",
        numeric3: "780"
      },
      TN: {
        countryName: "Tunisia",
        postalCodeFormat: "4Digits.json",
        alpha2: "TN",
        alpha3: "TUN",
        numeric3: "788"
      },
      TR: {
        countryName: "Turkey",
        postalCodeFormat: "5Digits.json",
        alpha2: "TR",
        alpha3: "TUR",
        numeric3: "792"
      },
      TM: {
        countryName: "Turkmenistan",
        postalCodeFormat: "6Digits.json",
        alpha2: "TM",
        alpha3: "TKM",
        numeric3: "795"
      },
      TC: {
        countryName: "Turks and Caicos Islands",
        postalCodeFormat: "TC.json",
        alpha2: "TC",
        alpha3: "TCA",
        numeric3: "796"
      },
      TV: {
        countryName: "Tuvalu",
        alpha2: "TV",
        alpha3: "TUV",
        numeric3: "798"
      },
      UG: {
        countryName: "Uganda",
        alpha2: "UG",
        alpha3: "UGA",
        numeric3: "800"
      },
      UA: {
        countryName: "Ukraine",
        postalCodeFormat: "5Digits.json",
        alpha2: "UA",
        alpha3: "UKR",
        numeric3: "804"
      },
      AE: {
        countryName: "United Arab Emirates",
        alpha2: "AE",
        alpha3: "ARE",
        numeric3: "784"
      },
      GB: {
        countryName: "United Kingdom",
        postalCodeFormat: "GB.json",
        alpha2: "GB",
        alpha3: "GBR",
        numeric3: "826"
      },
      US: {
        countryName: "United States of America",
        postalCodeFormat: "US.json",
        alpha2: "US",
        alpha3: "USA",
        numeric3: "840"
      },
      UM: {
        countryName: "United States Minor Outlying Islands",
        alpha2: "UM",
        alpha3: "UMI",
        numeric3: "581"
      },
      UY: {
        countryName: "Uruguay",
        postalCodeFormat: "5Digits.json",
        alpha2: "UY",
        alpha3: "URY",
        numeric3: "858"
      },
      UZ: {
        countryName: "Uzbekistan",
        postalCodeFormat: "6Digits.json",
        alpha2: "UZ",
        alpha3: "UZB",
        numeric3: "860"
      },
      VU: {
        countryName: "Vanuatu",
        alpha2: "VU",
        alpha3: "VUT",
        numeric3: "548"
      },
      VE: {
        countryName: "Venezuela (Bolivarian Republic of)",
        postalCodeFormat: "VE.json",
        alpha2: "VE",
        alpha3: "VEN",
        numeric3: "862"
      },
      VN: {
        countryName: "Viet Nam",
        postalCodeFormat: "6Digits.json",
        alpha2: "VN",
        alpha3: "VNM",
        numeric3: "704"
      },
      VI: {
        countryName: "Virgin Islands, US",
        postalCodeFormat: "US.json",
        alpha2: "VI",
        alpha3: "VIR",
        numeric3: "850"
      },
      WF: {
        countryName: "Wallis and Futuna Islands",
        postalCodeFormat: "WF.json",
        alpha2: "WF",
        alpha3: "WLF",
        numeric3: "876"
      },
      EH: {
        countryName: "Western Sahara",
        alpha2: "EH",
        alpha3: "ESH",
        numeric3: "732"
      },
      YE: {
        countryName: "Yemen",
        alpha2: "YE",
        alpha3: "YEM",
        numeric3: "887"
      },
      ZM: {
        countryName: "Zambia",
        postalCodeFormat: "5Digits.json",
        alpha2: "ZM",
        alpha3: "ZMB",
        numeric3: "894"
      },
      ZW: {
        countryName: "Zimbabwe",
        alpha2: "ZW",
        alpha3: "ZWE",
        numeric3: "716"
      }
    };
  }
});

// node_modules/postal-codes-js/generated/postal-codes-alpha3.json
var require_postal_codes_alpha3 = __commonJS({
  "node_modules/postal-codes-js/generated/postal-codes-alpha3.json"(exports2, module2) {
    module2.exports = {
      AFG: {
        countryName: "Afghanistan",
        postalCodeFormat: "4Digits.json",
        alpha2: "AF",
        alpha3: "AFG",
        numeric3: "4"
      },
      ALA: {
        countryName: "Aland Islands",
        postalCodeFormat: "AX.json",
        alpha2: "AX",
        alpha3: "ALA",
        numeric3: "248"
      },
      ALB: {
        countryName: "Albania",
        postalCodeFormat: "4Digits.json",
        alpha2: "AL",
        alpha3: "ALB",
        numeric3: "8"
      },
      DZA: {
        countryName: "Algeria",
        postalCodeFormat: "5Digits.json",
        alpha2: "DZ",
        alpha3: "DZA",
        numeric3: "12"
      },
      ASM: {
        countryName: "American Samoa",
        postalCodeFormat: "5Digits.json",
        alpha2: "AS",
        alpha3: "ASM",
        numeric3: "16"
      },
      AND: {
        countryName: "Andorra",
        postalCodeFormat: "AD.json",
        alpha2: "AD",
        alpha3: "AND",
        numeric3: "20"
      },
      AGO: {
        countryName: "Angola",
        alpha2: "AO",
        alpha3: "AGO",
        numeric3: "24"
      },
      AIA: {
        countryName: "Anguilla",
        postalCodeFormat: "AI.json",
        alpha2: "AI",
        alpha3: "AIA",
        numeric3: "660"
      },
      ATA: {
        countryName: "Antarctica",
        postalCodeFormat: "AQ.json",
        alpha2: "AQ",
        alpha3: "ATA",
        numeric3: "10"
      },
      ATG: {
        countryName: "Antigua and Barbuda",
        alpha2: "AG",
        alpha3: "ATG",
        numeric3: "28"
      },
      ARG: {
        countryName: "Argentina",
        postalCodeFormat: "4Digits.json",
        alpha2: "AR",
        alpha3: "ARG",
        numeric3: "32"
      },
      ARM: {
        countryName: "Armenia",
        postalCodeFormat: "4Digits.json",
        alpha2: "AM",
        alpha3: "ARM",
        numeric3: "51"
      },
      ABW: {
        countryName: "Aruba",
        alpha2: "AW",
        alpha3: "ABW",
        numeric3: "533"
      },
      AUS: {
        countryName: "Australia",
        postalCodeFormat: "4Digits.json",
        alpha2: "AU",
        alpha3: "AUS",
        numeric3: "36"
      },
      AUT: {
        countryName: "Austria",
        postalCodeFormat: "4Digits.json",
        alpha2: "AT",
        alpha3: "AUT",
        numeric3: "40"
      },
      AZE: {
        countryName: "Azerbaijan",
        postalCodeFormat: "AZ.json",
        alpha2: "AZ",
        alpha3: "AZE",
        numeric3: "31"
      },
      BHS: {
        countryName: "Bahamas",
        alpha2: "BS",
        alpha3: "BHS",
        numeric3: "44"
      },
      BHR: {
        countryName: "Bahrain",
        postalCodeFormat: "BH.json",
        alpha2: "BH",
        alpha3: "BHR",
        numeric3: "48"
      },
      BGD: {
        countryName: "Bangladesh",
        postalCodeFormat: "4Digits.json",
        alpha2: "BD",
        alpha3: "BGD",
        numeric3: "50"
      },
      BRB: {
        countryName: "Barbados",
        postalCodeFormat: "BB.json",
        alpha2: "BB",
        alpha3: "BRB",
        numeric3: "52"
      },
      BLR: {
        countryName: "Belarus",
        postalCodeFormat: "6Digits.json",
        alpha2: "BY",
        alpha3: "BLR",
        numeric3: "112"
      },
      BEL: {
        countryName: "Belgium",
        postalCodeFormat: "4Digits.json",
        alpha2: "BE",
        alpha3: "BEL",
        numeric3: "56"
      },
      BLZ: {
        countryName: "Belize",
        alpha2: "BZ",
        alpha3: "BLZ",
        numeric3: "84"
      },
      BEN: {
        countryName: "Benin",
        alpha2: "BJ",
        alpha3: "BEN",
        numeric3: "204"
      },
      BMU: {
        countryName: "Bermuda",
        alpha2: "BM",
        alpha3: "BMU",
        numeric3: "60"
      },
      BTN: {
        countryName: "Bhutan",
        postalCodeFormat: "5Digits.json",
        alpha2: "BT",
        alpha3: "BTN",
        numeric3: "64"
      },
      BOL: {
        countryName: "Bolivia",
        postalCodeFormat: "4Digits.json",
        alpha2: "BO",
        alpha3: "BOL",
        numeric3: "68"
      },
      BIH: {
        countryName: "Bosnia and Herzegovina",
        postalCodeFormat: "5Digits.json",
        alpha2: "BA",
        alpha3: "BIH",
        numeric3: "70"
      },
      BWA: {
        countryName: "Botswana",
        alpha2: "BW",
        alpha3: "BWA",
        numeric3: "72"
      },
      BVT: {
        countryName: "Bouvet Island",
        alpha2: "BV",
        alpha3: "BVT",
        numeric3: "74"
      },
      BRA: {
        countryName: "Brazil",
        postalCodeFormat: "8Digits.json",
        alpha2: "BR",
        alpha3: "BRA",
        numeric3: "76"
      },
      VGB: {
        countryName: "British Virgin Islands",
        postalCodeFormat: "VG.json",
        alpha2: "VG",
        alpha3: "VGB",
        numeric3: "92"
      },
      IOT: {
        countryName: "British Indian Ocean Territory",
        postalCodeFormat: "IO.json",
        alpha2: "IO",
        alpha3: "IOT",
        numeric3: "86"
      },
      BRN: {
        countryName: "Brunei Darussalam",
        postalCodeFormat: "BN.json",
        alpha2: "BN",
        alpha3: "BRN",
        numeric3: "96"
      },
      BGR: {
        countryName: "Bulgaria",
        postalCodeFormat: "4Digits.json",
        alpha2: "BG",
        alpha3: "BGR",
        numeric3: "100"
      },
      BFA: {
        countryName: "Burkina Faso",
        alpha2: "BF",
        alpha3: "BFA",
        numeric3: "854"
      },
      BDI: {
        countryName: "Burundi",
        alpha2: "BI",
        alpha3: "BDI",
        numeric3: "108"
      },
      KHM: {
        countryName: "Cambodia",
        postalCodeFormat: "5Digits.json",
        alpha2: "KH",
        alpha3: "KHM",
        numeric3: "116"
      },
      CMR: {
        countryName: "Cameroon",
        alpha2: "CM",
        alpha3: "CMR",
        numeric3: "120"
      },
      CAN: {
        countryName: "Canada",
        postalCodeFormat: "CA.json",
        alpha2: "CA",
        alpha3: "CAN",
        numeric3: "124"
      },
      CPV: {
        countryName: "Cape Verde",
        postalCodeFormat: "4Digits.json",
        alpha2: "CV",
        alpha3: "CPV",
        numeric3: "132"
      },
      CYM: {
        countryName: "Cayman Islands",
        postalCodeFormat: "KY.json",
        alpha2: "KY",
        alpha3: "CYM",
        numeric3: "136"
      },
      CAF: {
        countryName: "Central African Republic",
        alpha2: "CF",
        alpha3: "CAF",
        numeric3: "140"
      },
      TCD: {
        countryName: "Chad",
        postalCodeFormat: "5Digits.json",
        alpha2: "TD",
        alpha3: "TCD",
        numeric3: "148"
      },
      CHL: {
        countryName: "Chile",
        postalCodeFormat: "7Digits.json",
        alpha2: "CL",
        alpha3: "CHL",
        numeric3: "152"
      },
      CHN: {
        countryName: "China",
        postalCodeFormat: "6Digits.json",
        alpha2: "CN",
        alpha3: "CHN",
        numeric3: "156"
      },
      HKG: {
        countryName: "Hong Kong, Special Administrative Region of China",
        alpha2: "HK",
        alpha3: "HKG",
        numeric3: "344"
      },
      MAC: {
        countryName: "Macao, Special Administrative Region of China",
        alpha2: "MO",
        alpha3: "MAC",
        numeric3: "446"
      },
      CXR: {
        countryName: "Christmas Island",
        postalCodeFormat: "4Digits.json",
        alpha2: "CX",
        alpha3: "CXR",
        numeric3: "162"
      },
      CCK: {
        countryName: "Cocos (Keeling) Islands",
        postalCodeFormat: "4Digits.json",
        alpha2: "CC",
        alpha3: "CCK",
        numeric3: "166"
      },
      COL: {
        countryName: "Colombia",
        postalCodeFormat: "6Digits.json",
        alpha2: "CO",
        alpha3: "COL",
        numeric3: "170"
      },
      COM: {
        countryName: "Comoros",
        alpha2: "KM",
        alpha3: "COM",
        numeric3: "174"
      },
      COG: {
        countryName: "Congo (Brazzaville)",
        alpha2: "CG",
        alpha3: "COG",
        numeric3: "178"
      },
      COD: {
        countryName: "Congo, Democratic Republic of the",
        alpha2: "CD",
        alpha3: "COD",
        numeric3: "180"
      },
      COK: {
        countryName: "Cook Islands",
        alpha2: "CK",
        alpha3: "COK",
        numeric3: "184"
      },
      CRI: {
        countryName: "Costa Rica",
        postalCodeFormat: "5Digits.json",
        alpha2: "CR",
        alpha3: "CRI",
        numeric3: "188"
      },
      CIV: {
        countryName: "CÃ´te d'Ivoire",
        alpha2: "CI",
        alpha3: "CIV",
        numeric3: "384"
      },
      HRV: {
        countryName: "Croatia",
        postalCodeFormat: "5Digits.json",
        alpha2: "HR",
        alpha3: "HRV",
        numeric3: "191"
      },
      CUB: {
        countryName: "Cuba",
        postalCodeFormat: "5Digits.json",
        alpha2: "CU",
        alpha3: "CUB",
        numeric3: "192"
      },
      CYP: {
        countryName: "Cyprus",
        postalCodeFormat: "4Digits.json",
        alpha2: "CY",
        alpha3: "CYP",
        numeric3: "196"
      },
      CZE: {
        countryName: "Czech Republic",
        postalCodeFormat: "5Digits.json",
        alpha2: "CZ",
        alpha3: "CZE",
        numeric3: "203"
      },
      DNK: {
        countryName: "Denmark",
        postalCodeFormat: "DK.json",
        alpha2: "DK",
        alpha3: "DNK",
        numeric3: "208"
      },
      DJI: {
        countryName: "Djibouti",
        alpha2: "DJ",
        alpha3: "DJI",
        numeric3: "262"
      },
      DMA: {
        countryName: "Dominica",
        alpha2: "DM",
        alpha3: "DMA",
        numeric3: "212"
      },
      DOM: {
        countryName: "Dominican Republic",
        postalCodeFormat: "5Digits.json",
        alpha2: "DO",
        alpha3: "DOM",
        numeric3: "214"
      },
      ECU: {
        countryName: "Ecuador",
        postalCodeFormat: "6Digits.json",
        alpha2: "EC",
        alpha3: "ECU",
        numeric3: "218"
      },
      EGY: {
        countryName: "Egypt",
        postalCodeFormat: "5Digits.json",
        alpha2: "EG",
        alpha3: "EGY",
        numeric3: "818"
      },
      SLV: {
        countryName: "El Salvador",
        postalCodeFormat: "4Digits.json",
        alpha2: "SV",
        alpha3: "SLV",
        numeric3: "222"
      },
      GNQ: {
        countryName: "Equatorial Guinea",
        alpha2: "GQ",
        alpha3: "GNQ",
        numeric3: "226"
      },
      ERI: {
        countryName: "Eritrea",
        alpha2: "ER",
        alpha3: "ERI",
        numeric3: "232"
      },
      EST: {
        countryName: "Estonia",
        postalCodeFormat: "5Digits.json",
        alpha2: "EE",
        alpha3: "EST",
        numeric3: "233"
      },
      ETH: {
        countryName: "Ethiopia",
        postalCodeFormat: "4Digits.json",
        alpha2: "ET",
        alpha3: "ETH",
        numeric3: "231"
      },
      FLK: {
        countryName: "Falkland Islands (Malvinas)",
        postalCodeFormat: "FK.json",
        alpha2: "FK",
        alpha3: "FLK",
        numeric3: "238"
      },
      FRO: {
        countryName: "Faroe Islands",
        postalCodeFormat: "3Digits.json",
        alpha2: "FO",
        alpha3: "FRO",
        numeric3: "234"
      },
      FJI: {
        countryName: "Fiji",
        alpha2: "FJ",
        alpha3: "FJI",
        numeric3: "242"
      },
      FIN: {
        countryName: "Finland",
        postalCodeFormat: "5Digits.json",
        alpha2: "FI",
        alpha3: "FIN",
        numeric3: "246"
      },
      FRA: {
        countryName: "France",
        postalCodeFormat: "5Digits.json",
        alpha2: "FR",
        alpha3: "FRA",
        numeric3: "250"
      },
      GUF: {
        countryName: "French Guiana",
        postalCodeFormat: "GF.json",
        alpha2: "GF",
        alpha3: "GUF",
        numeric3: "254"
      },
      PYF: {
        countryName: "French Polynesia",
        postalCodeFormat: "PF.json",
        alpha2: "PF",
        alpha3: "PYF",
        numeric3: "258"
      },
      ATF: {
        countryName: "French Southern Territories",
        alpha2: "TF",
        alpha3: "ATF",
        numeric3: "260"
      },
      GAB: {
        countryName: "Gabon",
        alpha2: "GA",
        alpha3: "GAB",
        numeric3: "266"
      },
      GMB: {
        countryName: "Gambia",
        alpha2: "GM",
        alpha3: "GMB",
        numeric3: "270"
      },
      GEO: {
        countryName: "Georgia",
        postalCodeFormat: "4Digits.json",
        alpha2: "GE",
        alpha3: "GEO",
        numeric3: "268"
      },
      DEU: {
        countryName: "Germany",
        postalCodeFormat: "5Digits.json",
        alpha2: "DE",
        alpha3: "DEU",
        numeric3: "276"
      },
      GHA: {
        countryName: "Ghana",
        alpha2: "GH",
        alpha3: "GHA",
        numeric3: "288"
      },
      GIB: {
        countryName: "Gibraltar",
        postalCodeFormat: "GI.json",
        alpha2: "GI",
        alpha3: "GIB",
        numeric3: "292"
      },
      GRC: {
        countryName: "Greece",
        postalCodeFormat: "5Digits.json",
        alpha2: "GR",
        alpha3: "GRC",
        numeric3: "300"
      },
      GRL: {
        countryName: "Greenland",
        postalCodeFormat: "4Digits.json",
        alpha2: "GL",
        alpha3: "GRL",
        numeric3: "304"
      },
      GRD: {
        countryName: "Grenada",
        alpha2: "GD",
        alpha3: "GRD",
        numeric3: "308"
      },
      GLP: {
        countryName: "Guadeloupe",
        postalCodeFormat: "GP.json",
        alpha2: "GP",
        alpha3: "GLP",
        numeric3: "312"
      },
      GUM: {
        countryName: "Guam",
        postalCodeFormat: "US.json",
        alpha2: "GU",
        alpha3: "GUM",
        numeric3: "316"
      },
      GTM: {
        countryName: "Guatemala",
        postalCodeFormat: "5Digits.json",
        alpha2: "GT",
        alpha3: "GTM",
        numeric3: "320"
      },
      GGY: {
        countryName: "Guernsey",
        postalCodeFormat: "GG.json",
        alpha2: "GG",
        alpha3: "GGY",
        numeric3: "831"
      },
      GIN: {
        countryName: "Guinea",
        postalCodeFormat: "3Digits.json",
        alpha2: "GN",
        alpha3: "GIN",
        numeric3: "324"
      },
      GNB: {
        countryName: "Guinea-Bissau",
        postalCodeFormat: "4Digits.json",
        alpha2: "GW",
        alpha3: "GNB",
        numeric3: "624"
      },
      GUY: {
        countryName: "Guyana",
        alpha2: "GY",
        alpha3: "GUY",
        numeric3: "328"
      },
      HTI: {
        countryName: "Haiti",
        postalCodeFormat: "4Digits.json",
        alpha2: "HT",
        alpha3: "HTI",
        numeric3: "332"
      },
      HMD: {
        countryName: "Heard Island and Mcdonald Islands",
        postalCodeFormat: "4Digits.json",
        alpha2: "HM",
        alpha3: "HMD",
        numeric3: "334"
      },
      VAT: {
        countryName: "Holy See (Vatican City State)",
        postalCodeFormat: "VA.json",
        alpha2: "VA",
        alpha3: "VAT",
        numeric3: "336"
      },
      HND: {
        countryName: "Honduras",
        postalCodeFormat: "HN.json",
        alpha2: "HN",
        alpha3: "HND",
        numeric3: "340"
      },
      HUN: {
        countryName: "Hungary",
        postalCodeFormat: "4Digits.json",
        alpha2: "HU",
        alpha3: "HUN",
        numeric3: "348"
      },
      ISL: {
        countryName: "Iceland",
        postalCodeFormat: "3Digits.json",
        alpha2: "IS",
        alpha3: "ISL",
        numeric3: "352"
      },
      IND: {
        countryName: "India",
        postalCodeFormat: "6Digits.json",
        alpha2: "IN",
        alpha3: "IND",
        numeric3: "356"
      },
      IDN: {
        countryName: "Indonesia",
        postalCodeFormat: "5Digits.json",
        alpha2: "ID",
        alpha3: "IDN",
        numeric3: "360"
      },
      IRN: {
        countryName: "Iran, Islamic Republic of",
        postalCodeFormat: "10Digits.json",
        alpha2: "IR",
        alpha3: "IRN",
        numeric3: "364"
      },
      IRQ: {
        countryName: "Iraq",
        postalCodeFormat: "5Digits.json",
        alpha2: "IQ",
        alpha3: "IRQ",
        numeric3: "368"
      },
      IRL: {
        countryName: "Ireland",
        postalCodeFormat: "IE.json",
        alpha2: "IE",
        alpha3: "IRL",
        numeric3: "372"
      },
      IMN: {
        countryName: "Isle of Man",
        postalCodeFormat: "IM.json",
        alpha2: "IM",
        alpha3: "IMN",
        numeric3: "833"
      },
      ISR: {
        countryName: "Israel",
        postalCodeFormat: "7Digits.json",
        alpha2: "IL",
        alpha3: "ISR",
        numeric3: "376"
      },
      ITA: {
        countryName: "Italy",
        postalCodeFormat: "5Digits.json",
        alpha2: "IT",
        alpha3: "ITA",
        numeric3: "380"
      },
      JAM: {
        countryName: "Jamaica",
        postalCodeFormat: "2Digits.json",
        alpha2: "JM",
        alpha3: "JAM",
        numeric3: "388"
      },
      JPN: {
        countryName: "Japan",
        postalCodeFormat: "7Digits.json",
        alpha2: "JP",
        alpha3: "JPN",
        numeric3: "392"
      },
      JEY: {
        countryName: "Jersey",
        postalCodeFormat: "JE.json",
        alpha2: "JE",
        alpha3: "JEY",
        numeric3: "832"
      },
      JOR: {
        countryName: "Jordan",
        postalCodeFormat: "5Digits.json",
        alpha2: "JO",
        alpha3: "JOR",
        numeric3: "400"
      },
      KAZ: {
        countryName: "Kazakhstan",
        postalCodeFormat: "6Digits.json",
        alpha2: "KZ",
        alpha3: "KAZ",
        numeric3: "398"
      },
      KEN: {
        countryName: "Kenya",
        postalCodeFormat: "5Digits.json",
        alpha2: "KE",
        alpha3: "KEN",
        numeric3: "404"
      },
      KIR: {
        countryName: "Kiribati",
        alpha2: "KI",
        alpha3: "KIR",
        numeric3: "296"
      },
      PRK: {
        countryName: "Korea, Democratic People's Republic of",
        alpha2: "KP",
        alpha3: "PRK",
        numeric3: "408"
      },
      KOR: {
        countryName: "Korea, Republic of",
        postalCodeFormat: "5Digits.json",
        alpha2: "KR",
        alpha3: "KOR",
        numeric3: "410"
      },
      KWT: {
        countryName: "Kuwait",
        postalCodeFormat: "5Digits.json",
        alpha2: "KW",
        alpha3: "KWT",
        numeric3: "414"
      },
      KGZ: {
        countryName: "Kyrgyzstan",
        postalCodeFormat: "6Digits.json",
        alpha2: "KG",
        alpha3: "KGZ",
        numeric3: "417"
      },
      LAO: {
        countryName: "Lao PDR",
        postalCodeFormat: "5Digits.json",
        alpha2: "LA",
        alpha3: "LAO",
        numeric3: "418"
      },
      LVA: {
        countryName: "Latvia",
        postalCodeFormat: "LV.json",
        alpha2: "LV",
        alpha3: "LVA",
        numeric3: "428"
      },
      LBN: {
        countryName: "Lebanon",
        postalCodeFormat: "LB.json",
        alpha2: "LB",
        alpha3: "LBN",
        numeric3: "422"
      },
      LSO: {
        countryName: "Lesotho",
        postalCodeFormat: "3Digits.json",
        alpha2: "LS",
        alpha3: "LSO",
        numeric3: "426"
      },
      LBR: {
        countryName: "Liberia",
        postalCodeFormat: "4Digits.json",
        alpha2: "LR",
        alpha3: "LBR",
        numeric3: "430"
      },
      LBY: {
        countryName: "Libya",
        postalCodeFormat: "5Digits.json",
        alpha2: "LY",
        alpha3: "LBY",
        numeric3: "434"
      },
      LIE: {
        countryName: "Liechtenstein",
        postalCodeFormat: "4Digits.json",
        alpha2: "LI",
        alpha3: "LIE",
        numeric3: "438"
      },
      LTU: {
        countryName: "Lithuania",
        postalCodeFormat: "LT.json",
        alpha2: "LT",
        alpha3: "LTU",
        numeric3: "440"
      },
      LUX: {
        countryName: "Luxembourg",
        postalCodeFormat: "LU.json",
        alpha2: "LU",
        alpha3: "LUX",
        numeric3: "442"
      },
      MKD: {
        countryName: "Macedonia, Republic of",
        postalCodeFormat: "4Digits.json",
        alpha2: "MK",
        alpha3: "MKD",
        numeric3: "807"
      },
      MDG: {
        countryName: "Madagascar",
        postalCodeFormat: "3Digits.json",
        alpha2: "MG",
        alpha3: "MDG",
        numeric3: "450"
      },
      MWI: {
        countryName: "Malawi",
        alpha2: "MW",
        alpha3: "MWI",
        numeric3: "454"
      },
      MYS: {
        countryName: "Malaysia",
        postalCodeFormat: "5Digits.json",
        alpha2: "MY",
        alpha3: "MYS",
        numeric3: "458"
      },
      MDV: {
        countryName: "Maldives",
        postalCodeFormat: "5Digits.json",
        alpha2: "MV",
        alpha3: "MDV",
        numeric3: "462"
      },
      MLI: {
        countryName: "Mali",
        alpha2: "ML",
        alpha3: "MLI",
        numeric3: "466"
      },
      MLT: {
        countryName: "Malta",
        postalCodeFormat: "MT.json",
        alpha2: "MT",
        alpha3: "MLT",
        numeric3: "470"
      },
      MHL: {
        countryName: "Marshall Islands",
        postalCodeFormat: "US.json",
        alpha2: "MH",
        alpha3: "MHL",
        numeric3: "584"
      },
      MTQ: {
        countryName: "Martinique",
        postalCodeFormat: "5Digits.json",
        alpha2: "MQ",
        alpha3: "MTQ",
        numeric3: "474"
      },
      MRT: {
        countryName: "Mauritania",
        alpha2: "MR",
        alpha3: "MRT",
        numeric3: "478"
      },
      MUS: {
        countryName: "Mauritius",
        postalCodeFormat: "5Digits.json",
        alpha2: "MU",
        alpha3: "MUS",
        numeric3: "480"
      },
      MYT: {
        countryName: "Mayotte",
        postalCodeFormat: "5Digits.json",
        alpha2: "YT",
        alpha3: "MYT",
        numeric3: "175"
      },
      MEX: {
        countryName: "Mexico",
        postalCodeFormat: "5Digits.json",
        alpha2: "MX",
        alpha3: "MEX",
        numeric3: "484"
      },
      FSM: {
        countryName: "Micronesia, Federated States of",
        postalCodeFormat: "US.json",
        alpha2: "FM",
        alpha3: "FSM",
        numeric3: "583"
      },
      MDA: {
        countryName: "Moldova",
        postalCodeFormat: "MD.json",
        alpha2: "MD",
        alpha3: "MDA",
        numeric3: "498"
      },
      MCO: {
        countryName: "Monaco",
        postalCodeFormat: "MC.json",
        alpha2: "MC",
        alpha3: "MCO",
        numeric3: "492"
      },
      MNG: {
        countryName: "Mongolia",
        postalCodeFormat: "5Digits.json",
        alpha2: "MN",
        alpha3: "MNG",
        numeric3: "496"
      },
      MNE: {
        countryName: "Montenegro",
        postalCodeFormat: "5Digits.json",
        alpha2: "ME",
        alpha3: "MNE",
        numeric3: "499"
      },
      MSR: {
        countryName: "Montserrat",
        postalCodeFormat: "MS.json",
        alpha2: "MS",
        alpha3: "MSR",
        numeric3: "500"
      },
      MAR: {
        countryName: "Morocco",
        postalCodeFormat: "5Digits.json",
        alpha2: "MA",
        alpha3: "MAR",
        numeric3: "504"
      },
      MOZ: {
        countryName: "Mozambique",
        postalCodeFormat: "4Digits.json",
        alpha2: "MZ",
        alpha3: "MOZ",
        numeric3: "508"
      },
      MMR: {
        countryName: "Myanmar",
        postalCodeFormat: "5Digits.json",
        alpha2: "MM",
        alpha3: "MMR",
        numeric3: "104"
      },
      NAM: {
        countryName: "Namibia",
        postalCodeFormat: "5Digits.json",
        alpha2: "NA",
        alpha3: "NAM",
        numeric3: "516"
      },
      NRU: {
        countryName: "Nauru",
        alpha2: "NR",
        alpha3: "NRU",
        numeric3: "520"
      },
      NPL: {
        countryName: "Nepal",
        postalCodeFormat: "5Digits.json",
        alpha2: "NP",
        alpha3: "NPL",
        numeric3: "524"
      },
      NLD: {
        countryName: "Netherlands",
        postalCodeFormat: "NL.json",
        alpha2: "NL",
        alpha3: "NLD",
        numeric3: "528"
      },
      ANT: {
        countryName: "Netherlands Antilles",
        alpha2: "AN",
        alpha3: "ANT",
        numeric3: "530"
      },
      NCL: {
        countryName: "New Caledonia",
        postalCodeFormat: "NC.json",
        alpha2: "NC",
        alpha3: "NCL",
        numeric3: "540"
      },
      NZL: {
        countryName: "New Zealand",
        postalCodeFormat: "4Digits.json",
        alpha2: "NZ",
        alpha3: "NZL",
        numeric3: "554"
      },
      NIC: {
        countryName: "Nicaragua",
        postalCodeFormat: "5Digits.json",
        alpha2: "NI",
        alpha3: "NIC",
        numeric3: "558"
      },
      NER: {
        countryName: "Niger",
        postalCodeFormat: "4Digits.json",
        alpha2: "NE",
        alpha3: "NER",
        numeric3: "562"
      },
      NGA: {
        countryName: "Nigeria",
        postalCodeFormat: "6Digits.json",
        alpha2: "NG",
        alpha3: "NGA",
        numeric3: "566"
      },
      NIU: {
        countryName: "Niue",
        alpha2: "NU",
        alpha3: "NIU",
        numeric3: "570"
      },
      NFK: {
        countryName: "Norfolk Island",
        postalCodeFormat: "4Digits.json",
        alpha2: "NF",
        alpha3: "NFK",
        numeric3: "574"
      },
      MNP: {
        countryName: "Northern Mariana Islands",
        postalCodeFormat: "US.json",
        alpha2: "MP",
        alpha3: "MNP",
        numeric3: "580"
      },
      NOR: {
        countryName: "Norway",
        postalCodeFormat: "4Digits.json",
        alpha2: "NO",
        alpha3: "NOR",
        numeric3: "578"
      },
      OMN: {
        countryName: "Oman",
        postalCodeFormat: "3Digits.json",
        alpha2: "OM",
        alpha3: "OMN",
        numeric3: "512"
      },
      PAK: {
        countryName: "Pakistan",
        postalCodeFormat: "5Digits.json",
        alpha2: "PK",
        alpha3: "PAK",
        numeric3: "586"
      },
      PLW: {
        countryName: "Palau",
        postalCodeFormat: "US.json",
        alpha2: "PW",
        alpha3: "PLW",
        numeric3: "585"
      },
      PSE: {
        countryName: "Palestinian Territory, Occupied",
        postalCodeFormat: "3Digits.json",
        alpha2: "PS",
        alpha3: "PSE",
        numeric3: "275"
      },
      PAN: {
        countryName: "Panama",
        postalCodeFormat: "4Digits.json",
        alpha2: "PA",
        alpha3: "PAN",
        numeric3: "591"
      },
      PNG: {
        countryName: "Papua New Guinea",
        postalCodeFormat: "3Digits.json",
        alpha2: "PG",
        alpha3: "PNG",
        numeric3: "598"
      },
      PRY: {
        countryName: "Paraguay",
        postalCodeFormat: "4Digits.json",
        alpha2: "PY",
        alpha3: "PRY",
        numeric3: "600"
      },
      PER: {
        countryName: "Peru",
        postalCodeFormat: "5Digits.json",
        alpha2: "PE",
        alpha3: "PER",
        numeric3: "604"
      },
      PHL: {
        countryName: "Philippines",
        postalCodeFormat: "4Digits.json",
        alpha2: "PH",
        alpha3: "PHL",
        numeric3: "608"
      },
      PCN: {
        countryName: "Pitcairn",
        postalCodeFormat: "PN.json",
        alpha2: "PN",
        alpha3: "PCN",
        numeric3: "612"
      },
      POL: {
        countryName: "Poland",
        postalCodeFormat: "PL.json",
        alpha2: "PL",
        alpha3: "POL",
        numeric3: "616"
      },
      PRT: {
        countryName: "Portugal",
        postalCodeFormat: "PT.json",
        alpha2: "PT",
        alpha3: "PRT",
        numeric3: "620"
      },
      PRI: {
        countryName: "Puerto Rico",
        postalCodeFormat: "US.json",
        alpha2: "PR",
        alpha3: "PRI",
        numeric3: "630"
      },
      QAT: {
        countryName: "Qatar",
        alpha2: "QA",
        alpha3: "QAT",
        numeric3: "634"
      },
      REU: {
        countryName: "RÃ©union",
        postalCodeFormat: "RE.json",
        alpha2: "RE",
        alpha3: "REU",
        numeric3: "638"
      },
      ROU: {
        countryName: "Romania",
        postalCodeFormat: "6Digits.json",
        alpha2: "RO",
        alpha3: "ROU",
        numeric3: "642"
      },
      RUS: {
        countryName: "Russian Federation",
        postalCodeFormat: "RU.json",
        alpha2: "RU",
        alpha3: "RUS",
        numeric3: "643"
      },
      RWA: {
        countryName: "Rwanda",
        alpha2: "RW",
        alpha3: "RWA",
        numeric3: "646"
      },
      BLM: {
        countryName: "Saint-BarthÃ©lemy",
        postalCodeFormat: "BL.json",
        alpha2: "BL",
        alpha3: "BLM",
        numeric3: "652"
      },
      SHN: {
        countryName: "Saint Helena",
        postalCodeFormat: "SH.json",
        alpha2: "SH",
        alpha3: "SHN",
        numeric3: "654"
      },
      KNA: {
        countryName: "Saint Kitts and Nevis",
        alpha2: "KN",
        alpha3: "KNA",
        numeric3: "659"
      },
      LCA: {
        countryName: "Saint Lucia",
        postalCodeFormat: "LC.json",
        alpha2: "LC",
        alpha3: "LCA",
        numeric3: "662"
      },
      MAF: {
        countryName: "Saint-Martin (French part)",
        postalCodeFormat: "MF.json",
        alpha2: "MF",
        alpha3: "MAF",
        numeric3: "663"
      },
      SPM: {
        countryName: "Saint Pierre and Miquelon",
        postalCodeFormat: "PM.json",
        alpha2: "PM",
        alpha3: "SPM",
        numeric3: "666"
      },
      VCT: {
        countryName: "Saint Vincent and Grenadines",
        postalCodeFormat: "VC.json",
        alpha2: "VC",
        alpha3: "VCT",
        numeric3: "670"
      },
      WSM: {
        countryName: "Samoa",
        postalCodeFormat: "WS.json",
        alpha2: "WS",
        alpha3: "WSM",
        numeric3: "882"
      },
      SMR: {
        countryName: "San Marino",
        postalCodeFormat: "SM.json",
        alpha2: "SM",
        alpha3: "SMR",
        numeric3: "674"
      },
      STP: {
        countryName: "Sao Tome and Principe",
        alpha2: "ST",
        alpha3: "STP",
        numeric3: "678"
      },
      SAU: {
        countryName: "Saudi Arabia",
        postalCodeFormat: "US.json",
        alpha2: "SA",
        alpha3: "SAU",
        numeric3: "682"
      },
      SEN: {
        countryName: "Senegal",
        postalCodeFormat: "5Digits.json",
        alpha2: "SN",
        alpha3: "SEN",
        numeric3: "686"
      },
      SRB: {
        countryName: "Serbia",
        postalCodeFormat: "5Digits.json",
        alpha2: "RS",
        alpha3: "SRB",
        numeric3: "688"
      },
      SYC: {
        countryName: "Seychelles",
        alpha2: "SC",
        alpha3: "SYC",
        numeric3: "690"
      },
      SLE: {
        countryName: "Sierra Leone",
        alpha2: "SL",
        alpha3: "SLE",
        numeric3: "694"
      },
      SGP: {
        countryName: "Singapore",
        postalCodeFormat: "6Digits.json",
        alpha2: "SG",
        alpha3: "SGP",
        numeric3: "702"
      },
      SVK: {
        countryName: "Slovakia",
        postalCodeFormat: "5Digits.json",
        alpha2: "SK",
        alpha3: "SVK",
        numeric3: "703"
      },
      SVN: {
        countryName: "Slovenia",
        postalCodeFormat: "4Digits.json",
        alpha2: "SI",
        alpha3: "SVN",
        numeric3: "705"
      },
      SLB: {
        countryName: "Solomon Islands",
        alpha2: "SB",
        alpha3: "SLB",
        numeric3: "90"
      },
      SOM: {
        countryName: "Somalia",
        postalCodeFormat: "SO.json",
        alpha2: "SO",
        alpha3: "SOM",
        numeric3: "706"
      },
      ZAF: {
        countryName: "South Africa",
        postalCodeFormat: "4Digits.json",
        alpha2: "ZA",
        alpha3: "ZAF",
        numeric3: "710"
      },
      SGS: {
        countryName: "South Georgia and the South Sandwich Islands",
        postalCodeFormat: "GS.json",
        alpha2: "GS",
        alpha3: "SGS",
        numeric3: "239"
      },
      SSD: {
        countryName: "South Sudan",
        alpha2: "SS",
        alpha3: "SSD",
        numeric3: "728"
      },
      ESP: {
        countryName: "Spain",
        postalCodeFormat: "5Digits.json",
        alpha2: "ES",
        alpha3: "ESP",
        numeric3: "724"
      },
      LKA: {
        countryName: "Sri Lanka",
        postalCodeFormat: "5Digits.json",
        alpha2: "LK",
        alpha3: "LKA",
        numeric3: "144"
      },
      SDN: {
        countryName: "Sudan",
        postalCodeFormat: "5Digits.json",
        alpha2: "SD",
        alpha3: "SDN",
        numeric3: "736"
      },
      SUR: {
        countryName: "Suriname *",
        alpha2: "SR",
        alpha3: "SUR",
        numeric3: "740"
      },
      SJM: {
        countryName: "Svalbard and Jan Mayen Islands",
        postalCodeFormat: "4Digits.json",
        alpha2: "SJ",
        alpha3: "SJM",
        numeric3: "744"
      },
      SWZ: {
        countryName: "Swaziland",
        postalCodeFormat: "SZ.json",
        alpha2: "SZ",
        alpha3: "SWZ",
        numeric3: "748"
      },
      SWE: {
        countryName: "Sweden",
        postalCodeFormat: "5Digits.json",
        alpha2: "SE",
        alpha3: "SWE",
        numeric3: "752"
      },
      CHE: {
        countryName: "Switzerland",
        postalCodeFormat: "4Digits.json",
        alpha2: "CH",
        alpha3: "CHE",
        numeric3: "756"
      },
      SYR: {
        countryName: "Syrian Arab Republic (Syria)",
        alpha2: "SY",
        alpha3: "SYR",
        numeric3: "760"
      },
      TWN: {
        countryName: "Taiwan, Republic of China",
        postalCodeFormat: "TW.json",
        alpha2: "TW",
        alpha3: "TWN",
        numeric3: "158"
      },
      TJK: {
        countryName: "Tajikistan",
        postalCodeFormat: "6Digits.json",
        alpha2: "TJ",
        alpha3: "TJK",
        numeric3: "762"
      },
      TZA: {
        countryName: "Tanzania *, United Republic of",
        postalCodeFormat: "5Digits.json",
        alpha2: "TZ",
        alpha3: "TZA",
        numeric3: "834"
      },
      THA: {
        countryName: "Thailand",
        postalCodeFormat: "5Digits.json",
        alpha2: "TH",
        alpha3: "THA",
        numeric3: "764"
      },
      TLS: {
        countryName: "Timor-Leste",
        alpha2: "TL",
        alpha3: "TLS",
        numeric3: "626"
      },
      TGO: {
        countryName: "Togo",
        alpha2: "TG",
        alpha3: "TGO",
        numeric3: "768"
      },
      TKL: {
        countryName: "Tokelau",
        alpha2: "TK",
        alpha3: "TKL",
        numeric3: "772"
      },
      TON: {
        countryName: "Tonga",
        alpha2: "TO",
        alpha3: "TON",
        numeric3: "776"
      },
      TTO: {
        countryName: "Trinidad and Tobago",
        postalCodeFormat: "6Digits.json",
        alpha2: "TT",
        alpha3: "TTO",
        numeric3: "780"
      },
      TUN: {
        countryName: "Tunisia",
        postalCodeFormat: "4Digits.json",
        alpha2: "TN",
        alpha3: "TUN",
        numeric3: "788"
      },
      TUR: {
        countryName: "Turkey",
        postalCodeFormat: "5Digits.json",
        alpha2: "TR",
        alpha3: "TUR",
        numeric3: "792"
      },
      TKM: {
        countryName: "Turkmenistan",
        postalCodeFormat: "6Digits.json",
        alpha2: "TM",
        alpha3: "TKM",
        numeric3: "795"
      },
      TCA: {
        countryName: "Turks and Caicos Islands",
        postalCodeFormat: "TC.json",
        alpha2: "TC",
        alpha3: "TCA",
        numeric3: "796"
      },
      TUV: {
        countryName: "Tuvalu",
        alpha2: "TV",
        alpha3: "TUV",
        numeric3: "798"
      },
      UGA: {
        countryName: "Uganda",
        alpha2: "UG",
        alpha3: "UGA",
        numeric3: "800"
      },
      UKR: {
        countryName: "Ukraine",
        postalCodeFormat: "5Digits.json",
        alpha2: "UA",
        alpha3: "UKR",
        numeric3: "804"
      },
      ARE: {
        countryName: "United Arab Emirates",
        alpha2: "AE",
        alpha3: "ARE",
        numeric3: "784"
      },
      GBR: {
        countryName: "United Kingdom",
        postalCodeFormat: "GB.json",
        alpha2: "GB",
        alpha3: "GBR",
        numeric3: "826"
      },
      USA: {
        countryName: "United States of America",
        postalCodeFormat: "US.json",
        alpha2: "US",
        alpha3: "USA",
        numeric3: "840"
      },
      UMI: {
        countryName: "United States Minor Outlying Islands",
        alpha2: "UM",
        alpha3: "UMI",
        numeric3: "581"
      },
      URY: {
        countryName: "Uruguay",
        postalCodeFormat: "5Digits.json",
        alpha2: "UY",
        alpha3: "URY",
        numeric3: "858"
      },
      UZB: {
        countryName: "Uzbekistan",
        postalCodeFormat: "6Digits.json",
        alpha2: "UZ",
        alpha3: "UZB",
        numeric3: "860"
      },
      VUT: {
        countryName: "Vanuatu",
        alpha2: "VU",
        alpha3: "VUT",
        numeric3: "548"
      },
      VEN: {
        countryName: "Venezuela (Bolivarian Republic of)",
        postalCodeFormat: "VE.json",
        alpha2: "VE",
        alpha3: "VEN",
        numeric3: "862"
      },
      VNM: {
        countryName: "Viet Nam",
        postalCodeFormat: "6Digits.json",
        alpha2: "VN",
        alpha3: "VNM",
        numeric3: "704"
      },
      VIR: {
        countryName: "Virgin Islands, US",
        postalCodeFormat: "US.json",
        alpha2: "VI",
        alpha3: "VIR",
        numeric3: "850"
      },
      WLF: {
        countryName: "Wallis and Futuna Islands",
        postalCodeFormat: "WF.json",
        alpha2: "WF",
        alpha3: "WLF",
        numeric3: "876"
      },
      ESH: {
        countryName: "Western Sahara",
        alpha2: "EH",
        alpha3: "ESH",
        numeric3: "732"
      },
      YEM: {
        countryName: "Yemen",
        alpha2: "YE",
        alpha3: "YEM",
        numeric3: "887"
      },
      ZMB: {
        countryName: "Zambia",
        postalCodeFormat: "5Digits.json",
        alpha2: "ZM",
        alpha3: "ZMB",
        numeric3: "894"
      },
      ZWE: {
        countryName: "Zimbabwe",
        alpha2: "ZW",
        alpha3: "ZWE",
        numeric3: "716"
      }
    };
  }
});

// node_modules/detect-node/browser.js
var require_browser = __commonJS({
  "node_modules/detect-node/browser.js"(exports2, module2) {
    module2.exports = false;
  }
});

// node_modules/util/support/isBufferBrowser.js
var require_isBufferBrowser = __commonJS({
  "node_modules/util/support/isBufferBrowser.js"(exports2, module2) {
    module2.exports = function isBuffer(arg) {
      return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports2, module2) {
    if (typeof Object.create === "function") {
      module2.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      module2.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
  }
});

// node_modules/util/util.js
var require_util = __commonJS({
  "node_modules/util/util.js"(exports2) {
    var formatRegExp = /%[sdj%]/g;
    exports2.format = function(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(" ");
      }
      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x2) {
        if (x2 === "%%") return "%";
        if (i >= len) return x2;
        switch (x2) {
          case "%s":
            return String(args[i++]);
          case "%d":
            return Number(args[i++]);
          case "%j":
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return "[Circular]";
            }
          default:
            return x2;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += " " + x;
        } else {
          str += " " + inspect(x);
        }
      }
      return str;
    };
    exports2.deprecate = function(fn, msg) {
      if (isUndefined(global.process)) {
        return function() {
          return exports2.deprecate(fn, msg).apply(this, arguments);
        };
      }
      if (process.noDeprecation === true) {
        return fn;
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process.throwDeprecation) {
            throw new Error(msg);
          } else if (process.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    };
    var debugs = {};
    var debugEnviron;
    exports2.debuglog = function(set) {
      if (isUndefined(debugEnviron))
        debugEnviron = process.env.NODE_DEBUG || "";
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports2.format.apply(exports2, arguments);
            console.error("%s %d: %s", set, pid, msg);
          };
        } else {
          debugs[set] = function() {
          };
        }
      }
      return debugs[set];
    };
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        exports2._extend(ctx, opts);
      }
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports2.inspect = inspect;
    inspect.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      // "name": intentionally not styling
      "regexp": "red"
    };
    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];
      if (style) {
        return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash = {};
      array.forEach(function(val, idx) {
        hash[val] = true;
      });
      return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
      if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
      value.inspect !== exports2.inspect && // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }
      if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
        return formatError(value);
      }
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ": " + value.name : "";
          return ctx.stylize("[Function" + name + "]", "special");
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), "date");
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base = "", array = false, braces = ["{", "}"];
      if (isArray(value)) {
        array = true;
        braces = ["[", "]"];
      }
      if (isFunction(value)) {
        var n = value.name ? ": " + value.name : "";
        base = " [Function" + n + "]";
      }
      if (isRegExp(value)) {
        base = " " + RegExp.prototype.toString.call(value);
      }
      if (isDate(value)) {
        base = " " + Date.prototype.toUTCString.call(value);
      }
      if (isError(value)) {
        base = " " + formatError(value);
      }
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }
      ctx.seen.push(value);
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize("undefined", "undefined");
      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
      }
      if (isNumber(value))
        return ctx.stylize("" + value, "number");
      if (isBoolean(value))
        return ctx.stylize("" + value, "boolean");
      if (isNull(value))
        return ctx.stylize("null", "null");
    }
    function formatError(value) {
      return "[" + Error.prototype.toString.call(value) + "]";
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            String(i),
            true
          ));
        } else {
          output.push("");
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            key,
            true
          ));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str = ctx.stylize("[Setter]", "special");
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = "[" + key + "]";
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf("\n") > -1) {
            if (array) {
              str = str.split("\n").map(function(line) {
                return "  " + line;
              }).join("\n").substr(2);
            } else {
              str = "\n" + str.split("\n").map(function(line) {
                return "   " + line;
              }).join("\n");
            }
          }
        } else {
          str = ctx.stylize("[Circular]", "special");
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify("" + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, "name");
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, "string");
        }
      }
      return name + ": " + str;
    }
    function reduceToSingleString(output, base, braces) {
      var numLinesEst = 0;
      var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf("\n") >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
      }
      return braces[0] + base + " " + output.join(", ") + " " + braces[1];
    }
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports2.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    exports2.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports2.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports2.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === "number";
    }
    exports2.isNumber = isNumber;
    function isString(arg) {
      return typeof arg === "string";
    }
    exports2.isString = isString;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports2.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports2.isUndefined = isUndefined;
    function isRegExp(re) {
      return isObject(re) && objectToString(re) === "[object RegExp]";
    }
    exports2.isRegExp = isRegExp;
    function isObject(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports2.isObject = isObject;
    function isDate(d) {
      return isObject(d) && objectToString(d) === "[object Date]";
    }
    exports2.isDate = isDate;
    function isError(e) {
      return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
    }
    exports2.isError = isError;
    function isFunction(arg) {
      return typeof arg === "function";
    }
    exports2.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
      typeof arg === "undefined";
    }
    exports2.isPrimitive = isPrimitive;
    exports2.isBuffer = require_isBufferBrowser();
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    function pad(n) {
      return n < 10 ? "0" + n.toString(10) : n.toString(10);
    }
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function timestamp() {
      var d = /* @__PURE__ */ new Date();
      var time = [
        pad(d.getHours()),
        pad(d.getMinutes()),
        pad(d.getSeconds())
      ].join(":");
      return [d.getDate(), months[d.getMonth()], time].join(" ");
    }
    exports2.log = function() {
      console.log("%s - %s", timestamp(), exports2.format.apply(exports2, arguments));
    };
    exports2.inherits = require_inherits_browser();
    exports2._extend = function(origin, add) {
      if (!add || !isObject(add)) return origin;
      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    };
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
  }
});

// node_modules/path/path.js
var require_path = __commonJS({
  "node_modules/path/path.js"(exports2, module2) {
    "use strict";
    var isWindows = process.platform === "win32";
    var util = require_util();
    function normalizeArray(parts, allowAboveRoot) {
      var res = [];
      for (var i = 0; i < parts.length; i++) {
        var p = parts[i];
        if (!p || p === ".")
          continue;
        if (p === "..") {
          if (res.length && res[res.length - 1] !== "..") {
            res.pop();
          } else if (allowAboveRoot) {
            res.push("..");
          }
        } else {
          res.push(p);
        }
      }
      return res;
    }
    function trimArray(arr) {
      var lastIndex = arr.length - 1;
      var start = 0;
      for (; start <= lastIndex; start++) {
        if (arr[start])
          break;
      }
      var end = lastIndex;
      for (; end >= 0; end--) {
        if (arr[end])
          break;
      }
      if (start === 0 && end === lastIndex)
        return arr;
      if (start > end)
        return [];
      return arr.slice(start, end + 1);
    }
    var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
    var splitTailRe = /^([\s\S]*?)((?:\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))(?:[\\\/]*)$/;
    var win32 = {};
    function win32SplitPath(filename) {
      var result = splitDeviceRe.exec(filename), device = (result[1] || "") + (result[2] || ""), tail = result[3] || "";
      var result2 = splitTailRe.exec(tail), dir = result2[1], basename = result2[2], ext = result2[3];
      return [device, dir, basename, ext];
    }
    function win32StatPath(path2) {
      var result = splitDeviceRe.exec(path2), device = result[1] || "", isUnc = !!device && device[1] !== ":";
      return {
        device,
        isUnc,
        isAbsolute: isUnc || !!result[2],
        // UNC paths are always absolute
        tail: result[3]
      };
    }
    function normalizeUNCRoot(device) {
      return "\\\\" + device.replace(/^[\\\/]+/, "").replace(/[\\\/]+/g, "\\");
    }
    win32.resolve = function() {
      var resolvedDevice = "", resolvedTail = "", resolvedAbsolute = false;
      for (var i = arguments.length - 1; i >= -1; i--) {
        var path2;
        if (i >= 0) {
          path2 = arguments[i];
        } else if (!resolvedDevice) {
          path2 = process.cwd();
        } else {
          path2 = process.env["=" + resolvedDevice];
          if (!path2 || path2.substr(0, 3).toLowerCase() !== resolvedDevice.toLowerCase() + "\\") {
            path2 = resolvedDevice + "\\";
          }
        }
        if (!util.isString(path2)) {
          throw new TypeError("Arguments to path.resolve must be strings");
        } else if (!path2) {
          continue;
        }
        var result = win32StatPath(path2), device = result.device, isUnc = result.isUnc, isAbsolute = result.isAbsolute, tail = result.tail;
        if (device && resolvedDevice && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
          continue;
        }
        if (!resolvedDevice) {
          resolvedDevice = device;
        }
        if (!resolvedAbsolute) {
          resolvedTail = tail + "\\" + resolvedTail;
          resolvedAbsolute = isAbsolute;
        }
        if (resolvedDevice && resolvedAbsolute) {
          break;
        }
      }
      if (isUnc) {
        resolvedDevice = normalizeUNCRoot(resolvedDevice);
      }
      resolvedTail = normalizeArray(
        resolvedTail.split(/[\\\/]+/),
        !resolvedAbsolute
      ).join("\\");
      return resolvedDevice + (resolvedAbsolute ? "\\" : "") + resolvedTail || ".";
    };
    win32.normalize = function(path2) {
      var result = win32StatPath(path2), device = result.device, isUnc = result.isUnc, isAbsolute = result.isAbsolute, tail = result.tail, trailingSlash = /[\\\/]$/.test(tail);
      tail = normalizeArray(tail.split(/[\\\/]+/), !isAbsolute).join("\\");
      if (!tail && !isAbsolute) {
        tail = ".";
      }
      if (tail && trailingSlash) {
        tail += "\\";
      }
      if (isUnc) {
        device = normalizeUNCRoot(device);
      }
      return device + (isAbsolute ? "\\" : "") + tail;
    };
    win32.isAbsolute = function(path2) {
      return win32StatPath(path2).isAbsolute;
    };
    win32.join = function() {
      var paths = [];
      for (var i = 0; i < arguments.length; i++) {
        var arg = arguments[i];
        if (!util.isString(arg)) {
          throw new TypeError("Arguments to path.join must be strings");
        }
        if (arg) {
          paths.push(arg);
        }
      }
      var joined = paths.join("\\");
      if (!/^[\\\/]{2}[^\\\/]/.test(paths[0])) {
        joined = joined.replace(/^[\\\/]{2,}/, "\\");
      }
      return win32.normalize(joined);
    };
    win32.relative = function(from, to) {
      from = win32.resolve(from);
      to = win32.resolve(to);
      var lowerFrom = from.toLowerCase();
      var lowerTo = to.toLowerCase();
      var toParts = trimArray(to.split("\\"));
      var lowerFromParts = trimArray(lowerFrom.split("\\"));
      var lowerToParts = trimArray(lowerTo.split("\\"));
      var length = Math.min(lowerFromParts.length, lowerToParts.length);
      var samePartsLength = length;
      for (var i = 0; i < length; i++) {
        if (lowerFromParts[i] !== lowerToParts[i]) {
          samePartsLength = i;
          break;
        }
      }
      if (samePartsLength == 0) {
        return to;
      }
      var outputParts = [];
      for (var i = samePartsLength; i < lowerFromParts.length; i++) {
        outputParts.push("..");
      }
      outputParts = outputParts.concat(toParts.slice(samePartsLength));
      return outputParts.join("\\");
    };
    win32._makeLong = function(path2) {
      if (!util.isString(path2))
        return path2;
      if (!path2) {
        return "";
      }
      var resolvedPath = win32.resolve(path2);
      if (/^[a-zA-Z]\:\\/.test(resolvedPath)) {
        return "\\\\?\\" + resolvedPath;
      } else if (/^\\\\[^?.]/.test(resolvedPath)) {
        return "\\\\?\\UNC\\" + resolvedPath.substring(2);
      }
      return path2;
    };
    win32.dirname = function(path2) {
      var result = win32SplitPath(path2), root = result[0], dir = result[1];
      if (!root && !dir) {
        return ".";
      }
      if (dir) {
        dir = dir.substr(0, dir.length - 1);
      }
      return root + dir;
    };
    win32.basename = function(path2, ext) {
      var f = win32SplitPath(path2)[2];
      if (ext && f.substr(-1 * ext.length) === ext) {
        f = f.substr(0, f.length - ext.length);
      }
      return f;
    };
    win32.extname = function(path2) {
      return win32SplitPath(path2)[3];
    };
    win32.format = function(pathObject) {
      if (!util.isObject(pathObject)) {
        throw new TypeError(
          "Parameter 'pathObject' must be an object, not " + typeof pathObject
        );
      }
      var root = pathObject.root || "";
      if (!util.isString(root)) {
        throw new TypeError(
          "'pathObject.root' must be a string or undefined, not " + typeof pathObject.root
        );
      }
      var dir = pathObject.dir;
      var base = pathObject.base || "";
      if (!dir) {
        return base;
      }
      if (dir[dir.length - 1] === win32.sep) {
        return dir + base;
      }
      return dir + win32.sep + base;
    };
    win32.parse = function(pathString) {
      if (!util.isString(pathString)) {
        throw new TypeError(
          "Parameter 'pathString' must be a string, not " + typeof pathString
        );
      }
      var allParts = win32SplitPath(pathString);
      if (!allParts || allParts.length !== 4) {
        throw new TypeError("Invalid path '" + pathString + "'");
      }
      return {
        root: allParts[0],
        dir: allParts[0] + allParts[1].slice(0, -1),
        base: allParts[2],
        ext: allParts[3],
        name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
      };
    };
    win32.sep = "\\";
    win32.delimiter = ";";
    var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
    var posix = {};
    function posixSplitPath(filename) {
      return splitPathRe.exec(filename).slice(1);
    }
    posix.resolve = function() {
      var resolvedPath = "", resolvedAbsolute = false;
      for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
        var path2 = i >= 0 ? arguments[i] : process.cwd();
        if (!util.isString(path2)) {
          throw new TypeError("Arguments to path.resolve must be strings");
        } else if (!path2) {
          continue;
        }
        resolvedPath = path2 + "/" + resolvedPath;
        resolvedAbsolute = path2[0] === "/";
      }
      resolvedPath = normalizeArray(
        resolvedPath.split("/"),
        !resolvedAbsolute
      ).join("/");
      return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
    };
    posix.normalize = function(path2) {
      var isAbsolute = posix.isAbsolute(path2), trailingSlash = path2 && path2[path2.length - 1] === "/";
      path2 = normalizeArray(path2.split("/"), !isAbsolute).join("/");
      if (!path2 && !isAbsolute) {
        path2 = ".";
      }
      if (path2 && trailingSlash) {
        path2 += "/";
      }
      return (isAbsolute ? "/" : "") + path2;
    };
    posix.isAbsolute = function(path2) {
      return path2.charAt(0) === "/";
    };
    posix.join = function() {
      var path2 = "";
      for (var i = 0; i < arguments.length; i++) {
        var segment = arguments[i];
        if (!util.isString(segment)) {
          throw new TypeError("Arguments to path.join must be strings");
        }
        if (segment) {
          if (!path2) {
            path2 += segment;
          } else {
            path2 += "/" + segment;
          }
        }
      }
      return posix.normalize(path2);
    };
    posix.relative = function(from, to) {
      from = posix.resolve(from).substr(1);
      to = posix.resolve(to).substr(1);
      var fromParts = trimArray(from.split("/"));
      var toParts = trimArray(to.split("/"));
      var length = Math.min(fromParts.length, toParts.length);
      var samePartsLength = length;
      for (var i = 0; i < length; i++) {
        if (fromParts[i] !== toParts[i]) {
          samePartsLength = i;
          break;
        }
      }
      var outputParts = [];
      for (var i = samePartsLength; i < fromParts.length; i++) {
        outputParts.push("..");
      }
      outputParts = outputParts.concat(toParts.slice(samePartsLength));
      return outputParts.join("/");
    };
    posix._makeLong = function(path2) {
      return path2;
    };
    posix.dirname = function(path2) {
      var result = posixSplitPath(path2), root = result[0], dir = result[1];
      if (!root && !dir) {
        return ".";
      }
      if (dir) {
        dir = dir.substr(0, dir.length - 1);
      }
      return root + dir;
    };
    posix.basename = function(path2, ext) {
      var f = posixSplitPath(path2)[2];
      if (ext && f.substr(-1 * ext.length) === ext) {
        f = f.substr(0, f.length - ext.length);
      }
      return f;
    };
    posix.extname = function(path2) {
      return posixSplitPath(path2)[3];
    };
    posix.format = function(pathObject) {
      if (!util.isObject(pathObject)) {
        throw new TypeError(
          "Parameter 'pathObject' must be an object, not " + typeof pathObject
        );
      }
      var root = pathObject.root || "";
      if (!util.isString(root)) {
        throw new TypeError(
          "'pathObject.root' must be a string or undefined, not " + typeof pathObject.root
        );
      }
      var dir = pathObject.dir ? pathObject.dir + posix.sep : "";
      var base = pathObject.base || "";
      return dir + base;
    };
    posix.parse = function(pathString) {
      if (!util.isString(pathString)) {
        throw new TypeError(
          "Parameter 'pathString' must be a string, not " + typeof pathString
        );
      }
      var allParts = posixSplitPath(pathString);
      if (!allParts || allParts.length !== 4) {
        throw new TypeError("Invalid path '" + pathString + "'");
      }
      allParts[1] = allParts[1] || "";
      allParts[2] = allParts[2] || "";
      allParts[3] = allParts[3] || "";
      return {
        root: allParts[0],
        dir: allParts[0] + allParts[1].slice(0, -1),
        base: allParts[2],
        ext: allParts[3],
        name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
      };
    };
    posix.sep = "/";
    posix.delimiter = ":";
    if (isWindows)
      module2.exports = win32;
    else
      module2.exports = posix;
    module2.exports.posix = posix;
    module2.exports.win32 = win32;
  }
});

// node_modules/postal-codes-js/formats-node.js
var require_formats_node = __commonJS({
  "node_modules/postal-codes-js/formats-node.js"(exports, module) {
    "use strict";
    var path = require_path();
    module.exports = function getFormat(postalCodeFormat) {
      return eval("require")(path.join(__dirname, "formats", postalCodeFormat));
    };
  }
});

// node_modules/postal-codes-js/formats/10Digits.json
var require_Digits = __commonJS({
  "node_modules/postal-codes-js/formats/10Digits.json"(exports2, module2) {
    module2.exports = {
      Description: "10-Digits - NNNNNNNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^[0-9]{10}$",
      TestData: {
        Valid: [
          "1234567890",
          "5678567833"
        ],
        Invalid: [
          "12334545698",
          "123s33s12",
          "123456789"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/2Digits.json
var require_Digits2 = __commonJS({
  "node_modules/postal-codes-js/formats/2Digits.json"(exports2, module2) {
    module2.exports = {
      Description: "2-Digits - NN",
      RedundantCharacters: " -",
      ValidationRegex: "^[0-9]{2}$",
      TestData: {
        Valid: [
          "12",
          "56"
        ],
        Invalid: [
          "012",
          "1s",
          "1",
          "x3"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/3Digits.json
var require_Digits3 = __commonJS({
  "node_modules/postal-codes-js/formats/3Digits.json"(exports2, module2) {
    module2.exports = {
      Description: "3-Digits - NNN",
      RedundantCharacters: " -",
      ValidationRegex: "^[0-9]{3}$",
      TestData: {
        Valid: [
          "123",
          "567"
        ],
        Invalid: [
          "1234",
          "13s",
          "1x3"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/4Digits.json
var require_Digits4 = __commonJS({
  "node_modules/postal-codes-js/formats/4Digits.json"(exports2, module2) {
    module2.exports = {
      Description: "4-Digits - NNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^[0-9]{4}$",
      TestData: {
        Valid: [
          "1234",
          "5678"
        ],
        Invalid: [
          "12345",
          "123s",
          "12x3"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/5Digits.json
var require_Digits5 = __commonJS({
  "node_modules/postal-codes-js/formats/5Digits.json"(exports2, module2) {
    module2.exports = {
      Description: "5-Digits - NNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^[0-9]{5}$",
      TestData: {
        Valid: [
          "12345",
          "56785"
        ],
        Invalid: [
          "123456",
          "1233s",
          "123x3"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/6Digits.json
var require_Digits6 = __commonJS({
  "node_modules/postal-codes-js/formats/6Digits.json"(exports2, module2) {
    module2.exports = {
      Description: "6-Digits - NNNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^[0-9]{6}$",
      TestData: {
        Valid: [
          "123456",
          "567856"
        ],
        Invalid: [
          "1233456",
          "123s3s",
          "1s23x3"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/7Digits.json
var require_Digits7 = __commonJS({
  "node_modules/postal-codes-js/formats/7Digits.json"(exports2, module2) {
    module2.exports = {
      Description: "7-Digits - NNNNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^[0-9]{7}$",
      TestData: {
        Valid: [
          "1234567",
          "5678567"
        ],
        Invalid: [
          "123345456",
          "123s33s",
          "1s23x3"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/8Digits.json
var require_Digits8 = __commonJS({
  "node_modules/postal-codes-js/formats/8Digits.json"(exports2, module2) {
    module2.exports = {
      Description: "8-Digits - NNNNNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^[0-9]{8}$",
      TestData: {
        Valid: [
          "12345678",
          "56785678"
        ],
        Invalid: [
          "123345456",
          "123s33s",
          "1s23x3"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/AD.json
var require_AD = __commonJS({
  "node_modules/postal-codes-js/formats/AD.json"(exports2, module2) {
    module2.exports = {
      Description: "AD : CCNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^AD[0-9]{3}$",
      TestData: {
        Valid: [
          "AD123",
          "AD001"
        ],
        Invalid: [
          "A1234",
          "AD12",
          "AD1234"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/AI.json
var require_AI = __commonJS({
  "node_modules/postal-codes-js/formats/AI.json"(exports2, module2) {
    module2.exports = {
      Description: "AI : CC2640",
      RedundantCharacters: " -",
      ValidationRegex: "^AI2640$",
      TestData: {
        Valid: [
          "AI2640",
          "AI-2640"
        ],
        Invalid: [
          "A2640",
          "AI02640",
          "AI-02640"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/AQ.json
var require_AQ = __commonJS({
  "node_modules/postal-codes-js/formats/AQ.json"(exports2, module2) {
    module2.exports = {
      Description: "AQ : BIQQ 1ZZ",
      RedundantCharacters: " -",
      ValidationRegex: "^BIQQ1ZZ$",
      TestData: {
        Valid: [
          "BIQQ 1ZZ",
          "BIQQ1ZZ"
        ],
        Invalid: [
          "BIQQ1Z",
          "BIQQ01ZZ"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/AX.json
var require_AX = __commonJS({
  "node_modules/postal-codes-js/formats/AX.json"(exports2, module2) {
    module2.exports = {
      Description: "AX : NNNNN, CC-NNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^(AX)?[0-9]{5}$",
      TestData: {
        Valid: [
          "12345",
          "AX-12345",
          "AX12345"
        ],
        Invalid: [
          "AX123",
          "A1234",
          "AX-1234"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/AZ.json
var require_AZ = __commonJS({
  "node_modules/postal-codes-js/formats/AZ.json"(exports2, module2) {
    module2.exports = {
      Description: "AZ : CCNNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^AZ[0-9]{4}$",
      TestData: {
        Valid: [
          "AZ1234",
          "AZ-1234"
        ],
        Invalid: [
          "AZ123",
          "A1234",
          "AZ-12345"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/BB.json
var require_BB = __commonJS({
  "node_modules/postal-codes-js/formats/BB.json"(exports2, module2) {
    module2.exports = {
      Description: "BB : CCNNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^(BB)?[0-9]{5}$",
      TestData: {
        Valid: [
          "BB12345",
          "12345"
        ],
        Invalid: [
          "x1231s",
          "1231sd"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/BH.json
var require_BH = __commonJS({
  "node_modules/postal-codes-js/formats/BH.json"(exports2, module2) {
    module2.exports = {
      Description: "BH : NNN, NNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^[0-9]{3,4}$",
      TestData: {
        Valid: [
          "123",
          "1234"
        ],
        Invalid: [
          "12",
          "12345"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/BL.json
var require_BL = __commonJS({
  "node_modules/postal-codes-js/formats/BL.json"(exports2, module2) {
    module2.exports = {
      Description: "BL : 97133",
      RedundantCharacters: " -",
      ValidationRegex: "^97133$",
      TestData: {
        Valid: [
          "97133"
        ],
        Invalid: [
          "971330",
          "9713"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/BN.json
var require_BN = __commonJS({
  "node_modules/postal-codes-js/formats/BN.json"(exports2, module2) {
    module2.exports = {
      Description: "BN : LLNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^[a-zA-Z]{2}[0-9]{4}$",
      TestData: {
        Valid: [
          "AB1234",
          "tK0987"
        ],
        Invalid: [
          "abc123",
          "a12345",
          "at123",
          "BH12345"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/CA.json
var require_CA = __commonJS({
  "node_modules/postal-codes-js/formats/CA.json"(exports2, module2) {
    module2.exports = {
      Description: "CA : A0A 0A0",
      RedundantCharacters: " -",
      ValidationRegex: "^[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJ-NPRSTV-Z][\\s\\-]?\\d[ABCEGHJ-NPRSTV-Z]\\d$",
      TestData: {
        Valid: [
          "A4B5X5",
          "A4B5A5"
        ],
        Invalid: [
          "123AAA",
          "12A5AA"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/DK.json
var require_DK = __commonJS({
  "node_modules/postal-codes-js/formats/DK.json"(exports2, module2) {
    module2.exports = {
      Description: "DK",
      RedundantCharacters: " -",
      ValidationRegex: "^(DK){0,1}\\d{4}$",
      TestData: {
        Valid: [
          "1124",
          "DK1054",
          "DK-1120",
          "DK1120",
          "DK 1125",
          "DK - 1234",
          "dk-1123"
        ],
        Invalid: [
          "1125DK",
          "DK12345",
          "DK123",
          "123",
          ""
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/FK.json
var require_FK = __commonJS({
  "node_modules/postal-codes-js/formats/FK.json"(exports2, module2) {
    module2.exports = {
      Description: "FK : FIQQ 1ZZ",
      RedundantCharacters: " -",
      ValidationRegex: "^FIQQ1ZZ$",
      TestData: {
        Valid: [
          "FIQQ 1ZZ",
          "FIQQ1ZZ"
        ],
        Invalid: [
          "FIQQ01ZZ",
          "FIQQ1ZZZ"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/GB.json
var require_GB = __commonJS({
  "node_modules/postal-codes-js/formats/GB.json"(exports2, module2) {
    module2.exports = {
      Description: "GB",
      RedundantCharacters: " -",
      ValidationRegex: "((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([AZa-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9]?[A-Za-z]))))[0-9][A-Za-z]{2})|GIR0AA",
      "ValidationRegex.DOC": "https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/488478/Bulk_Data_Transfer_-_additional_validation_valid_from_12_November_2015.pdf",
      TestData: {
        Valid: [
          "CW3 9SS",
          "SE5 0EG",
          "SE50EG",
          "WC2H 7LT",
          "se5 0eg",
          "Z29ZZ",
          "Z699ZZ",
          "ZX99ZZ",
          "ZC999ZZ",
          "EC1A 1BB",
          "W1A 0AX",
          "M1 1AE",
          "B33 8TH",
          "CR2 6XH",
          "DN55 1PT",
          "GIR 0AA",
          "W1U 1BW",
          "SK8 7NA"
        ],
        Invalid: [
          "WC2H 7LTa",
          "WC2H"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/GF.json
var require_GF = __commonJS({
  "node_modules/postal-codes-js/formats/GF.json"(exports2, module2) {
    module2.exports = {
      Description: "GF : 973NN",
      RedundantCharacters: " -",
      ValidationRegex: "^973[0-9]{2}$",
      TestData: {
        Valid: [
          "97300",
          "97390"
        ],
        Invalid: [
          "9732",
          "973999",
          "97290",
          "097390"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/GG.json
var require_GG = __commonJS({
  "node_modules/postal-codes-js/formats/GG.json"(exports2, module2) {
    module2.exports = {
      Description: "GG",
      RedundantCharacters: " -",
      ValidationRegex: "^GY[0-9]{2,3}[A-Za-z]{2}$",
      TestData: {
        Valid: [
          "GY1 1AA",
          "GY111AA"
        ],
        Invalid: [
          "CW3 9SS",
          "GG1 1AA",
          "SE5 0EG",
          "SE50EG",
          "WC2H 7LTa",
          "WC2H"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/GI.json
var require_GI = __commonJS({
  "node_modules/postal-codes-js/formats/GI.json"(exports2, module2) {
    module2.exports = {
      Description: "GI : GX11 1AA",
      RedundantCharacters: " -",
      ValidationRegex: "^GX111AA$",
      TestData: {
        Valid: [
          "GX111AA",
          "GX11 1AA"
        ],
        Invalid: [
          "GX1101AA",
          "GX111AAA"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/GP.json
var require_GP = __commonJS({
  "node_modules/postal-codes-js/formats/GP.json"(exports2, module2) {
    module2.exports = {
      Description: "GP : 971NN",
      RedundantCharacters: " -",
      ValidationRegex: "^971[0-9]{2}$",
      TestData: {
        Valid: [
          "97100",
          "97190"
        ],
        Invalid: [
          "9712",
          "971999",
          "97290",
          "097190"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/GS.json
var require_GS = __commonJS({
  "node_modules/postal-codes-js/formats/GS.json"(exports2, module2) {
    module2.exports = {
      Description: "GS : SIQQ 1ZZ",
      RedundantCharacters: " -",
      ValidationRegex: "^SIQQ1ZZ$",
      TestData: {
        Valid: [
          "SIQQ 1ZZ",
          "SIqq 1zz",
          "SIQQ1ZZ"
        ],
        Invalid: [
          "SIQQ01ZZ",
          "SIQQ1ZZZ"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/HN.json
var require_HN = __commonJS({
  "node_modules/postal-codes-js/formats/HN.json"(exports2, module2) {
    module2.exports = {
      Description: "HN : CCNNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^(HN)?[0-9]{5}$",
      TestData: {
        Valid: [
          "HN12345",
          "12345"
        ],
        Invalid: [
          "123456",
          "HN123456",
          "HN1234"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/IE.json
var require_IE = __commonJS({
  "node_modules/postal-codes-js/formats/IE.json"(exports2, module2) {
    module2.exports = {
      Description: "IE",
      RedundantCharacters: "",
      ValidationRegex: "^[AaC-Fc-fHhKkNnPpRrTtV-Yv-y]\\d[0-9Ww][ -]?[0-9AaC-Fc-fHhKkNnPpRrTtV-Yv-y]{4}$",
      "ValidationRegex.DOC": "https://www.eircode.ie/docs/default-source/Common/prepareyourbusinessforeircode-edition3published.pdf?sfvrsn=2",
      TestData: {
        Valid: [
          "D6W1234",
          "A23 0984",
          "D00-AV92",
          "y631fhk",
          "a00 0000",
          "d44-n4x4",
          "A65F4E2"
        ],
        Invalid: ["D6Z1234", "y63  1fhk"]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/IM.json
var require_IM = __commonJS({
  "node_modules/postal-codes-js/formats/IM.json"(exports2, module2) {
    module2.exports = {
      Description: "IM",
      RedundantCharacters: " -",
      ValidationRegex: "^IM[0-9]{2,3}[A-Za-z]{2}$",
      TestData: {
        Valid: [
          "IM1 1AA",
          "IM111AA"
        ],
        Invalid: [
          "CW3 9SS",
          "SE5 0EG",
          "SE50EG",
          "WC2H 7LTa",
          "WC2H"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/IO.json
var require_IO = __commonJS({
  "node_modules/postal-codes-js/formats/IO.json"(exports2, module2) {
    module2.exports = {
      Description: "IO : BBND 1ZZ",
      RedundantCharacters: " -",
      ValidationRegex: "^BBND1ZZ$",
      TestData: {
        Valid: [
          "BBND 1ZZ",
          "BBND1ZZ"
        ],
        Invalid: [
          "BBND01ZZ",
          "BBND1ZZZ"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/JE.json
var require_JE = __commonJS({
  "node_modules/postal-codes-js/formats/JE.json"(exports2, module2) {
    module2.exports = {
      Description: "JE",
      RedundantCharacters: " -",
      ValidationRegex: "^JE[0-9]{2,3}[A-Za-z]{2}$",
      TestData: {
        Valid: [
          "JE1 1AA",
          "JE111AA"
        ],
        Invalid: [
          "CW3 9SS",
          "SE5 0EG",
          "SE50EG",
          "WC2H 7LTa",
          "WC2H"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/KY.json
var require_KY = __commonJS({
  "node_modules/postal-codes-js/formats/KY.json"(exports2, module2) {
    module2.exports = {
      Description: "KY : CCN-NNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^KY[0-9]{5}$",
      TestData: {
        Valid: [
          "KY1-1234",
          "KY12345"
        ],
        Invalid: [
          "KY1234",
          "KY123456",
          "K1-1234"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/LB.json
var require_LB = __commonJS({
  "node_modules/postal-codes-js/formats/LB.json"(exports2, module2) {
    module2.exports = {
      Description: "LB : NNNNN, NNNN NNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^[0-9]{4}(?:[0-9]{4})?$",
      TestData: {
        Valid: [
          "1234",
          "1234 1234",
          "12341234"
        ],
        Invalid: [
          "123",
          "1234567",
          "123456789"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/LC.json
var require_LC = __commonJS({
  "node_modules/postal-codes-js/formats/LC.json"(exports2, module2) {
    module2.exports = {
      Description: "LC : CCNN NNN",
      RedundantCharacters: " -",
      ValidationRegex: "^LC[0-9]{5}$",
      TestData: {
        Valid: [
          "LC12 345",
          "LC12345"
        ],
        Invalid: [
          "12345",
          "x1231s",
          "1231sd"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/LT.json
var require_LT = __commonJS({
  "node_modules/postal-codes-js/formats/LT.json"(exports2, module2) {
    module2.exports = {
      Description: "LT : LT-NNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^(LT)?[0-9]{5}$",
      TestData: {
        Valid: [
          "12345",
          "LT12345",
          "LT-12345"
        ],
        Invalid: [
          "1234",
          "123456",
          "LT-1234"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/LU.json
var require_LU = __commonJS({
  "node_modules/postal-codes-js/formats/LU.json"(exports2, module2) {
    module2.exports = {
      Description: "LU",
      RedundantCharacters: " -",
      ValidationRegex: "^(L){0,1}\\d{4}$",
      TestData: {
        Valid: [
          "1124",
          "L1054",
          "L-1120",
          "L1120",
          "L 1125",
          "L - 1234",
          "l-1123"
        ],
        Invalid: [
          "1125L",
          "L12345",
          "L123",
          "123",
          ""
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/LV.json
var require_LV = __commonJS({
  "node_modules/postal-codes-js/formats/LV.json"(exports2, module2) {
    module2.exports = {
      Description: "LV : NNNNN, CC-NNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^(LV)?[0-9]{4}$",
      TestData: {
        Valid: [
          "1234",
          "LV-1234",
          "LV1234"
        ],
        Invalid: [
          "LV123",
          "L1234",
          "LV-12345"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/MC.json
var require_MC = __commonJS({
  "node_modules/postal-codes-js/formats/MC.json"(exports2, module2) {
    module2.exports = {
      Description: "MC : 980NN",
      RedundantCharacters: " -",
      ValidationRegex: "^980[0-9]{2}$",
      TestData: {
        Valid: [
          "98000",
          "98099"
        ],
        Invalid: [
          "98100",
          "97099"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/MD.json
var require_MD = __commonJS({
  "node_modules/postal-codes-js/formats/MD.json"(exports2, module2) {
    module2.exports = {
      Description: "MD : CCNNNN, CC-NNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^(MD)?[0-9]{4}$",
      TestData: {
        Valid: [
          "1234",
          "MD1234",
          "MD-1234"
        ],
        Invalid: [
          "MD123",
          "M1234",
          "MD-12345"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/MF.json
var require_MF = __commonJS({
  "node_modules/postal-codes-js/formats/MF.json"(exports2, module2) {
    module2.exports = {
      Description: "MF : 97150",
      RedundantCharacters: " -",
      ValidationRegex: "^97150$",
      TestData: {
        Valid: [
          "97150"
        ],
        Invalid: [
          "971500",
          "9715"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/MS.json
var require_MS = __commonJS({
  "node_modules/postal-codes-js/formats/MS.json"(exports2, module2) {
    module2.exports = {
      Description: "MS : MSR NNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^(MSR)?[0-9]{4}$",
      TestData: {
        Valid: [
          "MSR 1110",
          "MSR 1350",
          "1350"
        ],
        Invalid: [
          "MS1110",
          "MSR01350",
          "12345"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/MT.json
var require_MT = __commonJS({
  "node_modules/postal-codes-js/formats/MT.json"(exports2, module2) {
    module2.exports = {
      Description: "MA : LLL NNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^[A-Z]{3}[0-9]{4}$",
      TestData: {
        Valid: [
          "abc1234",
          "ABC1234",
          "SHD4783"
        ],
        Invalid: [
          "ABCABC",
          "123ABCD"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/NC.json
var require_NC = __commonJS({
  "node_modules/postal-codes-js/formats/NC.json"(exports2, module2) {
    module2.exports = {
      Description: "NC : 988NN",
      RedundantCharacters: " -",
      ValidationRegex: "^988[0-9]{2}$",
      TestData: {
        Valid: [
          "98800",
          "98890"
        ],
        Invalid: [
          "9882",
          "988999",
          "98990",
          "098890"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/NL.json
var require_NL = __commonJS({
  "node_modules/postal-codes-js/formats/NL.json"(exports2, module2) {
    module2.exports = {
      Description: "NL : NNNN LL",
      RedundantCharacters: " -",
      ValidationRegex: "^[1-9][0-9]{3}(?!SA|SD|SS)[A-Z]{2}$",
      TestData: {
        Valid: [
          "1235DF",
          "5983DH",
          "1000 AP"
        ],
        Invalid: [
          "1235D",
          "12j4h",
          "k3j51l",
          "1945SS"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/PF.json
var require_PF = __commonJS({
  "node_modules/postal-codes-js/formats/PF.json"(exports2, module2) {
    module2.exports = {
      Description: "PF : 987NN",
      RedundantCharacters: " -",
      ValidationRegex: "^987[0-9]{2}$",
      TestData: {
        Valid: [
          "98700",
          "98790"
        ],
        Invalid: [
          "9872",
          "987999",
          "98690",
          "098790"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/PL.json
var require_PL = __commonJS({
  "node_modules/postal-codes-js/formats/PL.json"(exports2, module2) {
    module2.exports = {
      Description: "PL : 99-999",
      RedundantCharacters: " ",
      ValidationRegex: "^[0-9]{2}-[0-9]{3}$",
      TestData: {
        Valid: [
          "44-100 ",
          "44-100"
        ],
        Invalid: [
          "44100",
          "44f00",
          "e4410",
          "44-100d",
          "c44-100",
          "b44100",
          "44100a"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/PM.json
var require_PM = __commonJS({
  "node_modules/postal-codes-js/formats/PM.json"(exports2, module2) {
    module2.exports = {
      Description: "PM : 97500",
      RedundantCharacters: " -",
      ValidationRegex: "^97500$",
      TestData: {
        Valid: [
          "97500"
        ],
        Invalid: [
          "975000",
          "9750"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/PN.json
var require_PN = __commonJS({
  "node_modules/postal-codes-js/formats/PN.json"(exports2, module2) {
    module2.exports = {
      Description: "PN : PCRN 1ZZ",
      RedundantCharacters: " -",
      ValidationRegex: "^PCRN1ZZ$",
      TestData: {
        Valid: [
          "PCRN 1ZZ",
          "PCRN1ZZ"
        ],
        Invalid: [
          "PCRN01ZZ",
          "PCRN1ZZZ"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/PT.json
var require_PT = __commonJS({
  "node_modules/postal-codes-js/formats/PT.json"(exports2, module2) {
    module2.exports = {
      Description: "PT : NNNN-NNN",
      RedundantCharacters: " ",
      ValidationRegex: "^[0-9]{4}-[0-9]{3}$",
      TestData: {
        Valid: [
          "1234-123"
        ],
        Invalid: [
          "1255",
          "1234567",
          "1234 123",
          "x1231s",
          "1231sd",
          "1010101010",
          "1234 12"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/RE.json
var require_RE = __commonJS({
  "node_modules/postal-codes-js/formats/RE.json"(exports2, module2) {
    module2.exports = {
      Description: "RE : 974NN",
      RedundantCharacters: " -",
      ValidationRegex: "^974[0-9]{2}$",
      TestData: {
        Valid: [
          "97400",
          "97490"
        ],
        Invalid: [
          "9742",
          "974999",
          "97390",
          "097490"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/RU.json
var require_RU = __commonJS({
  "node_modules/postal-codes-js/formats/RU.json"(exports2, module2) {
    module2.exports = {
      Description: "RU : NNN[-NNN]",
      RedundantCharacters: " -",
      ValidationRegex: "^[0-9]{3}([0-9]{3})?$",
      TestData: {
        Valid: [
          "125",
          "123456"
        ],
        Invalid: [
          "x1231s",
          "1231sd",
          "1010101010"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/SH.json
var require_SH = __commonJS({
  "node_modules/postal-codes-js/formats/SH.json"(exports2, module2) {
    module2.exports = {
      Description: "SH : STHL 1ZZ",
      RedundantCharacters: " -",
      ValidationRegex: "^STHL1ZZ$",
      TestData: {
        Valid: [
          "STHL 1ZZ",
          "STHL1ZZ"
        ],
        Invalid: [
          "STHL01ZZ",
          "STHL1ZZZ"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/SM.json
var require_SM = __commonJS({
  "node_modules/postal-codes-js/formats/SM.json"(exports2, module2) {
    module2.exports = {
      Description: "SM : 4789N",
      RedundantCharacters: " -",
      ValidationRegex: "^4789[0-9]{1}$",
      TestData: {
        Valid: [
          "47890",
          "47899"
        ],
        Invalid: [
          "4789",
          "478900",
          "47889"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/SO.json
var require_SO = __commonJS({
  "node_modules/postal-codes-js/formats/SO.json"(exports2, module2) {
    module2.exports = {
      Description: "SO : AA NNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^[a-zA-Z]{2}[0-9]{5}$",
      TestData: {
        Valid: [
          "AW12345",
          "BN47899"
        ],
        Invalid: [
          "12345",
          "A12345",
          "SL123456"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/SZ.json
var require_SZ = __commonJS({
  "node_modules/postal-codes-js/formats/SZ.json"(exports2, module2) {
    module2.exports = {
      Description: "SZ : ANNN",
      RedundantCharacters: " -",
      ValidationRegex: "^[a-zA-Z]{1}[0-9]{3}$",
      TestData: {
        Valid: [
          "S123",
          "a789"
        ],
        Invalid: [
          "F1234",
          "D12"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/TC.json
var require_TC = __commonJS({
  "node_modules/postal-codes-js/formats/TC.json"(exports2, module2) {
    module2.exports = {
      Description: "TC : TKCA 1ZZ",
      RedundantCharacters: " -",
      ValidationRegex: "^TKCA1ZZ$",
      TestData: {
        Valid: [
          "TKCA1ZZ",
          "TKCA 1ZZ"
        ],
        Invalid: [
          "TKCA01ZZ",
          "TKCA1ZZZ"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/TW.json
var require_TW = __commonJS({
  "node_modules/postal-codes-js/formats/TW.json"(exports2, module2) {
    module2.exports = {
      Description: "TW : NNN[-NN]",
      RedundantCharacters: " -",
      ValidationRegex: "^[0-9]{3}([0-9]{2})?$",
      TestData: {
        Valid: [
          "123",
          "123-45",
          "12345"
        ],
        Invalid: [
          "12",
          "1234",
          "101010"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/US.json
var require_US = __commonJS({
  "node_modules/postal-codes-js/formats/US.json"(exports2, module2) {
    module2.exports = {
      Description: "US : NNNNN[-NNNN]",
      RedundantCharacters: " -",
      ValidationRegex: "^[0-9]{5}([0-9]{4})?$",
      TestData: {
        Valid: [
          "12345",
          "12345-7689"
        ],
        Invalid: [
          "x1231s",
          "1231sd",
          "1010101010"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/VA.json
var require_VA = __commonJS({
  "node_modules/postal-codes-js/formats/VA.json"(exports2, module2) {
    module2.exports = {
      Description: "VA : 00120",
      RedundantCharacters: " -",
      ValidationRegex: "^00120$",
      TestData: {
        Valid: [
          "00120"
        ],
        Invalid: [
          "0012",
          "001200"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/VC.json
var require_VC = __commonJS({
  "node_modules/postal-codes-js/formats/VC.json"(exports2, module2) {
    module2.exports = {
      Description: "VC : CCNNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^(VC)?[0-9]{4}$",
      TestData: {
        Valid: [
          "1234",
          "VC1234",
          "VC-1234"
        ],
        Invalid: [
          "VC123",
          "V1234",
          "VC-12345"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/VE.json
var require_VE = __commonJS({
  "node_modules/postal-codes-js/formats/VE.json"(exports2, module2) {
    module2.exports = {
      Description: "VE : NNNN, NNNN-A",
      RedundantCharacters: " -",
      ValidationRegex: "^[0-9]{4}[a-zA-Z]?$",
      TestData: {
        Valid: [
          "1234",
          "1234-A"
        ],
        Invalid: [
          "123",
          "1234AA"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/VG.json
var require_VG = __commonJS({
  "node_modules/postal-codes-js/formats/VG.json"(exports2, module2) {
    module2.exports = {
      Description: "VG : CCNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^(VG)?[0-9]{4}$",
      TestData: {
        Valid: [
          "1234",
          "VG1234",
          "VG-1234"
        ],
        Invalid: [
          "VG123",
          "V1234",
          "VG-12345"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/WF.json
var require_WF = __commonJS({
  "node_modules/postal-codes-js/formats/WF.json"(exports2, module2) {
    module2.exports = {
      Description: "WF : 986NN",
      RedundantCharacters: " -",
      ValidationRegex: "^986[0-9]{2}$",
      TestData: {
        Valid: [
          "98600",
          "98690"
        ],
        Invalid: [
          "9862",
          "986999",
          "98990",
          "098690"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats/WS.json
var require_WS = __commonJS({
  "node_modules/postal-codes-js/formats/WS.json"(exports2, module2) {
    module2.exports = {
      Description: "WS : CCNNNNN",
      RedundantCharacters: " -",
      ValidationRegex: "^(WS)?[0-9]{4}$",
      TestData: {
        Valid: [
          "1234",
          "WS1234",
          "WS-1234"
        ],
        Invalid: [
          "WS123",
          "V1234",
          "WS-12345"
        ]
      }
    };
  }
});

// node_modules/postal-codes-js/formats-web.js
var require_formats_web = __commonJS({
  "node_modules/postal-codes-js/formats-web.js"(exports2, module2) {
    "use strict";
    var formats = {};
    formats["10Digits.json"] = require_Digits();
    formats["2Digits.json"] = require_Digits2();
    formats["3Digits.json"] = require_Digits3();
    formats["4Digits.json"] = require_Digits4();
    formats["5Digits.json"] = require_Digits5();
    formats["6Digits.json"] = require_Digits6();
    formats["7Digits.json"] = require_Digits7();
    formats["8Digits.json"] = require_Digits8();
    formats["AD.json"] = require_AD();
    formats["AI.json"] = require_AI();
    formats["AQ.json"] = require_AQ();
    formats["AX.json"] = require_AX();
    formats["AZ.json"] = require_AZ();
    formats["BB.json"] = require_BB();
    formats["BH.json"] = require_BH();
    formats["BL.json"] = require_BL();
    formats["BN.json"] = require_BN();
    formats["CA.json"] = require_CA();
    formats["DK.json"] = require_DK();
    formats["FK.json"] = require_FK();
    formats["GB.json"] = require_GB();
    formats["GF.json"] = require_GF();
    formats["GG.json"] = require_GG();
    formats["GI.json"] = require_GI();
    formats["GP.json"] = require_GP();
    formats["GS.json"] = require_GS();
    formats["HN.json"] = require_HN();
    formats["IE.json"] = require_IE();
    formats["IM.json"] = require_IM();
    formats["IO.json"] = require_IO();
    formats["JE.json"] = require_JE();
    formats["KY.json"] = require_KY();
    formats["LB.json"] = require_LB();
    formats["LC.json"] = require_LC();
    formats["LT.json"] = require_LT();
    formats["LU.json"] = require_LU();
    formats["LV.json"] = require_LV();
    formats["MC.json"] = require_MC();
    formats["MD.json"] = require_MD();
    formats["MF.json"] = require_MF();
    formats["MS.json"] = require_MS();
    formats["MT.json"] = require_MT();
    formats["NC.json"] = require_NC();
    formats["NL.json"] = require_NL();
    formats["PF.json"] = require_PF();
    formats["PL.json"] = require_PL();
    formats["PM.json"] = require_PM();
    formats["PN.json"] = require_PN();
    formats["PT.json"] = require_PT();
    formats["RE.json"] = require_RE();
    formats["RU.json"] = require_RU();
    formats["SH.json"] = require_SH();
    formats["SM.json"] = require_SM();
    formats["SO.json"] = require_SO();
    formats["SZ.json"] = require_SZ();
    formats["TC.json"] = require_TC();
    formats["TW.json"] = require_TW();
    formats["US.json"] = require_US();
    formats["VA.json"] = require_VA();
    formats["VC.json"] = require_VC();
    formats["VE.json"] = require_VE();
    formats["VG.json"] = require_VG();
    formats["WF.json"] = require_WF();
    formats["WS.json"] = require_WS();
    module2.exports = function getFormat2(postalCodeFormat2) {
      return formats[postalCodeFormat2];
    };
  }
});

// node_modules/postal-codes-js/postal-codes.js
var require_postal_codes = __commonJS({
  "node_modules/postal-codes-js/postal-codes.js"(exports2, module2) {
    var byAlpha2 = require_postal_codes_alpha2();
    var byAlpha3 = require_postal_codes_alpha3();
    var isNode = require_browser();
    var getFormat2 = null;
    if (isNode) {
      getFormat2 = require_formats_node();
    } else {
      getFormat2 = require_formats_web();
    }
    module2.exports.validate = function(countryCode, postalCode) {
      if (!countryCode) {
        return "Missing country code.";
      }
      if (!postalCode) {
        return "Missing postal code.";
      }
      var countryData = void 0;
      var preparedCountryCode = countryCode.trim().toUpperCase();
      if (preparedCountryCode.length == 2) {
        countryData = byAlpha2[preparedCountryCode];
      }
      if (preparedCountryCode.length == 3) {
        countryData = byAlpha3[preparedCountryCode];
      }
      if (!countryData) {
        return "Unknown alpha2/alpha3 country code: " + preparedCountryCode;
      }
      if (!countryData.postalCodeFormat) {
        return true;
      }
      var format = getFormat2(countryData.postalCodeFormat);
      if (!format) {
        return 'Failed to load postal code format "' + countryData.postalCodeFormat + '".';
      }
      var preparedPostalCode = postalCode.toString().trim().slice(0);
      for (var i = 0; i < format.RedundantCharacters.length; i++) {
        preparedPostalCode = preparedPostalCode.replace(new RegExp(format.RedundantCharacters[i], "g"), "");
      }
      var expression = format.ValidationRegex;
      if (expression instanceof Array) {
        expression = "^" + expression.join("|") + "$";
      }
      const regexp = new RegExp(expression, "i");
      var result = regexp.exec(preparedPostalCode);
      if (!result) {
        return "Postal code " + preparedPostalCode + " is not valid for country " + preparedCountryCode;
      }
      if (result[0].toLowerCase() != preparedPostalCode.toLowerCase()) {
        return "Postal code " + preparedPostalCode + " is not valid for country " + preparedCountryCode;
      }
      return true;
    };
  }
});
export default require_postal_codes();
//# sourceMappingURL=postal-codes-js.js.map
