{
  "version": 3,
  "sources": ["../../postal-codes-js/generated/postal-codes-alpha2.json", "../../postal-codes-js/generated/postal-codes-alpha3.json", "../../detect-node/browser.js", "../../util/support/isBufferBrowser.js", "../../inherits/inherits_browser.js", "../../util/util.js", "../../path/path.js", "../../postal-codes-js/formats-node.js", "../../postal-codes-js/formats/10Digits.json", "../../postal-codes-js/formats/2Digits.json", "../../postal-codes-js/formats/3Digits.json", "../../postal-codes-js/formats/4Digits.json", "../../postal-codes-js/formats/5Digits.json", "../../postal-codes-js/formats/6Digits.json", "../../postal-codes-js/formats/7Digits.json", "../../postal-codes-js/formats/8Digits.json", "../../postal-codes-js/formats/AD.json", "../../postal-codes-js/formats/AI.json", "../../postal-codes-js/formats/AQ.json", "../../postal-codes-js/formats/AX.json", "../../postal-codes-js/formats/AZ.json", "../../postal-codes-js/formats/BB.json", "../../postal-codes-js/formats/BH.json", "../../postal-codes-js/formats/BL.json", "../../postal-codes-js/formats/BN.json", "../../postal-codes-js/formats/CA.json", "../../postal-codes-js/formats/DK.json", "../../postal-codes-js/formats/FK.json", "../../postal-codes-js/formats/GB.json", "../../postal-codes-js/formats/GF.json", "../../postal-codes-js/formats/GG.json", "../../postal-codes-js/formats/GI.json", "../../postal-codes-js/formats/GP.json", "../../postal-codes-js/formats/GS.json", "../../postal-codes-js/formats/HN.json", "../../postal-codes-js/formats/IE.json", "../../postal-codes-js/formats/IM.json", "../../postal-codes-js/formats/IO.json", "../../postal-codes-js/formats/JE.json", "../../postal-codes-js/formats/KY.json", "../../postal-codes-js/formats/LB.json", "../../postal-codes-js/formats/LC.json", "../../postal-codes-js/formats/LT.json", "../../postal-codes-js/formats/LU.json", "../../postal-codes-js/formats/LV.json", "../../postal-codes-js/formats/MC.json", "../../postal-codes-js/formats/MD.json", "../../postal-codes-js/formats/MF.json", "../../postal-codes-js/formats/MS.json", "../../postal-codes-js/formats/MT.json", "../../postal-codes-js/formats/NC.json", "../../postal-codes-js/formats/NL.json", "../../postal-codes-js/formats/PF.json", "../../postal-codes-js/formats/PL.json", "../../postal-codes-js/formats/PM.json", "../../postal-codes-js/formats/PN.json", "../../postal-codes-js/formats/PT.json", "../../postal-codes-js/formats/RE.json", "../../postal-codes-js/formats/RU.json", "../../postal-codes-js/formats/SH.json", "../../postal-codes-js/formats/SM.json", "../../postal-codes-js/formats/SO.json", "../../postal-codes-js/formats/SZ.json", "../../postal-codes-js/formats/TC.json", "../../postal-codes-js/formats/TW.json", "../../postal-codes-js/formats/US.json", "../../postal-codes-js/formats/VA.json", "../../postal-codes-js/formats/VC.json", "../../postal-codes-js/formats/VE.json", "../../postal-codes-js/formats/VG.json", "../../postal-codes-js/formats/WF.json", "../../postal-codes-js/formats/WS.json", "../../postal-codes-js/formats-web.js", "../../postal-codes-js/postal-codes.js"],
  "sourcesContent": ["{\n    \"AF\": {\n        \"countryName\": \"Afghanistan\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"AF\",\n        \"alpha3\": \"AFG\",\n        \"numeric3\": \"4\"\n    },\n    \"AX\": {\n        \"countryName\": \"Aland Islands\",\n        \"postalCodeFormat\": \"AX.json\",\n        \"alpha2\": \"AX\",\n        \"alpha3\": \"ALA\",\n        \"numeric3\": \"248\"\n    },\n    \"AL\": {\n        \"countryName\": \"Albania\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"AL\",\n        \"alpha3\": \"ALB\",\n        \"numeric3\": \"8\"\n    },\n    \"DZ\": {\n        \"countryName\": \"Algeria\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"DZ\",\n        \"alpha3\": \"DZA\",\n        \"numeric3\": \"12\"\n    },\n    \"AS\": {\n        \"countryName\": \"American Samoa\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"AS\",\n        \"alpha3\": \"ASM\",\n        \"numeric3\": \"16\"\n    },\n    \"AD\": {\n        \"countryName\": \"Andorra\",\n        \"postalCodeFormat\": \"AD.json\",\n        \"alpha2\": \"AD\",\n        \"alpha3\": \"AND\",\n        \"numeric3\": \"20\"\n    },\n    \"AO\": {\n        \"countryName\": \"Angola\",\n        \"alpha2\": \"AO\",\n        \"alpha3\": \"AGO\",\n        \"numeric3\": \"24\"\n    },\n    \"AI\": {\n        \"countryName\": \"Anguilla\",\n        \"postalCodeFormat\": \"AI.json\",\n        \"alpha2\": \"AI\",\n        \"alpha3\": \"AIA\",\n        \"numeric3\": \"660\"\n    },\n    \"AQ\": {\n        \"countryName\": \"Antarctica\",\n        \"postalCodeFormat\": \"AQ.json\",\n        \"alpha2\": \"AQ\",\n        \"alpha3\": \"ATA\",\n        \"numeric3\": \"10\"\n    },\n    \"AG\": {\n        \"countryName\": \"Antigua and Barbuda\",\n        \"alpha2\": \"AG\",\n        \"alpha3\": \"ATG\",\n        \"numeric3\": \"28\"\n    },\n    \"AR\": {\n        \"countryName\": \"Argentina\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"AR\",\n        \"alpha3\": \"ARG\",\n        \"numeric3\": \"32\"\n    },\n    \"AM\": {\n        \"countryName\": \"Armenia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"AM\",\n        \"alpha3\": \"ARM\",\n        \"numeric3\": \"51\"\n    },\n    \"AW\": {\n        \"countryName\": \"Aruba\",\n        \"alpha2\": \"AW\",\n        \"alpha3\": \"ABW\",\n        \"numeric3\": \"533\"\n    },\n    \"AU\": {\n        \"countryName\": \"Australia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"AU\",\n        \"alpha3\": \"AUS\",\n        \"numeric3\": \"36\"\n    },\n    \"AT\": {\n        \"countryName\": \"Austria\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"AT\",\n        \"alpha3\": \"AUT\",\n        \"numeric3\": \"40\"\n    },\n    \"AZ\": {\n        \"countryName\": \"Azerbaijan\",\n        \"postalCodeFormat\": \"AZ.json\",\n        \"alpha2\": \"AZ\",\n        \"alpha3\": \"AZE\",\n        \"numeric3\": \"31\"\n    },\n    \"BS\": {\n        \"countryName\": \"Bahamas\",\n        \"alpha2\": \"BS\",\n        \"alpha3\": \"BHS\",\n        \"numeric3\": \"44\"\n    },\n    \"BH\": {\n        \"countryName\": \"Bahrain\",\n        \"postalCodeFormat\": \"BH.json\",\n        \"alpha2\": \"BH\",\n        \"alpha3\": \"BHR\",\n        \"numeric3\": \"48\"\n    },\n    \"BD\": {\n        \"countryName\": \"Bangladesh\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"BD\",\n        \"alpha3\": \"BGD\",\n        \"numeric3\": \"50\"\n    },\n    \"BB\": {\n        \"countryName\": \"Barbados\",\n        \"postalCodeFormat\": \"BB.json\",\n        \"alpha2\": \"BB\",\n        \"alpha3\": \"BRB\",\n        \"numeric3\": \"52\"\n    },\n    \"BY\": {\n        \"countryName\": \"Belarus\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"BY\",\n        \"alpha3\": \"BLR\",\n        \"numeric3\": \"112\"\n    },\n    \"BE\": {\n        \"countryName\": \"Belgium\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"BE\",\n        \"alpha3\": \"BEL\",\n        \"numeric3\": \"56\"\n    },\n    \"BZ\": {\n        \"countryName\": \"Belize\",\n        \"alpha2\": \"BZ\",\n        \"alpha3\": \"BLZ\",\n        \"numeric3\": \"84\"\n    },\n    \"BJ\": {\n        \"countryName\": \"Benin\",\n        \"alpha2\": \"BJ\",\n        \"alpha3\": \"BEN\",\n        \"numeric3\": \"204\"\n    },\n    \"BM\": {\n        \"countryName\": \"Bermuda\",\n        \"alpha2\": \"BM\",\n        \"alpha3\": \"BMU\",\n        \"numeric3\": \"60\"\n    },\n    \"BT\": {\n        \"countryName\": \"Bhutan\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"BT\",\n        \"alpha3\": \"BTN\",\n        \"numeric3\": \"64\"\n    },\n    \"BO\": {\n        \"countryName\": \"Bolivia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"BO\",\n        \"alpha3\": \"BOL\",\n        \"numeric3\": \"68\"\n    },\n    \"BA\": {\n        \"countryName\": \"Bosnia and Herzegovina\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"BA\",\n        \"alpha3\": \"BIH\",\n        \"numeric3\": \"70\"\n    },\n    \"BW\": {\n        \"countryName\": \"Botswana\",\n        \"alpha2\": \"BW\",\n        \"alpha3\": \"BWA\",\n        \"numeric3\": \"72\"\n    },\n    \"BV\": {\n        \"countryName\": \"Bouvet Island\",\n        \"alpha2\": \"BV\",\n        \"alpha3\": \"BVT\",\n        \"numeric3\": \"74\"\n    },\n    \"BR\": {\n        \"countryName\": \"Brazil\",\n        \"postalCodeFormat\": \"8Digits.json\",\n        \"alpha2\": \"BR\",\n        \"alpha3\": \"BRA\",\n        \"numeric3\": \"76\"\n    },\n    \"VG\": {\n        \"countryName\": \"British Virgin Islands\",\n        \"postalCodeFormat\": \"VG.json\",\n        \"alpha2\": \"VG\",\n        \"alpha3\": \"VGB\",\n        \"numeric3\": \"92\"\n    },\n    \"IO\": {\n        \"countryName\": \"British Indian Ocean Territory\",\n        \"postalCodeFormat\": \"IO.json\",\n        \"alpha2\": \"IO\",\n        \"alpha3\": \"IOT\",\n        \"numeric3\": \"86\"\n    },\n    \"BN\": {\n        \"countryName\": \"Brunei Darussalam\",\n        \"postalCodeFormat\": \"BN.json\",\n        \"alpha2\": \"BN\",\n        \"alpha3\": \"BRN\",\n        \"numeric3\": \"96\"\n    },\n    \"BG\": {\n        \"countryName\": \"Bulgaria\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"BG\",\n        \"alpha3\": \"BGR\",\n        \"numeric3\": \"100\"\n    },\n    \"BF\": {\n        \"countryName\": \"Burkina Faso\",\n        \"alpha2\": \"BF\",\n        \"alpha3\": \"BFA\",\n        \"numeric3\": \"854\"\n    },\n    \"BI\": {\n        \"countryName\": \"Burundi\",\n        \"alpha2\": \"BI\",\n        \"alpha3\": \"BDI\",\n        \"numeric3\": \"108\"\n    },\n    \"KH\": {\n        \"countryName\": \"Cambodia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"KH\",\n        \"alpha3\": \"KHM\",\n        \"numeric3\": \"116\"\n    },\n    \"CM\": {\n        \"countryName\": \"Cameroon\",\n        \"alpha2\": \"CM\",\n        \"alpha3\": \"CMR\",\n        \"numeric3\": \"120\"\n    },\n    \"CA\": {\n        \"countryName\": \"Canada\",\n        \"postalCodeFormat\": \"CA.json\",\n        \"alpha2\": \"CA\",\n        \"alpha3\": \"CAN\",\n        \"numeric3\": \"124\"\n    },\n    \"CV\": {\n        \"countryName\": \"Cape Verde\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"CV\",\n        \"alpha3\": \"CPV\",\n        \"numeric3\": \"132\"\n    },\n    \"KY\": {\n        \"countryName\": \"Cayman Islands\",\n        \"postalCodeFormat\": \"KY.json\",\n        \"alpha2\": \"KY\",\n        \"alpha3\": \"CYM\",\n        \"numeric3\": \"136\"\n    },\n    \"CF\": {\n        \"countryName\": \"Central African Republic\",\n        \"alpha2\": \"CF\",\n        \"alpha3\": \"CAF\",\n        \"numeric3\": \"140\"\n    },\n    \"TD\": {\n        \"countryName\": \"Chad\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"TD\",\n        \"alpha3\": \"TCD\",\n        \"numeric3\": \"148\"\n    },\n    \"CL\": {\n        \"countryName\": \"Chile\",\n        \"postalCodeFormat\": \"7Digits.json\",\n        \"alpha2\": \"CL\",\n        \"alpha3\": \"CHL\",\n        \"numeric3\": \"152\"\n    },\n    \"CN\": {\n        \"countryName\": \"China\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"CN\",\n        \"alpha3\": \"CHN\",\n        \"numeric3\": \"156\"\n    },\n    \"HK\": {\n        \"countryName\": \"Hong Kong, Special Administrative Region of China\",\n        \"alpha2\": \"HK\",\n        \"alpha3\": \"HKG\",\n        \"numeric3\": \"344\"\n    },\n    \"MO\": {\n        \"countryName\": \"Macao, Special Administrative Region of China\",\n        \"alpha2\": \"MO\",\n        \"alpha3\": \"MAC\",\n        \"numeric3\": \"446\"\n    },\n    \"CX\": {\n        \"countryName\": \"Christmas Island\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"CX\",\n        \"alpha3\": \"CXR\",\n        \"numeric3\": \"162\"\n    },\n    \"CC\": {\n        \"countryName\": \"Cocos (Keeling) Islands\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"CC\",\n        \"alpha3\": \"CCK\",\n        \"numeric3\": \"166\"\n    },\n    \"CO\": {\n        \"countryName\": \"Colombia\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"CO\",\n        \"alpha3\": \"COL\",\n        \"numeric3\": \"170\"\n    },\n    \"KM\": {\n        \"countryName\": \"Comoros\",\n        \"alpha2\": \"KM\",\n        \"alpha3\": \"COM\",\n        \"numeric3\": \"174\"\n    },\n    \"CG\": {\n        \"countryName\": \"Congo (Brazzaville)\",\n        \"alpha2\": \"CG\",\n        \"alpha3\": \"COG\",\n        \"numeric3\": \"178\"\n    },\n    \"CD\": {\n        \"countryName\": \"Congo, Democratic Republic of the\",\n        \"alpha2\": \"CD\",\n        \"alpha3\": \"COD\",\n        \"numeric3\": \"180\"\n    },\n    \"CK\": {\n        \"countryName\": \"Cook Islands\",\n        \"alpha2\": \"CK\",\n        \"alpha3\": \"COK\",\n        \"numeric3\": \"184\"\n    },\n    \"CR\": {\n        \"countryName\": \"Costa Rica\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"CR\",\n        \"alpha3\": \"CRI\",\n        \"numeric3\": \"188\"\n    },\n    \"CI\": {\n        \"countryName\": \"Côte d'Ivoire\",\n        \"alpha2\": \"CI\",\n        \"alpha3\": \"CIV\",\n        \"numeric3\": \"384\"\n    },\n    \"HR\": {\n        \"countryName\": \"Croatia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"HR\",\n        \"alpha3\": \"HRV\",\n        \"numeric3\": \"191\"\n    },\n    \"CU\": {\n        \"countryName\": \"Cuba\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"CU\",\n        \"alpha3\": \"CUB\",\n        \"numeric3\": \"192\"\n    },\n    \"CY\": {\n        \"countryName\": \"Cyprus\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"CY\",\n        \"alpha3\": \"CYP\",\n        \"numeric3\": \"196\"\n    },\n    \"CZ\": {\n        \"countryName\": \"Czech Republic\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"CZ\",\n        \"alpha3\": \"CZE\",\n        \"numeric3\": \"203\"\n    },\n    \"DK\": {\n        \"countryName\": \"Denmark\",\n        \"postalCodeFormat\": \"DK.json\",\n        \"alpha2\": \"DK\",\n        \"alpha3\": \"DNK\",\n        \"numeric3\": \"208\"\n    },\n    \"DJ\": {\n        \"countryName\": \"Djibouti\",\n        \"alpha2\": \"DJ\",\n        \"alpha3\": \"DJI\",\n        \"numeric3\": \"262\"\n    },\n    \"DM\": {\n        \"countryName\": \"Dominica\",\n        \"alpha2\": \"DM\",\n        \"alpha3\": \"DMA\",\n        \"numeric3\": \"212\"\n    },\n    \"DO\": {\n        \"countryName\": \"Dominican Republic\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"DO\",\n        \"alpha3\": \"DOM\",\n        \"numeric3\": \"214\"\n    },\n    \"EC\": {\n        \"countryName\": \"Ecuador\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"EC\",\n        \"alpha3\": \"ECU\",\n        \"numeric3\": \"218\"\n    },\n    \"EG\": {\n        \"countryName\": \"Egypt\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"EG\",\n        \"alpha3\": \"EGY\",\n        \"numeric3\": \"818\"\n    },\n    \"SV\": {\n        \"countryName\": \"El Salvador\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"SV\",\n        \"alpha3\": \"SLV\",\n        \"numeric3\": \"222\"\n    },\n    \"GQ\": {\n        \"countryName\": \"Equatorial Guinea\",\n        \"alpha2\": \"GQ\",\n        \"alpha3\": \"GNQ\",\n        \"numeric3\": \"226\"\n    },\n    \"ER\": {\n        \"countryName\": \"Eritrea\",\n        \"alpha2\": \"ER\",\n        \"alpha3\": \"ERI\",\n        \"numeric3\": \"232\"\n    },\n    \"EE\": {\n        \"countryName\": \"Estonia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"EE\",\n        \"alpha3\": \"EST\",\n        \"numeric3\": \"233\"\n    },\n    \"ET\": {\n        \"countryName\": \"Ethiopia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"ET\",\n        \"alpha3\": \"ETH\",\n        \"numeric3\": \"231\"\n    },\n    \"FK\": {\n        \"countryName\": \"Falkland Islands (Malvinas)\",\n        \"postalCodeFormat\": \"FK.json\",\n        \"alpha2\": \"FK\",\n        \"alpha3\": \"FLK\",\n        \"numeric3\": \"238\"\n    },\n    \"FO\": {\n        \"countryName\": \"Faroe Islands\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"FO\",\n        \"alpha3\": \"FRO\",\n        \"numeric3\": \"234\"\n    },\n    \"FJ\": {\n        \"countryName\": \"Fiji\",\n        \"alpha2\": \"FJ\",\n        \"alpha3\": \"FJI\",\n        \"numeric3\": \"242\"\n    },\n    \"FI\": {\n        \"countryName\": \"Finland\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"FI\",\n        \"alpha3\": \"FIN\",\n        \"numeric3\": \"246\"\n    },\n    \"FR\": {\n        \"countryName\": \"France\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"FR\",\n        \"alpha3\": \"FRA\",\n        \"numeric3\": \"250\"\n    },\n    \"GF\": {\n        \"countryName\": \"French Guiana\",\n        \"postalCodeFormat\": \"GF.json\",\n        \"alpha2\": \"GF\",\n        \"alpha3\": \"GUF\",\n        \"numeric3\": \"254\"\n    },\n    \"PF\": {\n        \"countryName\": \"French Polynesia\",\n        \"postalCodeFormat\": \"PF.json\",\n        \"alpha2\": \"PF\",\n        \"alpha3\": \"PYF\",\n        \"numeric3\": \"258\"\n    },\n    \"TF\": {\n        \"countryName\": \"French Southern Territories\",\n        \"alpha2\": \"TF\",\n        \"alpha3\": \"ATF\",\n        \"numeric3\": \"260\"\n    },\n    \"GA\": {\n        \"countryName\": \"Gabon\",\n        \"alpha2\": \"GA\",\n        \"alpha3\": \"GAB\",\n        \"numeric3\": \"266\"\n    },\n    \"GM\": {\n        \"countryName\": \"Gambia\",\n        \"alpha2\": \"GM\",\n        \"alpha3\": \"GMB\",\n        \"numeric3\": \"270\"\n    },\n    \"GE\": {\n        \"countryName\": \"Georgia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"GE\",\n        \"alpha3\": \"GEO\",\n        \"numeric3\": \"268\"\n    },\n    \"DE\": {\n        \"countryName\": \"Germany\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"DE\",\n        \"alpha3\": \"DEU\",\n        \"numeric3\": \"276\"\n    },\n    \"GH\": {\n        \"countryName\": \"Ghana\",\n        \"alpha2\": \"GH\",\n        \"alpha3\": \"GHA\",\n        \"numeric3\": \"288\"\n    },\n    \"GI\": {\n        \"countryName\": \"Gibraltar\",\n        \"postalCodeFormat\": \"GI.json\",\n        \"alpha2\": \"GI\",\n        \"alpha3\": \"GIB\",\n        \"numeric3\": \"292\"\n    },\n    \"GR\": {\n        \"countryName\": \"Greece\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"GR\",\n        \"alpha3\": \"GRC\",\n        \"numeric3\": \"300\"\n    },\n    \"GL\": {\n        \"countryName\": \"Greenland\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"GL\",\n        \"alpha3\": \"GRL\",\n        \"numeric3\": \"304\"\n    },\n    \"GD\": {\n        \"countryName\": \"Grenada\",\n        \"alpha2\": \"GD\",\n        \"alpha3\": \"GRD\",\n        \"numeric3\": \"308\"\n    },\n    \"GP\": {\n        \"countryName\": \"Guadeloupe\",\n        \"postalCodeFormat\": \"GP.json\",\n        \"alpha2\": \"GP\",\n        \"alpha3\": \"GLP\",\n        \"numeric3\": \"312\"\n    },\n    \"GU\": {\n        \"countryName\": \"Guam\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"GU\",\n        \"alpha3\": \"GUM\",\n        \"numeric3\": \"316\"\n    },\n    \"GT\": {\n        \"countryName\": \"Guatemala\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"GT\",\n        \"alpha3\": \"GTM\",\n        \"numeric3\": \"320\"\n    },\n    \"GG\": {\n        \"countryName\": \"Guernsey\",\n        \"postalCodeFormat\": \"GG.json\",\n        \"alpha2\": \"GG\",\n        \"alpha3\": \"GGY\",\n        \"numeric3\": \"831\"\n    },\n    \"GN\": {\n        \"countryName\": \"Guinea\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"GN\",\n        \"alpha3\": \"GIN\",\n        \"numeric3\": \"324\"\n    },\n    \"GW\": {\n        \"countryName\": \"Guinea-Bissau\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"GW\",\n        \"alpha3\": \"GNB\",\n        \"numeric3\": \"624\"\n    },\n    \"GY\": {\n        \"countryName\": \"Guyana\",\n        \"alpha2\": \"GY\",\n        \"alpha3\": \"GUY\",\n        \"numeric3\": \"328\"\n    },\n    \"HT\": {\n        \"countryName\": \"Haiti\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"HT\",\n        \"alpha3\": \"HTI\",\n        \"numeric3\": \"332\"\n    },\n    \"HM\": {\n        \"countryName\": \"Heard Island and Mcdonald Islands\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"HM\",\n        \"alpha3\": \"HMD\",\n        \"numeric3\": \"334\"\n    },\n    \"VA\": {\n        \"countryName\": \"Holy See (Vatican City State)\",\n        \"postalCodeFormat\": \"VA.json\",\n        \"alpha2\": \"VA\",\n        \"alpha3\": \"VAT\",\n        \"numeric3\": \"336\"\n    },\n    \"HN\": {\n        \"countryName\": \"Honduras\",\n        \"postalCodeFormat\": \"HN.json\",\n        \"alpha2\": \"HN\",\n        \"alpha3\": \"HND\",\n        \"numeric3\": \"340\"\n    },\n    \"HU\": {\n        \"countryName\": \"Hungary\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"HU\",\n        \"alpha3\": \"HUN\",\n        \"numeric3\": \"348\"\n    },\n    \"IS\": {\n        \"countryName\": \"Iceland\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"IS\",\n        \"alpha3\": \"ISL\",\n        \"numeric3\": \"352\"\n    },\n    \"IN\": {\n        \"countryName\": \"India\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"IN\",\n        \"alpha3\": \"IND\",\n        \"numeric3\": \"356\"\n    },\n    \"IC\": {\n        \"countryName\": \"Canary Islands\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"IC\",\n        \"alpha3\": \"\",\n        \"numeric3\": \"\"\n    },\n    \"ID\": {\n        \"countryName\": \"Indonesia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"ID\",\n        \"alpha3\": \"IDN\",\n        \"numeric3\": \"360\"\n    },\n    \"IR\": {\n        \"countryName\": \"Iran, Islamic Republic of\",\n        \"postalCodeFormat\": \"10Digits.json\",\n        \"alpha2\": \"IR\",\n        \"alpha3\": \"IRN\",\n        \"numeric3\": \"364\"\n    },\n    \"IQ\": {\n        \"countryName\": \"Iraq\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"IQ\",\n        \"alpha3\": \"IRQ\",\n        \"numeric3\": \"368\"\n    },\n    \"IE\": {\n        \"countryName\": \"Ireland\",\n        \"postalCodeFormat\": \"IE.json\",\n        \"alpha2\": \"IE\",\n        \"alpha3\": \"IRL\",\n        \"numeric3\": \"372\"\n    },\n    \"IM\": {\n        \"countryName\": \"Isle of Man\",\n        \"postalCodeFormat\": \"IM.json\",\n        \"alpha2\": \"IM\",\n        \"alpha3\": \"IMN\",\n        \"numeric3\": \"833\"\n    },\n    \"IL\": {\n        \"countryName\": \"Israel\",\n        \"postalCodeFormat\": \"7Digits.json\",\n        \"alpha2\": \"IL\",\n        \"alpha3\": \"ISR\",\n        \"numeric3\": \"376\"\n    },\n    \"IT\": {\n        \"countryName\": \"Italy\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"IT\",\n        \"alpha3\": \"ITA\",\n        \"numeric3\": \"380\"\n    },\n    \"JM\": {\n        \"countryName\": \"Jamaica\",\n        \"postalCodeFormat\": \"2Digits.json\",\n        \"alpha2\": \"JM\",\n        \"alpha3\": \"JAM\",\n        \"numeric3\": \"388\"\n    },\n    \"JP\": {\n        \"countryName\": \"Japan\",\n        \"postalCodeFormat\": \"7Digits.json\",\n        \"alpha2\": \"JP\",\n        \"alpha3\": \"JPN\",\n        \"numeric3\": \"392\"\n    },\n    \"JE\": {\n        \"countryName\": \"Jersey\",\n        \"postalCodeFormat\": \"JE.json\",\n        \"alpha2\": \"JE\",\n        \"alpha3\": \"JEY\",\n        \"numeric3\": \"832\"\n    },\n    \"JO\": {\n        \"countryName\": \"Jordan\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"JO\",\n        \"alpha3\": \"JOR\",\n        \"numeric3\": \"400\"\n    },\n    \"KZ\": {\n        \"countryName\": \"Kazakhstan\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"KZ\",\n        \"alpha3\": \"KAZ\",\n        \"numeric3\": \"398\"\n    },\n    \"KE\": {\n        \"countryName\": \"Kenya\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"KE\",\n        \"alpha3\": \"KEN\",\n        \"numeric3\": \"404\"\n    },\n    \"KI\": {\n        \"countryName\": \"Kiribati\",\n        \"alpha2\": \"KI\",\n        \"alpha3\": \"KIR\",\n        \"numeric3\": \"296\"\n    },\n    \"KP\": {\n        \"countryName\": \"Korea, Democratic People's Republic of\",\n        \"alpha2\": \"KP\",\n        \"alpha3\": \"PRK\",\n        \"numeric3\": \"408\"\n    },\n    \"KR\": {\n        \"countryName\": \"Korea, Republic of\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"KR\",\n        \"alpha3\": \"KOR\",\n        \"numeric3\": \"410\"\n    },\n    \"KW\": {\n        \"countryName\": \"Kuwait\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"KW\",\n        \"alpha3\": \"KWT\",\n        \"numeric3\": \"414\"\n    },\n    \"KG\": {\n        \"countryName\": \"Kyrgyzstan\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"KG\",\n        \"alpha3\": \"KGZ\",\n        \"numeric3\": \"417\"\n    },\n    \"LA\": {\n        \"countryName\": \"Lao PDR\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"LA\",\n        \"alpha3\": \"LAO\",\n        \"numeric3\": \"418\"\n    },\n    \"LV\": {\n        \"countryName\": \"Latvia\",\n        \"postalCodeFormat\": \"LV.json\",\n        \"alpha2\": \"LV\",\n        \"alpha3\": \"LVA\",\n        \"numeric3\": \"428\"\n    },\n    \"LB\": {\n        \"countryName\": \"Lebanon\",\n        \"postalCodeFormat\": \"LB.json\",\n        \"alpha2\": \"LB\",\n        \"alpha3\": \"LBN\",\n        \"numeric3\": \"422\"\n    },\n    \"LS\": {\n        \"countryName\": \"Lesotho\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"LS\",\n        \"alpha3\": \"LSO\",\n        \"numeric3\": \"426\"\n    },\n    \"LR\": {\n        \"countryName\": \"Liberia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"LR\",\n        \"alpha3\": \"LBR\",\n        \"numeric3\": \"430\"\n    },\n    \"LY\": {\n        \"countryName\": \"Libya\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"LY\",\n        \"alpha3\": \"LBY\",\n        \"numeric3\": \"434\"\n    },\n    \"LI\": {\n        \"countryName\": \"Liechtenstein\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"LI\",\n        \"alpha3\": \"LIE\",\n        \"numeric3\": \"438\"\n    },\n    \"LT\": {\n        \"countryName\": \"Lithuania\",\n        \"postalCodeFormat\": \"LT.json\",\n        \"alpha2\": \"LT\",\n        \"alpha3\": \"LTU\",\n        \"numeric3\": \"440\"\n    },\n    \"LU\": {\n        \"countryName\": \"Luxembourg\",\n        \"postalCodeFormat\": \"LU.json\",\n        \"alpha2\": \"LU\",\n        \"alpha3\": \"LUX\",\n        \"numeric3\": \"442\"\n    },\n    \"MK\": {\n        \"countryName\": \"Macedonia, Republic of\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"MK\",\n        \"alpha3\": \"MKD\",\n        \"numeric3\": \"807\"\n    },\n    \"MG\": {\n        \"countryName\": \"Madagascar\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"MG\",\n        \"alpha3\": \"MDG\",\n        \"numeric3\": \"450\"\n    },\n    \"MW\": {\n        \"countryName\": \"Malawi\",\n        \"alpha2\": \"MW\",\n        \"alpha3\": \"MWI\",\n        \"numeric3\": \"454\"\n    },\n    \"MY\": {\n        \"countryName\": \"Malaysia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MY\",\n        \"alpha3\": \"MYS\",\n        \"numeric3\": \"458\"\n    },\n    \"MV\": {\n        \"countryName\": \"Maldives\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MV\",\n        \"alpha3\": \"MDV\",\n        \"numeric3\": \"462\"\n    },\n    \"ML\": {\n        \"countryName\": \"Mali\",\n        \"alpha2\": \"ML\",\n        \"alpha3\": \"MLI\",\n        \"numeric3\": \"466\"\n    },\n    \"MT\": {\n        \"countryName\": \"Malta\",\n        \"postalCodeFormat\": \"MT.json\",\n        \"alpha2\": \"MT\",\n        \"alpha3\": \"MLT\",\n        \"numeric3\": \"470\"\n    },\n    \"MH\": {\n        \"countryName\": \"Marshall Islands\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"MH\",\n        \"alpha3\": \"MHL\",\n        \"numeric3\": \"584\"\n    },\n    \"MQ\": {\n        \"countryName\": \"Martinique\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MQ\",\n        \"alpha3\": \"MTQ\",\n        \"numeric3\": \"474\"\n    },\n    \"MR\": {\n        \"countryName\": \"Mauritania\",\n        \"alpha2\": \"MR\",\n        \"alpha3\": \"MRT\",\n        \"numeric3\": \"478\"\n    },\n    \"MU\": {\n        \"countryName\": \"Mauritius\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MU\",\n        \"alpha3\": \"MUS\",\n        \"numeric3\": \"480\"\n    },\n    \"YT\": {\n        \"countryName\": \"Mayotte\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"YT\",\n        \"alpha3\": \"MYT\",\n        \"numeric3\": \"175\"\n    },\n    \"MX\": {\n        \"countryName\": \"Mexico\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MX\",\n        \"alpha3\": \"MEX\",\n        \"numeric3\": \"484\"\n    },\n    \"FM\": {\n        \"countryName\": \"Micronesia, Federated States of\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"FM\",\n        \"alpha3\": \"FSM\",\n        \"numeric3\": \"583\"\n    },\n    \"MD\": {\n        \"countryName\": \"Moldova\",\n        \"postalCodeFormat\": \"MD.json\",\n        \"alpha2\": \"MD\",\n        \"alpha3\": \"MDA\",\n        \"numeric3\": \"498\"\n    },\n    \"MC\": {\n        \"countryName\": \"Monaco\",\n        \"postalCodeFormat\": \"MC.json\",\n        \"alpha2\": \"MC\",\n        \"alpha3\": \"MCO\",\n        \"numeric3\": \"492\"\n    },\n    \"MN\": {\n        \"countryName\": \"Mongolia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MN\",\n        \"alpha3\": \"MNG\",\n        \"numeric3\": \"496\"\n    },\n    \"ME\": {\n        \"countryName\": \"Montenegro\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"ME\",\n        \"alpha3\": \"MNE\",\n        \"numeric3\": \"499\"\n    },\n    \"MS\": {\n        \"countryName\": \"Montserrat\",\n        \"postalCodeFormat\": \"MS.json\",\n        \"alpha2\": \"MS\",\n        \"alpha3\": \"MSR\",\n        \"numeric3\": \"500\"\n    },\n    \"MA\": {\n        \"countryName\": \"Morocco\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MA\",\n        \"alpha3\": \"MAR\",\n        \"numeric3\": \"504\"\n    },\n    \"MZ\": {\n        \"countryName\": \"Mozambique\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"MZ\",\n        \"alpha3\": \"MOZ\",\n        \"numeric3\": \"508\"\n    },\n    \"MM\": {\n        \"countryName\": \"Myanmar\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MM\",\n        \"alpha3\": \"MMR\",\n        \"numeric3\": \"104\"\n    },\n    \"NA\": {\n        \"countryName\": \"Namibia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"NA\",\n        \"alpha3\": \"NAM\",\n        \"numeric3\": \"516\"\n    },\n    \"NR\": {\n        \"countryName\": \"Nauru\",\n        \"alpha2\": \"NR\",\n        \"alpha3\": \"NRU\",\n        \"numeric3\": \"520\"\n    },\n    \"NP\": {\n        \"countryName\": \"Nepal\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"NP\",\n        \"alpha3\": \"NPL\",\n        \"numeric3\": \"524\"\n    },\n    \"NL\": {\n        \"countryName\": \"Netherlands\",\n        \"postalCodeFormat\": \"NL.json\",\n        \"alpha2\": \"NL\",\n        \"alpha3\": \"NLD\",\n        \"numeric3\": \"528\"\n    },\n    \"AN\": {\n        \"countryName\": \"Netherlands Antilles\",\n        \"alpha2\": \"AN\",\n        \"alpha3\": \"ANT\",\n        \"numeric3\": \"530\"\n    },\n    \"NC\": {\n        \"countryName\": \"New Caledonia\",\n        \"postalCodeFormat\": \"NC.json\",\n        \"alpha2\": \"NC\",\n        \"alpha3\": \"NCL\",\n        \"numeric3\": \"540\"\n    },\n    \"NZ\": {\n        \"countryName\": \"New Zealand\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"NZ\",\n        \"alpha3\": \"NZL\",\n        \"numeric3\": \"554\"\n    },\n    \"NI\": {\n        \"countryName\": \"Nicaragua\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"NI\",\n        \"alpha3\": \"NIC\",\n        \"numeric3\": \"558\"\n    },\n    \"NE\": {\n        \"countryName\": \"Niger\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"NE\",\n        \"alpha3\": \"NER\",\n        \"numeric3\": \"562\"\n    },\n    \"NG\": {\n        \"countryName\": \"Nigeria\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"NG\",\n        \"alpha3\": \"NGA\",\n        \"numeric3\": \"566\"\n    },\n    \"NU\": {\n        \"countryName\": \"Niue\",\n        \"alpha2\": \"NU\",\n        \"alpha3\": \"NIU\",\n        \"numeric3\": \"570\"\n    },\n    \"NF\": {\n        \"countryName\": \"Norfolk Island\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"NF\",\n        \"alpha3\": \"NFK\",\n        \"numeric3\": \"574\"\n    },\n    \"MP\": {\n        \"countryName\": \"Northern Mariana Islands\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"MP\",\n        \"alpha3\": \"MNP\",\n        \"numeric3\": \"580\"\n    },\n    \"NO\": {\n        \"countryName\": \"Norway\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"NO\",\n        \"alpha3\": \"NOR\",\n        \"numeric3\": \"578\"\n    },\n    \"OM\": {\n        \"countryName\": \"Oman\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"OM\",\n        \"alpha3\": \"OMN\",\n        \"numeric3\": \"512\"\n    },\n    \"PK\": {\n        \"countryName\": \"Pakistan\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"PK\",\n        \"alpha3\": \"PAK\",\n        \"numeric3\": \"586\"\n    },\n    \"PW\": {\n        \"countryName\": \"Palau\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"PW\",\n        \"alpha3\": \"PLW\",\n        \"numeric3\": \"585\"\n    },\n    \"PS\": {\n        \"countryName\": \"Palestinian Territory, Occupied\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"PS\",\n        \"alpha3\": \"PSE\",\n        \"numeric3\": \"275\"\n    },\n    \"PA\": {\n        \"countryName\": \"Panama\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"PA\",\n        \"alpha3\": \"PAN\",\n        \"numeric3\": \"591\"\n    },\n    \"PG\": {\n        \"countryName\": \"Papua New Guinea\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"PG\",\n        \"alpha3\": \"PNG\",\n        \"numeric3\": \"598\"\n    },\n    \"PY\": {\n        \"countryName\": \"Paraguay\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"PY\",\n        \"alpha3\": \"PRY\",\n        \"numeric3\": \"600\"\n    },\n    \"PE\": {\n        \"countryName\": \"Peru\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"PE\",\n        \"alpha3\": \"PER\",\n        \"numeric3\": \"604\"\n    },\n    \"PH\": {\n        \"countryName\": \"Philippines\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"PH\",\n        \"alpha3\": \"PHL\",\n        \"numeric3\": \"608\"\n    },\n    \"PN\": {\n        \"countryName\": \"Pitcairn\",\n        \"postalCodeFormat\": \"PN.json\",\n        \"alpha2\": \"PN\",\n        \"alpha3\": \"PCN\",\n        \"numeric3\": \"612\"\n    },\n    \"PL\": {\n        \"countryName\": \"Poland\",\n        \"postalCodeFormat\": \"PL.json\",\n        \"alpha2\": \"PL\",\n        \"alpha3\": \"POL\",\n        \"numeric3\": \"616\"\n    },\n    \"PT\": {\n        \"countryName\": \"Portugal\",\n        \"postalCodeFormat\": \"PT.json\",\n        \"alpha2\": \"PT\",\n        \"alpha3\": \"PRT\",\n        \"numeric3\": \"620\"\n    },\n    \"PR\": {\n        \"countryName\": \"Puerto Rico\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"PR\",\n        \"alpha3\": \"PRI\",\n        \"numeric3\": \"630\"\n    },\n    \"QA\": {\n        \"countryName\": \"Qatar\",\n        \"alpha2\": \"QA\",\n        \"alpha3\": \"QAT\",\n        \"numeric3\": \"634\"\n    },\n    \"RE\": {\n        \"countryName\": \"Réunion\",\n        \"postalCodeFormat\": \"RE.json\",\n        \"alpha2\": \"RE\",\n        \"alpha3\": \"REU\",\n        \"numeric3\": \"638\"\n    },\n    \"RO\": {\n        \"countryName\": \"Romania\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"RO\",\n        \"alpha3\": \"ROU\",\n        \"numeric3\": \"642\"\n    },\n    \"RU\": {\n        \"countryName\": \"Russian Federation\",\n        \"postalCodeFormat\": \"RU.json\",\n        \"alpha2\": \"RU\",\n        \"alpha3\": \"RUS\",\n        \"numeric3\": \"643\"\n    },\n    \"RW\": {\n        \"countryName\": \"Rwanda\",\n        \"alpha2\": \"RW\",\n        \"alpha3\": \"RWA\",\n        \"numeric3\": \"646\"\n    },\n    \"BL\": {\n        \"countryName\": \"Saint-Barthélemy\",\n        \"postalCodeFormat\": \"BL.json\",\n        \"alpha2\": \"BL\",\n        \"alpha3\": \"BLM\",\n        \"numeric3\": \"652\"\n    },\n    \"SH\": {\n        \"countryName\": \"Saint Helena\",\n        \"postalCodeFormat\": \"SH.json\",\n        \"alpha2\": \"SH\",\n        \"alpha3\": \"SHN\",\n        \"numeric3\": \"654\"\n    },\n    \"KN\": {\n        \"countryName\": \"Saint Kitts and Nevis\",\n        \"alpha2\": \"KN\",\n        \"alpha3\": \"KNA\",\n        \"numeric3\": \"659\"\n    },\n    \"LC\": {\n        \"countryName\": \"Saint Lucia\",\n        \"postalCodeFormat\": \"LC.json\",\n        \"alpha2\": \"LC\",\n        \"alpha3\": \"LCA\",\n        \"numeric3\": \"662\"\n    },\n    \"MF\": {\n        \"countryName\": \"Saint-Martin (French part)\",\n        \"postalCodeFormat\": \"MF.json\",\n        \"alpha2\": \"MF\",\n        \"alpha3\": \"MAF\",\n        \"numeric3\": \"663\"\n    },\n    \"PM\": {\n        \"countryName\": \"Saint Pierre and Miquelon\",\n        \"postalCodeFormat\": \"PM.json\",\n        \"alpha2\": \"PM\",\n        \"alpha3\": \"SPM\",\n        \"numeric3\": \"666\"\n    },\n    \"VC\": {\n        \"countryName\": \"Saint Vincent and Grenadines\",\n        \"postalCodeFormat\": \"VC.json\",\n        \"alpha2\": \"VC\",\n        \"alpha3\": \"VCT\",\n        \"numeric3\": \"670\"\n    },\n    \"WS\": {\n        \"countryName\": \"Samoa\",\n        \"postalCodeFormat\": \"WS.json\",\n        \"alpha2\": \"WS\",\n        \"alpha3\": \"WSM\",\n        \"numeric3\": \"882\"\n    },\n    \"SM\": {\n        \"countryName\": \"San Marino\",\n        \"postalCodeFormat\": \"SM.json\",\n        \"alpha2\": \"SM\",\n        \"alpha3\": \"SMR\",\n        \"numeric3\": \"674\"\n    },\n    \"ST\": {\n        \"countryName\": \"Sao Tome and Principe\",\n        \"alpha2\": \"ST\",\n        \"alpha3\": \"STP\",\n        \"numeric3\": \"678\"\n    },\n    \"SA\": {\n        \"countryName\": \"Saudi Arabia\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"SA\",\n        \"alpha3\": \"SAU\",\n        \"numeric3\": \"682\"\n    },\n    \"SN\": {\n        \"countryName\": \"Senegal\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"SN\",\n        \"alpha3\": \"SEN\",\n        \"numeric3\": \"686\"\n    },\n    \"RS\": {\n        \"countryName\": \"Serbia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"RS\",\n        \"alpha3\": \"SRB\",\n        \"numeric3\": \"688\"\n    },\n    \"SC\": {\n        \"countryName\": \"Seychelles\",\n        \"alpha2\": \"SC\",\n        \"alpha3\": \"SYC\",\n        \"numeric3\": \"690\"\n    },\n    \"SL\": {\n        \"countryName\": \"Sierra Leone\",\n        \"alpha2\": \"SL\",\n        \"alpha3\": \"SLE\",\n        \"numeric3\": \"694\"\n    },\n    \"SG\": {\n        \"countryName\": \"Singapore\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"SG\",\n        \"alpha3\": \"SGP\",\n        \"numeric3\": \"702\"\n    },\n    \"SK\": {\n        \"countryName\": \"Slovakia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"SK\",\n        \"alpha3\": \"SVK\",\n        \"numeric3\": \"703\"\n    },\n    \"SI\": {\n        \"countryName\": \"Slovenia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"SI\",\n        \"alpha3\": \"SVN\",\n        \"numeric3\": \"705\"\n    },\n    \"SB\": {\n        \"countryName\": \"Solomon Islands\",\n        \"alpha2\": \"SB\",\n        \"alpha3\": \"SLB\",\n        \"numeric3\": \"90\"\n    },\n    \"SO\": {\n        \"countryName\": \"Somalia\",\n        \"postalCodeFormat\": \"SO.json\",\n        \"alpha2\": \"SO\",\n        \"alpha3\": \"SOM\",\n        \"numeric3\": \"706\"\n    },\n    \"ZA\": {\n        \"countryName\": \"South Africa\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"ZA\",\n        \"alpha3\": \"ZAF\",\n        \"numeric3\": \"710\"\n    },\n    \"GS\": {\n        \"countryName\": \"South Georgia and the South Sandwich Islands\",\n        \"postalCodeFormat\": \"GS.json\",\n        \"alpha2\": \"GS\",\n        \"alpha3\": \"SGS\",\n        \"numeric3\": \"239\"\n    },\n    \"SS\": {\n        \"countryName\": \"South Sudan\",\n        \"alpha2\": \"SS\",\n        \"alpha3\": \"SSD\",\n        \"numeric3\": \"728\"\n    },\n    \"ES\": {\n        \"countryName\": \"Spain\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"ES\",\n        \"alpha3\": \"ESP\",\n        \"numeric3\": \"724\"\n    },\n    \"LK\": {\n        \"countryName\": \"Sri Lanka\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"LK\",\n        \"alpha3\": \"LKA\",\n        \"numeric3\": \"144\"\n    },\n    \"SD\": {\n        \"countryName\": \"Sudan\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"SD\",\n        \"alpha3\": \"SDN\",\n        \"numeric3\": \"736\"\n    },\n    \"SR\": {\n        \"countryName\": \"Suriname *\",\n        \"alpha2\": \"SR\",\n        \"alpha3\": \"SUR\",\n        \"numeric3\": \"740\"\n    },\n    \"SJ\": {\n        \"countryName\": \"Svalbard and Jan Mayen Islands\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"SJ\",\n        \"alpha3\": \"SJM\",\n        \"numeric3\": \"744\"\n    },\n    \"SZ\": {\n        \"countryName\": \"Swaziland\",\n        \"postalCodeFormat\": \"SZ.json\",\n        \"alpha2\": \"SZ\",\n        \"alpha3\": \"SWZ\",\n        \"numeric3\": \"748\"\n    },\n    \"SE\": {\n        \"countryName\": \"Sweden\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"SE\",\n        \"alpha3\": \"SWE\",\n        \"numeric3\": \"752\"\n    },\n    \"CH\": {\n        \"countryName\": \"Switzerland\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"CH\",\n        \"alpha3\": \"CHE\",\n        \"numeric3\": \"756\"\n    },\n    \"SY\": {\n        \"countryName\": \"Syrian Arab Republic (Syria)\",\n        \"alpha2\": \"SY\",\n        \"alpha3\": \"SYR\",\n        \"numeric3\": \"760\"\n    },\n    \"TW\": {\n        \"countryName\": \"Taiwan, Republic of China\",\n        \"postalCodeFormat\": \"TW.json\",\n        \"alpha2\": \"TW\",\n        \"alpha3\": \"TWN\",\n        \"numeric3\": \"158\"\n    },\n    \"TJ\": {\n        \"countryName\": \"Tajikistan\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"TJ\",\n        \"alpha3\": \"TJK\",\n        \"numeric3\": \"762\"\n    },\n    \"TZ\": {\n        \"countryName\": \"Tanzania *, United Republic of\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"TZ\",\n        \"alpha3\": \"TZA\",\n        \"numeric3\": \"834\"\n    },\n    \"TH\": {\n        \"countryName\": \"Thailand\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"TH\",\n        \"alpha3\": \"THA\",\n        \"numeric3\": \"764\"\n    },\n    \"TL\": {\n        \"countryName\": \"Timor-Leste\",\n        \"alpha2\": \"TL\",\n        \"alpha3\": \"TLS\",\n        \"numeric3\": \"626\"\n    },\n    \"TG\": {\n        \"countryName\": \"Togo\",\n        \"alpha2\": \"TG\",\n        \"alpha3\": \"TGO\",\n        \"numeric3\": \"768\"\n    },\n    \"TK\": {\n        \"countryName\": \"Tokelau\",\n        \"alpha2\": \"TK\",\n        \"alpha3\": \"TKL\",\n        \"numeric3\": \"772\"\n    },\n    \"TO\": {\n        \"countryName\": \"Tonga\",\n        \"alpha2\": \"TO\",\n        \"alpha3\": \"TON\",\n        \"numeric3\": \"776\"\n    },\n    \"TT\": {\n        \"countryName\": \"Trinidad and Tobago\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"TT\",\n        \"alpha3\": \"TTO\",\n        \"numeric3\": \"780\"\n    },\n    \"TN\": {\n        \"countryName\": \"Tunisia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"TN\",\n        \"alpha3\": \"TUN\",\n        \"numeric3\": \"788\"\n    },\n    \"TR\": {\n        \"countryName\": \"Turkey\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"TR\",\n        \"alpha3\": \"TUR\",\n        \"numeric3\": \"792\"\n    },\n    \"TM\": {\n        \"countryName\": \"Turkmenistan\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"TM\",\n        \"alpha3\": \"TKM\",\n        \"numeric3\": \"795\"\n    },\n    \"TC\": {\n        \"countryName\": \"Turks and Caicos Islands\",\n        \"postalCodeFormat\": \"TC.json\",\n        \"alpha2\": \"TC\",\n        \"alpha3\": \"TCA\",\n        \"numeric3\": \"796\"\n    },\n    \"TV\": {\n        \"countryName\": \"Tuvalu\",\n        \"alpha2\": \"TV\",\n        \"alpha3\": \"TUV\",\n        \"numeric3\": \"798\"\n    },\n    \"UG\": {\n        \"countryName\": \"Uganda\",\n        \"alpha2\": \"UG\",\n        \"alpha3\": \"UGA\",\n        \"numeric3\": \"800\"\n    },\n    \"UA\": {\n        \"countryName\": \"Ukraine\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"UA\",\n        \"alpha3\": \"UKR\",\n        \"numeric3\": \"804\"\n    },\n    \"AE\": {\n        \"countryName\": \"United Arab Emirates\",\n        \"alpha2\": \"AE\",\n        \"alpha3\": \"ARE\",\n        \"numeric3\": \"784\"\n    },\n    \"GB\": {\n        \"countryName\": \"United Kingdom\",\n        \"postalCodeFormat\": \"GB.json\",\n        \"alpha2\": \"GB\",\n        \"alpha3\": \"GBR\",\n        \"numeric3\": \"826\"\n    },\n    \"US\": {\n        \"countryName\": \"United States of America\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"US\",\n        \"alpha3\": \"USA\",\n        \"numeric3\": \"840\"\n    },\n    \"UM\": {\n        \"countryName\": \"United States Minor Outlying Islands\",\n        \"alpha2\": \"UM\",\n        \"alpha3\": \"UMI\",\n        \"numeric3\": \"581\"\n    },\n    \"UY\": {\n        \"countryName\": \"Uruguay\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"UY\",\n        \"alpha3\": \"URY\",\n        \"numeric3\": \"858\"\n    },\n    \"UZ\": {\n        \"countryName\": \"Uzbekistan\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"UZ\",\n        \"alpha3\": \"UZB\",\n        \"numeric3\": \"860\"\n    },\n    \"VU\": {\n        \"countryName\": \"Vanuatu\",\n        \"alpha2\": \"VU\",\n        \"alpha3\": \"VUT\",\n        \"numeric3\": \"548\"\n    },\n    \"VE\": {\n        \"countryName\": \"Venezuela (Bolivarian Republic of)\",\n        \"postalCodeFormat\": \"VE.json\",\n        \"alpha2\": \"VE\",\n        \"alpha3\": \"VEN\",\n        \"numeric3\": \"862\"\n    },\n    \"VN\": {\n        \"countryName\": \"Viet Nam\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"VN\",\n        \"alpha3\": \"VNM\",\n        \"numeric3\": \"704\"\n    },\n    \"VI\": {\n        \"countryName\": \"Virgin Islands, US\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"VI\",\n        \"alpha3\": \"VIR\",\n        \"numeric3\": \"850\"\n    },\n    \"WF\": {\n        \"countryName\": \"Wallis and Futuna Islands\",\n        \"postalCodeFormat\": \"WF.json\",\n        \"alpha2\": \"WF\",\n        \"alpha3\": \"WLF\",\n        \"numeric3\": \"876\"\n    },\n    \"EH\": {\n        \"countryName\": \"Western Sahara\",\n        \"alpha2\": \"EH\",\n        \"alpha3\": \"ESH\",\n        \"numeric3\": \"732\"\n    },\n    \"YE\": {\n        \"countryName\": \"Yemen\",\n        \"alpha2\": \"YE\",\n        \"alpha3\": \"YEM\",\n        \"numeric3\": \"887\"\n    },\n    \"ZM\": {\n        \"countryName\": \"Zambia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"ZM\",\n        \"alpha3\": \"ZMB\",\n        \"numeric3\": \"894\"\n    },\n    \"ZW\": {\n        \"countryName\": \"Zimbabwe\",\n        \"alpha2\": \"ZW\",\n        \"alpha3\": \"ZWE\",\n        \"numeric3\": \"716\"\n    }\n}\n", "{\n    \"AFG\": {\n        \"countryName\": \"Afghanistan\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"AF\",\n        \"alpha3\": \"AFG\",\n        \"numeric3\": \"4\"\n    },\n    \"ALA\": {\n        \"countryName\": \"Aland Islands\",\n        \"postalCodeFormat\": \"AX.json\",\n        \"alpha2\": \"AX\",\n        \"alpha3\": \"ALA\",\n        \"numeric3\": \"248\"\n    },\n    \"ALB\": {\n        \"countryName\": \"Albania\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"AL\",\n        \"alpha3\": \"ALB\",\n        \"numeric3\": \"8\"\n    },\n    \"DZA\": {\n        \"countryName\": \"Algeria\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"DZ\",\n        \"alpha3\": \"DZA\",\n        \"numeric3\": \"12\"\n    },\n    \"ASM\": {\n        \"countryName\": \"American Samoa\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"AS\",\n        \"alpha3\": \"ASM\",\n        \"numeric3\": \"16\"\n    },\n    \"AND\": {\n        \"countryName\": \"Andorra\",\n        \"postalCodeFormat\": \"AD.json\",\n        \"alpha2\": \"AD\",\n        \"alpha3\": \"AND\",\n        \"numeric3\": \"20\"\n    },\n    \"AGO\": {\n        \"countryName\": \"Angola\",\n        \"alpha2\": \"AO\",\n        \"alpha3\": \"AGO\",\n        \"numeric3\": \"24\"\n    },\n    \"AIA\": {\n        \"countryName\": \"Anguilla\",\n        \"postalCodeFormat\": \"AI.json\",\n        \"alpha2\": \"AI\",\n        \"alpha3\": \"AIA\",\n        \"numeric3\": \"660\"\n    },\n    \"ATA\": {\n        \"countryName\": \"Antarctica\",\n        \"postalCodeFormat\": \"AQ.json\",\n        \"alpha2\": \"AQ\",\n        \"alpha3\": \"ATA\",\n        \"numeric3\": \"10\"\n    },\n    \"ATG\": {\n        \"countryName\": \"Antigua and Barbuda\",\n        \"alpha2\": \"AG\",\n        \"alpha3\": \"ATG\",\n        \"numeric3\": \"28\"\n    },\n    \"ARG\": {\n        \"countryName\": \"Argentina\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"AR\",\n        \"alpha3\": \"ARG\",\n        \"numeric3\": \"32\"\n    },\n    \"ARM\": {\n        \"countryName\": \"Armenia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"AM\",\n        \"alpha3\": \"ARM\",\n        \"numeric3\": \"51\"\n    },\n    \"ABW\": {\n        \"countryName\": \"Aruba\",\n        \"alpha2\": \"AW\",\n        \"alpha3\": \"ABW\",\n        \"numeric3\": \"533\"\n    },\n    \"AUS\": {\n        \"countryName\": \"Australia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"AU\",\n        \"alpha3\": \"AUS\",\n        \"numeric3\": \"36\"\n    },\n    \"AUT\": {\n        \"countryName\": \"Austria\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"AT\",\n        \"alpha3\": \"AUT\",\n        \"numeric3\": \"40\"\n    },\n    \"AZE\": {\n        \"countryName\": \"Azerbaijan\",\n        \"postalCodeFormat\": \"AZ.json\",\n        \"alpha2\": \"AZ\",\n        \"alpha3\": \"AZE\",\n        \"numeric3\": \"31\"\n    },\n    \"BHS\": {\n        \"countryName\": \"Bahamas\",\n        \"alpha2\": \"BS\",\n        \"alpha3\": \"BHS\",\n        \"numeric3\": \"44\"\n    },\n    \"BHR\": {\n        \"countryName\": \"Bahrain\",\n        \"postalCodeFormat\": \"BH.json\",\n        \"alpha2\": \"BH\",\n        \"alpha3\": \"BHR\",\n        \"numeric3\": \"48\"\n    },\n    \"BGD\": {\n        \"countryName\": \"Bangladesh\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"BD\",\n        \"alpha3\": \"BGD\",\n        \"numeric3\": \"50\"\n    },\n    \"BRB\": {\n        \"countryName\": \"Barbados\",\n        \"postalCodeFormat\": \"BB.json\",\n        \"alpha2\": \"BB\",\n        \"alpha3\": \"BRB\",\n        \"numeric3\": \"52\"\n    },\n    \"BLR\": {\n        \"countryName\": \"Belarus\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"BY\",\n        \"alpha3\": \"BLR\",\n        \"numeric3\": \"112\"\n    },\n    \"BEL\": {\n        \"countryName\": \"Belgium\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"BE\",\n        \"alpha3\": \"BEL\",\n        \"numeric3\": \"56\"\n    },\n    \"BLZ\": {\n        \"countryName\": \"Belize\",\n        \"alpha2\": \"BZ\",\n        \"alpha3\": \"BLZ\",\n        \"numeric3\": \"84\"\n    },\n    \"BEN\": {\n        \"countryName\": \"Benin\",\n        \"alpha2\": \"BJ\",\n        \"alpha3\": \"BEN\",\n        \"numeric3\": \"204\"\n    },\n    \"BMU\": {\n        \"countryName\": \"Bermuda\",\n        \"alpha2\": \"BM\",\n        \"alpha3\": \"BMU\",\n        \"numeric3\": \"60\"\n    },\n    \"BTN\": {\n        \"countryName\": \"Bhutan\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"BT\",\n        \"alpha3\": \"BTN\",\n        \"numeric3\": \"64\"\n    },\n    \"BOL\": {\n        \"countryName\": \"Bolivia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"BO\",\n        \"alpha3\": \"BOL\",\n        \"numeric3\": \"68\"\n    },\n    \"BIH\": {\n        \"countryName\": \"Bosnia and Herzegovina\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"BA\",\n        \"alpha3\": \"BIH\",\n        \"numeric3\": \"70\"\n    },\n    \"BWA\": {\n        \"countryName\": \"Botswana\",\n        \"alpha2\": \"BW\",\n        \"alpha3\": \"BWA\",\n        \"numeric3\": \"72\"\n    },\n    \"BVT\": {\n        \"countryName\": \"Bouvet Island\",\n        \"alpha2\": \"BV\",\n        \"alpha3\": \"BVT\",\n        \"numeric3\": \"74\"\n    },\n    \"BRA\": {\n        \"countryName\": \"Brazil\",\n        \"postalCodeFormat\": \"8Digits.json\",\n        \"alpha2\": \"BR\",\n        \"alpha3\": \"BRA\",\n        \"numeric3\": \"76\"\n    },\n    \"VGB\": {\n        \"countryName\": \"British Virgin Islands\",\n        \"postalCodeFormat\": \"VG.json\",\n        \"alpha2\": \"VG\",\n        \"alpha3\": \"VGB\",\n        \"numeric3\": \"92\"\n    },\n    \"IOT\": {\n        \"countryName\": \"British Indian Ocean Territory\",\n        \"postalCodeFormat\": \"IO.json\",\n        \"alpha2\": \"IO\",\n        \"alpha3\": \"IOT\",\n        \"numeric3\": \"86\"\n    },\n    \"BRN\": {\n        \"countryName\": \"Brunei Darussalam\",\n        \"postalCodeFormat\": \"BN.json\",\n        \"alpha2\": \"BN\",\n        \"alpha3\": \"BRN\",\n        \"numeric3\": \"96\"\n    },\n    \"BGR\": {\n        \"countryName\": \"Bulgaria\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"BG\",\n        \"alpha3\": \"BGR\",\n        \"numeric3\": \"100\"\n    },\n    \"BFA\": {\n        \"countryName\": \"Burkina Faso\",\n        \"alpha2\": \"BF\",\n        \"alpha3\": \"BFA\",\n        \"numeric3\": \"854\"\n    },\n    \"BDI\": {\n        \"countryName\": \"Burundi\",\n        \"alpha2\": \"BI\",\n        \"alpha3\": \"BDI\",\n        \"numeric3\": \"108\"\n    },\n    \"KHM\": {\n        \"countryName\": \"Cambodia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"KH\",\n        \"alpha3\": \"KHM\",\n        \"numeric3\": \"116\"\n    },\n    \"CMR\": {\n        \"countryName\": \"Cameroon\",\n        \"alpha2\": \"CM\",\n        \"alpha3\": \"CMR\",\n        \"numeric3\": \"120\"\n    },\n    \"CAN\": {\n        \"countryName\": \"Canada\",\n        \"postalCodeFormat\": \"CA.json\",\n        \"alpha2\": \"CA\",\n        \"alpha3\": \"CAN\",\n        \"numeric3\": \"124\"\n    },\n    \"CPV\": {\n        \"countryName\": \"Cape Verde\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"CV\",\n        \"alpha3\": \"CPV\",\n        \"numeric3\": \"132\"\n    },\n    \"CYM\": {\n        \"countryName\": \"Cayman Islands\",\n        \"postalCodeFormat\": \"KY.json\",\n        \"alpha2\": \"KY\",\n        \"alpha3\": \"CYM\",\n        \"numeric3\": \"136\"\n    },\n    \"CAF\": {\n        \"countryName\": \"Central African Republic\",\n        \"alpha2\": \"CF\",\n        \"alpha3\": \"CAF\",\n        \"numeric3\": \"140\"\n    },\n    \"TCD\": {\n        \"countryName\": \"Chad\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"TD\",\n        \"alpha3\": \"TCD\",\n        \"numeric3\": \"148\"\n    },\n    \"CHL\": {\n        \"countryName\": \"Chile\",\n        \"postalCodeFormat\": \"7Digits.json\",\n        \"alpha2\": \"CL\",\n        \"alpha3\": \"CHL\",\n        \"numeric3\": \"152\"\n    },\n    \"CHN\": {\n        \"countryName\": \"China\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"CN\",\n        \"alpha3\": \"CHN\",\n        \"numeric3\": \"156\"\n    },\n    \"HKG\": {\n        \"countryName\": \"Hong Kong, Special Administrative Region of China\",\n        \"alpha2\": \"HK\",\n        \"alpha3\": \"HKG\",\n        \"numeric3\": \"344\"\n    },\n    \"MAC\": {\n        \"countryName\": \"Macao, Special Administrative Region of China\",\n        \"alpha2\": \"MO\",\n        \"alpha3\": \"MAC\",\n        \"numeric3\": \"446\"\n    },\n    \"CXR\": {\n        \"countryName\": \"Christmas Island\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"CX\",\n        \"alpha3\": \"CXR\",\n        \"numeric3\": \"162\"\n    },\n    \"CCK\": {\n        \"countryName\": \"Cocos (Keeling) Islands\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"CC\",\n        \"alpha3\": \"CCK\",\n        \"numeric3\": \"166\"\n    },\n    \"COL\": {\n        \"countryName\": \"Colombia\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"CO\",\n        \"alpha3\": \"COL\",\n        \"numeric3\": \"170\"\n    },\n    \"COM\": {\n        \"countryName\": \"Comoros\",\n        \"alpha2\": \"KM\",\n        \"alpha3\": \"COM\",\n        \"numeric3\": \"174\"\n    },\n    \"COG\": {\n        \"countryName\": \"Congo (Brazzaville)\",\n        \"alpha2\": \"CG\",\n        \"alpha3\": \"COG\",\n        \"numeric3\": \"178\"\n    },\n    \"COD\": {\n        \"countryName\": \"Congo, Democratic Republic of the\",\n        \"alpha2\": \"CD\",\n        \"alpha3\": \"COD\",\n        \"numeric3\": \"180\"\n    },\n    \"COK\": {\n        \"countryName\": \"Cook Islands\",\n        \"alpha2\": \"CK\",\n        \"alpha3\": \"COK\",\n        \"numeric3\": \"184\"\n    },\n    \"CRI\": {\n        \"countryName\": \"Costa Rica\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"CR\",\n        \"alpha3\": \"CRI\",\n        \"numeric3\": \"188\"\n    },\n    \"CIV\": {\n        \"countryName\": \"Côte d'Ivoire\",\n        \"alpha2\": \"CI\",\n        \"alpha3\": \"CIV\",\n        \"numeric3\": \"384\"\n    },\n    \"HRV\": {\n        \"countryName\": \"Croatia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"HR\",\n        \"alpha3\": \"HRV\",\n        \"numeric3\": \"191\"\n    },\n    \"CUB\": {\n        \"countryName\": \"Cuba\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"CU\",\n        \"alpha3\": \"CUB\",\n        \"numeric3\": \"192\"\n    },\n    \"CYP\": {\n        \"countryName\": \"Cyprus\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"CY\",\n        \"alpha3\": \"CYP\",\n        \"numeric3\": \"196\"\n    },\n    \"CZE\": {\n        \"countryName\": \"Czech Republic\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"CZ\",\n        \"alpha3\": \"CZE\",\n        \"numeric3\": \"203\"\n    },\n    \"DNK\": {\n        \"countryName\": \"Denmark\",\n        \"postalCodeFormat\": \"DK.json\",\n        \"alpha2\": \"DK\",\n        \"alpha3\": \"DNK\",\n        \"numeric3\": \"208\"\n    },\n    \"DJI\": {\n        \"countryName\": \"Djibouti\",\n        \"alpha2\": \"DJ\",\n        \"alpha3\": \"DJI\",\n        \"numeric3\": \"262\"\n    },\n    \"DMA\": {\n        \"countryName\": \"Dominica\",\n        \"alpha2\": \"DM\",\n        \"alpha3\": \"DMA\",\n        \"numeric3\": \"212\"\n    },\n    \"DOM\": {\n        \"countryName\": \"Dominican Republic\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"DO\",\n        \"alpha3\": \"DOM\",\n        \"numeric3\": \"214\"\n    },\n    \"ECU\": {\n        \"countryName\": \"Ecuador\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"EC\",\n        \"alpha3\": \"ECU\",\n        \"numeric3\": \"218\"\n    },\n    \"EGY\": {\n        \"countryName\": \"Egypt\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"EG\",\n        \"alpha3\": \"EGY\",\n        \"numeric3\": \"818\"\n    },\n    \"SLV\": {\n        \"countryName\": \"El Salvador\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"SV\",\n        \"alpha3\": \"SLV\",\n        \"numeric3\": \"222\"\n    },\n    \"GNQ\": {\n        \"countryName\": \"Equatorial Guinea\",\n        \"alpha2\": \"GQ\",\n        \"alpha3\": \"GNQ\",\n        \"numeric3\": \"226\"\n    },\n    \"ERI\": {\n        \"countryName\": \"Eritrea\",\n        \"alpha2\": \"ER\",\n        \"alpha3\": \"ERI\",\n        \"numeric3\": \"232\"\n    },\n    \"EST\": {\n        \"countryName\": \"Estonia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"EE\",\n        \"alpha3\": \"EST\",\n        \"numeric3\": \"233\"\n    },\n    \"ETH\": {\n        \"countryName\": \"Ethiopia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"ET\",\n        \"alpha3\": \"ETH\",\n        \"numeric3\": \"231\"\n    },\n    \"FLK\": {\n        \"countryName\": \"Falkland Islands (Malvinas)\",\n        \"postalCodeFormat\": \"FK.json\",\n        \"alpha2\": \"FK\",\n        \"alpha3\": \"FLK\",\n        \"numeric3\": \"238\"\n    },\n    \"FRO\": {\n        \"countryName\": \"Faroe Islands\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"FO\",\n        \"alpha3\": \"FRO\",\n        \"numeric3\": \"234\"\n    },\n    \"FJI\": {\n        \"countryName\": \"Fiji\",\n        \"alpha2\": \"FJ\",\n        \"alpha3\": \"FJI\",\n        \"numeric3\": \"242\"\n    },\n    \"FIN\": {\n        \"countryName\": \"Finland\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"FI\",\n        \"alpha3\": \"FIN\",\n        \"numeric3\": \"246\"\n    },\n    \"FRA\": {\n        \"countryName\": \"France\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"FR\",\n        \"alpha3\": \"FRA\",\n        \"numeric3\": \"250\"\n    },\n    \"GUF\": {\n        \"countryName\": \"French Guiana\",\n        \"postalCodeFormat\": \"GF.json\",\n        \"alpha2\": \"GF\",\n        \"alpha3\": \"GUF\",\n        \"numeric3\": \"254\"\n    },\n    \"PYF\": {\n        \"countryName\": \"French Polynesia\",\n        \"postalCodeFormat\": \"PF.json\",\n        \"alpha2\": \"PF\",\n        \"alpha3\": \"PYF\",\n        \"numeric3\": \"258\"\n    },\n    \"ATF\": {\n        \"countryName\": \"French Southern Territories\",\n        \"alpha2\": \"TF\",\n        \"alpha3\": \"ATF\",\n        \"numeric3\": \"260\"\n    },\n    \"GAB\": {\n        \"countryName\": \"Gabon\",\n        \"alpha2\": \"GA\",\n        \"alpha3\": \"GAB\",\n        \"numeric3\": \"266\"\n    },\n    \"GMB\": {\n        \"countryName\": \"Gambia\",\n        \"alpha2\": \"GM\",\n        \"alpha3\": \"GMB\",\n        \"numeric3\": \"270\"\n    },\n    \"GEO\": {\n        \"countryName\": \"Georgia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"GE\",\n        \"alpha3\": \"GEO\",\n        \"numeric3\": \"268\"\n    },\n    \"DEU\": {\n        \"countryName\": \"Germany\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"DE\",\n        \"alpha3\": \"DEU\",\n        \"numeric3\": \"276\"\n    },\n    \"GHA\": {\n        \"countryName\": \"Ghana\",\n        \"alpha2\": \"GH\",\n        \"alpha3\": \"GHA\",\n        \"numeric3\": \"288\"\n    },\n    \"GIB\": {\n        \"countryName\": \"Gibraltar\",\n        \"postalCodeFormat\": \"GI.json\",\n        \"alpha2\": \"GI\",\n        \"alpha3\": \"GIB\",\n        \"numeric3\": \"292\"\n    },\n    \"GRC\": {\n        \"countryName\": \"Greece\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"GR\",\n        \"alpha3\": \"GRC\",\n        \"numeric3\": \"300\"\n    },\n    \"GRL\": {\n        \"countryName\": \"Greenland\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"GL\",\n        \"alpha3\": \"GRL\",\n        \"numeric3\": \"304\"\n    },\n    \"GRD\": {\n        \"countryName\": \"Grenada\",\n        \"alpha2\": \"GD\",\n        \"alpha3\": \"GRD\",\n        \"numeric3\": \"308\"\n    },\n    \"GLP\": {\n        \"countryName\": \"Guadeloupe\",\n        \"postalCodeFormat\": \"GP.json\",\n        \"alpha2\": \"GP\",\n        \"alpha3\": \"GLP\",\n        \"numeric3\": \"312\"\n    },\n    \"GUM\": {\n        \"countryName\": \"Guam\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"GU\",\n        \"alpha3\": \"GUM\",\n        \"numeric3\": \"316\"\n    },\n    \"GTM\": {\n        \"countryName\": \"Guatemala\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"GT\",\n        \"alpha3\": \"GTM\",\n        \"numeric3\": \"320\"\n    },\n    \"GGY\": {\n        \"countryName\": \"Guernsey\",\n        \"postalCodeFormat\": \"GG.json\",\n        \"alpha2\": \"GG\",\n        \"alpha3\": \"GGY\",\n        \"numeric3\": \"831\"\n    },\n    \"GIN\": {\n        \"countryName\": \"Guinea\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"GN\",\n        \"alpha3\": \"GIN\",\n        \"numeric3\": \"324\"\n    },\n    \"GNB\": {\n        \"countryName\": \"Guinea-Bissau\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"GW\",\n        \"alpha3\": \"GNB\",\n        \"numeric3\": \"624\"\n    },\n    \"GUY\": {\n        \"countryName\": \"Guyana\",\n        \"alpha2\": \"GY\",\n        \"alpha3\": \"GUY\",\n        \"numeric3\": \"328\"\n    },\n    \"HTI\": {\n        \"countryName\": \"Haiti\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"HT\",\n        \"alpha3\": \"HTI\",\n        \"numeric3\": \"332\"\n    },\n    \"HMD\": {\n        \"countryName\": \"Heard Island and Mcdonald Islands\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"HM\",\n        \"alpha3\": \"HMD\",\n        \"numeric3\": \"334\"\n    },\n    \"VAT\": {\n        \"countryName\": \"Holy See (Vatican City State)\",\n        \"postalCodeFormat\": \"VA.json\",\n        \"alpha2\": \"VA\",\n        \"alpha3\": \"VAT\",\n        \"numeric3\": \"336\"\n    },\n    \"HND\": {\n        \"countryName\": \"Honduras\",\n        \"postalCodeFormat\": \"HN.json\",\n        \"alpha2\": \"HN\",\n        \"alpha3\": \"HND\",\n        \"numeric3\": \"340\"\n    },\n    \"HUN\": {\n        \"countryName\": \"Hungary\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"HU\",\n        \"alpha3\": \"HUN\",\n        \"numeric3\": \"348\"\n    },\n    \"ISL\": {\n        \"countryName\": \"Iceland\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"IS\",\n        \"alpha3\": \"ISL\",\n        \"numeric3\": \"352\"\n    },\n    \"IND\": {\n        \"countryName\": \"India\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"IN\",\n        \"alpha3\": \"IND\",\n        \"numeric3\": \"356\"\n    },\n    \"IDN\": {\n        \"countryName\": \"Indonesia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"ID\",\n        \"alpha3\": \"IDN\",\n        \"numeric3\": \"360\"\n    },\n    \"IRN\": {\n        \"countryName\": \"Iran, Islamic Republic of\",\n        \"postalCodeFormat\": \"10Digits.json\",\n        \"alpha2\": \"IR\",\n        \"alpha3\": \"IRN\",\n        \"numeric3\": \"364\"\n    },\n    \"IRQ\": {\n        \"countryName\": \"Iraq\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"IQ\",\n        \"alpha3\": \"IRQ\",\n        \"numeric3\": \"368\"\n    },\n    \"IRL\": {\n        \"countryName\": \"Ireland\",\n        \"postalCodeFormat\": \"IE.json\",\n        \"alpha2\": \"IE\",\n        \"alpha3\": \"IRL\",\n        \"numeric3\": \"372\"\n    },\n    \"IMN\": {\n        \"countryName\": \"Isle of Man\",\n        \"postalCodeFormat\": \"IM.json\",\n        \"alpha2\": \"IM\",\n        \"alpha3\": \"IMN\",\n        \"numeric3\": \"833\"\n    },\n    \"ISR\": {\n        \"countryName\": \"Israel\",\n        \"postalCodeFormat\": \"7Digits.json\",\n        \"alpha2\": \"IL\",\n        \"alpha3\": \"ISR\",\n        \"numeric3\": \"376\"\n    },\n    \"ITA\": {\n        \"countryName\": \"Italy\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"IT\",\n        \"alpha3\": \"ITA\",\n        \"numeric3\": \"380\"\n    },\n    \"JAM\": {\n        \"countryName\": \"Jamaica\",\n        \"postalCodeFormat\": \"2Digits.json\",\n        \"alpha2\": \"JM\",\n        \"alpha3\": \"JAM\",\n        \"numeric3\": \"388\"\n    },\n    \"JPN\": {\n        \"countryName\": \"Japan\",\n        \"postalCodeFormat\": \"7Digits.json\",\n        \"alpha2\": \"JP\",\n        \"alpha3\": \"JPN\",\n        \"numeric3\": \"392\"\n    },\n    \"JEY\": {\n        \"countryName\": \"Jersey\",\n        \"postalCodeFormat\": \"JE.json\",\n        \"alpha2\": \"JE\",\n        \"alpha3\": \"JEY\",\n        \"numeric3\": \"832\"\n    },\n    \"JOR\": {\n        \"countryName\": \"Jordan\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"JO\",\n        \"alpha3\": \"JOR\",\n        \"numeric3\": \"400\"\n    },\n    \"KAZ\": {\n        \"countryName\": \"Kazakhstan\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"KZ\",\n        \"alpha3\": \"KAZ\",\n        \"numeric3\": \"398\"\n    },\n    \"KEN\": {\n        \"countryName\": \"Kenya\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"KE\",\n        \"alpha3\": \"KEN\",\n        \"numeric3\": \"404\"\n    },\n    \"KIR\": {\n        \"countryName\": \"Kiribati\",\n        \"alpha2\": \"KI\",\n        \"alpha3\": \"KIR\",\n        \"numeric3\": \"296\"\n    },\n    \"PRK\": {\n        \"countryName\": \"Korea, Democratic People's Republic of\",\n        \"alpha2\": \"KP\",\n        \"alpha3\": \"PRK\",\n        \"numeric3\": \"408\"\n    },\n    \"KOR\": {\n        \"countryName\": \"Korea, Republic of\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"KR\",\n        \"alpha3\": \"KOR\",\n        \"numeric3\": \"410\"\n    },\n    \"KWT\": {\n        \"countryName\": \"Kuwait\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"KW\",\n        \"alpha3\": \"KWT\",\n        \"numeric3\": \"414\"\n    },\n    \"KGZ\": {\n        \"countryName\": \"Kyrgyzstan\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"KG\",\n        \"alpha3\": \"KGZ\",\n        \"numeric3\": \"417\"\n    },\n    \"LAO\": {\n        \"countryName\": \"Lao PDR\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"LA\",\n        \"alpha3\": \"LAO\",\n        \"numeric3\": \"418\"\n    },\n    \"LVA\": {\n        \"countryName\": \"Latvia\",\n        \"postalCodeFormat\": \"LV.json\",\n        \"alpha2\": \"LV\",\n        \"alpha3\": \"LVA\",\n        \"numeric3\": \"428\"\n    },\n    \"LBN\": {\n        \"countryName\": \"Lebanon\",\n        \"postalCodeFormat\": \"LB.json\",\n        \"alpha2\": \"LB\",\n        \"alpha3\": \"LBN\",\n        \"numeric3\": \"422\"\n    },\n    \"LSO\": {\n        \"countryName\": \"Lesotho\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"LS\",\n        \"alpha3\": \"LSO\",\n        \"numeric3\": \"426\"\n    },\n    \"LBR\": {\n        \"countryName\": \"Liberia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"LR\",\n        \"alpha3\": \"LBR\",\n        \"numeric3\": \"430\"\n    },\n    \"LBY\": {\n        \"countryName\": \"Libya\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"LY\",\n        \"alpha3\": \"LBY\",\n        \"numeric3\": \"434\"\n    },\n    \"LIE\": {\n        \"countryName\": \"Liechtenstein\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"LI\",\n        \"alpha3\": \"LIE\",\n        \"numeric3\": \"438\"\n    },\n    \"LTU\": {\n        \"countryName\": \"Lithuania\",\n        \"postalCodeFormat\": \"LT.json\",\n        \"alpha2\": \"LT\",\n        \"alpha3\": \"LTU\",\n        \"numeric3\": \"440\"\n    },\n    \"LUX\": {\n        \"countryName\": \"Luxembourg\",\n        \"postalCodeFormat\": \"LU.json\",\n        \"alpha2\": \"LU\",\n        \"alpha3\": \"LUX\",\n        \"numeric3\": \"442\"\n    },\n    \"MKD\": {\n        \"countryName\": \"Macedonia, Republic of\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"MK\",\n        \"alpha3\": \"MKD\",\n        \"numeric3\": \"807\"\n    },\n    \"MDG\": {\n        \"countryName\": \"Madagascar\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"MG\",\n        \"alpha3\": \"MDG\",\n        \"numeric3\": \"450\"\n    },\n    \"MWI\": {\n        \"countryName\": \"Malawi\",\n        \"alpha2\": \"MW\",\n        \"alpha3\": \"MWI\",\n        \"numeric3\": \"454\"\n    },\n    \"MYS\": {\n        \"countryName\": \"Malaysia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MY\",\n        \"alpha3\": \"MYS\",\n        \"numeric3\": \"458\"\n    },\n    \"MDV\": {\n        \"countryName\": \"Maldives\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MV\",\n        \"alpha3\": \"MDV\",\n        \"numeric3\": \"462\"\n    },\n    \"MLI\": {\n        \"countryName\": \"Mali\",\n        \"alpha2\": \"ML\",\n        \"alpha3\": \"MLI\",\n        \"numeric3\": \"466\"\n    },\n    \"MLT\": {\n        \"countryName\": \"Malta\",\n        \"postalCodeFormat\": \"MT.json\",\n        \"alpha2\": \"MT\",\n        \"alpha3\": \"MLT\",\n        \"numeric3\": \"470\"\n    },\n    \"MHL\": {\n        \"countryName\": \"Marshall Islands\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"MH\",\n        \"alpha3\": \"MHL\",\n        \"numeric3\": \"584\"\n    },\n    \"MTQ\": {\n        \"countryName\": \"Martinique\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MQ\",\n        \"alpha3\": \"MTQ\",\n        \"numeric3\": \"474\"\n    },\n    \"MRT\": {\n        \"countryName\": \"Mauritania\",\n        \"alpha2\": \"MR\",\n        \"alpha3\": \"MRT\",\n        \"numeric3\": \"478\"\n    },\n    \"MUS\": {\n        \"countryName\": \"Mauritius\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MU\",\n        \"alpha3\": \"MUS\",\n        \"numeric3\": \"480\"\n    },\n    \"MYT\": {\n        \"countryName\": \"Mayotte\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"YT\",\n        \"alpha3\": \"MYT\",\n        \"numeric3\": \"175\"\n    },\n    \"MEX\": {\n        \"countryName\": \"Mexico\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MX\",\n        \"alpha3\": \"MEX\",\n        \"numeric3\": \"484\"\n    },\n    \"FSM\": {\n        \"countryName\": \"Micronesia, Federated States of\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"FM\",\n        \"alpha3\": \"FSM\",\n        \"numeric3\": \"583\"\n    },\n    \"MDA\": {\n        \"countryName\": \"Moldova\",\n        \"postalCodeFormat\": \"MD.json\",\n        \"alpha2\": \"MD\",\n        \"alpha3\": \"MDA\",\n        \"numeric3\": \"498\"\n    },\n    \"MCO\": {\n        \"countryName\": \"Monaco\",\n        \"postalCodeFormat\": \"MC.json\",\n        \"alpha2\": \"MC\",\n        \"alpha3\": \"MCO\",\n        \"numeric3\": \"492\"\n    },\n    \"MNG\": {\n        \"countryName\": \"Mongolia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MN\",\n        \"alpha3\": \"MNG\",\n        \"numeric3\": \"496\"\n    },\n    \"MNE\": {\n        \"countryName\": \"Montenegro\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"ME\",\n        \"alpha3\": \"MNE\",\n        \"numeric3\": \"499\"\n    },\n    \"MSR\": {\n        \"countryName\": \"Montserrat\",\n        \"postalCodeFormat\": \"MS.json\",\n        \"alpha2\": \"MS\",\n        \"alpha3\": \"MSR\",\n        \"numeric3\": \"500\"\n    },\n    \"MAR\": {\n        \"countryName\": \"Morocco\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MA\",\n        \"alpha3\": \"MAR\",\n        \"numeric3\": \"504\"\n    },\n    \"MOZ\": {\n        \"countryName\": \"Mozambique\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"MZ\",\n        \"alpha3\": \"MOZ\",\n        \"numeric3\": \"508\"\n    },\n    \"MMR\": {\n        \"countryName\": \"Myanmar\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"MM\",\n        \"alpha3\": \"MMR\",\n        \"numeric3\": \"104\"\n    },\n    \"NAM\": {\n        \"countryName\": \"Namibia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"NA\",\n        \"alpha3\": \"NAM\",\n        \"numeric3\": \"516\"\n    },\n    \"NRU\": {\n        \"countryName\": \"Nauru\",\n        \"alpha2\": \"NR\",\n        \"alpha3\": \"NRU\",\n        \"numeric3\": \"520\"\n    },\n    \"NPL\": {\n        \"countryName\": \"Nepal\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"NP\",\n        \"alpha3\": \"NPL\",\n        \"numeric3\": \"524\"\n    },\n    \"NLD\": {\n        \"countryName\": \"Netherlands\",\n        \"postalCodeFormat\": \"NL.json\",\n        \"alpha2\": \"NL\",\n        \"alpha3\": \"NLD\",\n        \"numeric3\": \"528\"\n    },\n    \"ANT\": {\n        \"countryName\": \"Netherlands Antilles\",\n        \"alpha2\": \"AN\",\n        \"alpha3\": \"ANT\",\n        \"numeric3\": \"530\"\n    },\n    \"NCL\": {\n        \"countryName\": \"New Caledonia\",\n        \"postalCodeFormat\": \"NC.json\",\n        \"alpha2\": \"NC\",\n        \"alpha3\": \"NCL\",\n        \"numeric3\": \"540\"\n    },\n    \"NZL\": {\n        \"countryName\": \"New Zealand\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"NZ\",\n        \"alpha3\": \"NZL\",\n        \"numeric3\": \"554\"\n    },\n    \"NIC\": {\n        \"countryName\": \"Nicaragua\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"NI\",\n        \"alpha3\": \"NIC\",\n        \"numeric3\": \"558\"\n    },\n    \"NER\": {\n        \"countryName\": \"Niger\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"NE\",\n        \"alpha3\": \"NER\",\n        \"numeric3\": \"562\"\n    },\n    \"NGA\": {\n        \"countryName\": \"Nigeria\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"NG\",\n        \"alpha3\": \"NGA\",\n        \"numeric3\": \"566\"\n    },\n    \"NIU\": {\n        \"countryName\": \"Niue\",\n        \"alpha2\": \"NU\",\n        \"alpha3\": \"NIU\",\n        \"numeric3\": \"570\"\n    },\n    \"NFK\": {\n        \"countryName\": \"Norfolk Island\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"NF\",\n        \"alpha3\": \"NFK\",\n        \"numeric3\": \"574\"\n    },\n    \"MNP\": {\n        \"countryName\": \"Northern Mariana Islands\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"MP\",\n        \"alpha3\": \"MNP\",\n        \"numeric3\": \"580\"\n    },\n    \"NOR\": {\n        \"countryName\": \"Norway\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"NO\",\n        \"alpha3\": \"NOR\",\n        \"numeric3\": \"578\"\n    },\n    \"OMN\": {\n        \"countryName\": \"Oman\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"OM\",\n        \"alpha3\": \"OMN\",\n        \"numeric3\": \"512\"\n    },\n    \"PAK\": {\n        \"countryName\": \"Pakistan\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"PK\",\n        \"alpha3\": \"PAK\",\n        \"numeric3\": \"586\"\n    },\n    \"PLW\": {\n        \"countryName\": \"Palau\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"PW\",\n        \"alpha3\": \"PLW\",\n        \"numeric3\": \"585\"\n    },\n    \"PSE\": {\n        \"countryName\": \"Palestinian Territory, Occupied\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"PS\",\n        \"alpha3\": \"PSE\",\n        \"numeric3\": \"275\"\n    },\n    \"PAN\": {\n        \"countryName\": \"Panama\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"PA\",\n        \"alpha3\": \"PAN\",\n        \"numeric3\": \"591\"\n    },\n    \"PNG\": {\n        \"countryName\": \"Papua New Guinea\",\n        \"postalCodeFormat\": \"3Digits.json\",\n        \"alpha2\": \"PG\",\n        \"alpha3\": \"PNG\",\n        \"numeric3\": \"598\"\n    },\n    \"PRY\": {\n        \"countryName\": \"Paraguay\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"PY\",\n        \"alpha3\": \"PRY\",\n        \"numeric3\": \"600\"\n    },\n    \"PER\": {\n        \"countryName\": \"Peru\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"PE\",\n        \"alpha3\": \"PER\",\n        \"numeric3\": \"604\"\n    },\n    \"PHL\": {\n        \"countryName\": \"Philippines\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"PH\",\n        \"alpha3\": \"PHL\",\n        \"numeric3\": \"608\"\n    },\n    \"PCN\": {\n        \"countryName\": \"Pitcairn\",\n        \"postalCodeFormat\": \"PN.json\",\n        \"alpha2\": \"PN\",\n        \"alpha3\": \"PCN\",\n        \"numeric3\": \"612\"\n    },\n    \"POL\": {\n        \"countryName\": \"Poland\",\n        \"postalCodeFormat\": \"PL.json\",\n        \"alpha2\": \"PL\",\n        \"alpha3\": \"POL\",\n        \"numeric3\": \"616\"\n    },\n    \"PRT\": {\n        \"countryName\": \"Portugal\",\n        \"postalCodeFormat\": \"PT.json\",\n        \"alpha2\": \"PT\",\n        \"alpha3\": \"PRT\",\n        \"numeric3\": \"620\"\n    },\n    \"PRI\": {\n        \"countryName\": \"Puerto Rico\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"PR\",\n        \"alpha3\": \"PRI\",\n        \"numeric3\": \"630\"\n    },\n    \"QAT\": {\n        \"countryName\": \"Qatar\",\n        \"alpha2\": \"QA\",\n        \"alpha3\": \"QAT\",\n        \"numeric3\": \"634\"\n    },\n    \"REU\": {\n        \"countryName\": \"Réunion\",\n        \"postalCodeFormat\": \"RE.json\",\n        \"alpha2\": \"RE\",\n        \"alpha3\": \"REU\",\n        \"numeric3\": \"638\"\n    },\n    \"ROU\": {\n        \"countryName\": \"Romania\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"RO\",\n        \"alpha3\": \"ROU\",\n        \"numeric3\": \"642\"\n    },\n    \"RUS\": {\n        \"countryName\": \"Russian Federation\",\n        \"postalCodeFormat\": \"RU.json\",\n        \"alpha2\": \"RU\",\n        \"alpha3\": \"RUS\",\n        \"numeric3\": \"643\"\n    },\n    \"RWA\": {\n        \"countryName\": \"Rwanda\",\n        \"alpha2\": \"RW\",\n        \"alpha3\": \"RWA\",\n        \"numeric3\": \"646\"\n    },\n    \"BLM\": {\n        \"countryName\": \"Saint-Barthélemy\",\n        \"postalCodeFormat\": \"BL.json\",\n        \"alpha2\": \"BL\",\n        \"alpha3\": \"BLM\",\n        \"numeric3\": \"652\"\n    },\n    \"SHN\": {\n        \"countryName\": \"Saint Helena\",\n        \"postalCodeFormat\": \"SH.json\",\n        \"alpha2\": \"SH\",\n        \"alpha3\": \"SHN\",\n        \"numeric3\": \"654\"\n    },\n    \"KNA\": {\n        \"countryName\": \"Saint Kitts and Nevis\",\n        \"alpha2\": \"KN\",\n        \"alpha3\": \"KNA\",\n        \"numeric3\": \"659\"\n    },\n    \"LCA\": {\n        \"countryName\": \"Saint Lucia\",\n        \"postalCodeFormat\": \"LC.json\",\n        \"alpha2\": \"LC\",\n        \"alpha3\": \"LCA\",\n        \"numeric3\": \"662\"\n    },\n    \"MAF\": {\n        \"countryName\": \"Saint-Martin (French part)\",\n        \"postalCodeFormat\": \"MF.json\",\n        \"alpha2\": \"MF\",\n        \"alpha3\": \"MAF\",\n        \"numeric3\": \"663\"\n    },\n    \"SPM\": {\n        \"countryName\": \"Saint Pierre and Miquelon\",\n        \"postalCodeFormat\": \"PM.json\",\n        \"alpha2\": \"PM\",\n        \"alpha3\": \"SPM\",\n        \"numeric3\": \"666\"\n    },\n    \"VCT\": {\n        \"countryName\": \"Saint Vincent and Grenadines\",\n        \"postalCodeFormat\": \"VC.json\",\n        \"alpha2\": \"VC\",\n        \"alpha3\": \"VCT\",\n        \"numeric3\": \"670\"\n    },\n    \"WSM\": {\n        \"countryName\": \"Samoa\",\n        \"postalCodeFormat\": \"WS.json\",\n        \"alpha2\": \"WS\",\n        \"alpha3\": \"WSM\",\n        \"numeric3\": \"882\"\n    },\n    \"SMR\": {\n        \"countryName\": \"San Marino\",\n        \"postalCodeFormat\": \"SM.json\",\n        \"alpha2\": \"SM\",\n        \"alpha3\": \"SMR\",\n        \"numeric3\": \"674\"\n    },\n    \"STP\": {\n        \"countryName\": \"Sao Tome and Principe\",\n        \"alpha2\": \"ST\",\n        \"alpha3\": \"STP\",\n        \"numeric3\": \"678\"\n    },\n    \"SAU\": {\n        \"countryName\": \"Saudi Arabia\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"SA\",\n        \"alpha3\": \"SAU\",\n        \"numeric3\": \"682\"\n    },\n    \"SEN\": {\n        \"countryName\": \"Senegal\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"SN\",\n        \"alpha3\": \"SEN\",\n        \"numeric3\": \"686\"\n    },\n    \"SRB\": {\n        \"countryName\": \"Serbia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"RS\",\n        \"alpha3\": \"SRB\",\n        \"numeric3\": \"688\"\n    },\n    \"SYC\": {\n        \"countryName\": \"Seychelles\",\n        \"alpha2\": \"SC\",\n        \"alpha3\": \"SYC\",\n        \"numeric3\": \"690\"\n    },\n    \"SLE\": {\n        \"countryName\": \"Sierra Leone\",\n        \"alpha2\": \"SL\",\n        \"alpha3\": \"SLE\",\n        \"numeric3\": \"694\"\n    },\n    \"SGP\": {\n        \"countryName\": \"Singapore\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"SG\",\n        \"alpha3\": \"SGP\",\n        \"numeric3\": \"702\"\n    },\n    \"SVK\": {\n        \"countryName\": \"Slovakia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"SK\",\n        \"alpha3\": \"SVK\",\n        \"numeric3\": \"703\"\n    },\n    \"SVN\": {\n        \"countryName\": \"Slovenia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"SI\",\n        \"alpha3\": \"SVN\",\n        \"numeric3\": \"705\"\n    },\n    \"SLB\": {\n        \"countryName\": \"Solomon Islands\",\n        \"alpha2\": \"SB\",\n        \"alpha3\": \"SLB\",\n        \"numeric3\": \"90\"\n    },\n    \"SOM\": {\n        \"countryName\": \"Somalia\",\n        \"postalCodeFormat\": \"SO.json\",\n        \"alpha2\": \"SO\",\n        \"alpha3\": \"SOM\",\n        \"numeric3\": \"706\"\n    },\n    \"ZAF\": {\n        \"countryName\": \"South Africa\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"ZA\",\n        \"alpha3\": \"ZAF\",\n        \"numeric3\": \"710\"\n    },\n    \"SGS\": {\n        \"countryName\": \"South Georgia and the South Sandwich Islands\",\n        \"postalCodeFormat\": \"GS.json\",\n        \"alpha2\": \"GS\",\n        \"alpha3\": \"SGS\",\n        \"numeric3\": \"239\"\n    },\n    \"SSD\": {\n        \"countryName\": \"South Sudan\",\n        \"alpha2\": \"SS\",\n        \"alpha3\": \"SSD\",\n        \"numeric3\": \"728\"\n    },\n    \"ESP\": {\n        \"countryName\": \"Spain\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"ES\",\n        \"alpha3\": \"ESP\",\n        \"numeric3\": \"724\"\n    },\n    \"LKA\": {\n        \"countryName\": \"Sri Lanka\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"LK\",\n        \"alpha3\": \"LKA\",\n        \"numeric3\": \"144\"\n    },\n    \"SDN\": {\n        \"countryName\": \"Sudan\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"SD\",\n        \"alpha3\": \"SDN\",\n        \"numeric3\": \"736\"\n    },\n    \"SUR\": {\n        \"countryName\": \"Suriname *\",\n        \"alpha2\": \"SR\",\n        \"alpha3\": \"SUR\",\n        \"numeric3\": \"740\"\n    },\n    \"SJM\": {\n        \"countryName\": \"Svalbard and Jan Mayen Islands\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"SJ\",\n        \"alpha3\": \"SJM\",\n        \"numeric3\": \"744\"\n    },\n    \"SWZ\": {\n        \"countryName\": \"Swaziland\",\n        \"postalCodeFormat\": \"SZ.json\",\n        \"alpha2\": \"SZ\",\n        \"alpha3\": \"SWZ\",\n        \"numeric3\": \"748\"\n    },\n    \"SWE\": {\n        \"countryName\": \"Sweden\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"SE\",\n        \"alpha3\": \"SWE\",\n        \"numeric3\": \"752\"\n    },\n    \"CHE\": {\n        \"countryName\": \"Switzerland\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"CH\",\n        \"alpha3\": \"CHE\",\n        \"numeric3\": \"756\"\n    },\n    \"SYR\": {\n        \"countryName\": \"Syrian Arab Republic (Syria)\",\n        \"alpha2\": \"SY\",\n        \"alpha3\": \"SYR\",\n        \"numeric3\": \"760\"\n    },\n    \"TWN\": {\n        \"countryName\": \"Taiwan, Republic of China\",\n        \"postalCodeFormat\": \"TW.json\",\n        \"alpha2\": \"TW\",\n        \"alpha3\": \"TWN\",\n        \"numeric3\": \"158\"\n    },\n    \"TJK\": {\n        \"countryName\": \"Tajikistan\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"TJ\",\n        \"alpha3\": \"TJK\",\n        \"numeric3\": \"762\"\n    },\n    \"TZA\": {\n        \"countryName\": \"Tanzania *, United Republic of\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"TZ\",\n        \"alpha3\": \"TZA\",\n        \"numeric3\": \"834\"\n    },\n    \"THA\": {\n        \"countryName\": \"Thailand\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"TH\",\n        \"alpha3\": \"THA\",\n        \"numeric3\": \"764\"\n    },\n    \"TLS\": {\n        \"countryName\": \"Timor-Leste\",\n        \"alpha2\": \"TL\",\n        \"alpha3\": \"TLS\",\n        \"numeric3\": \"626\"\n    },\n    \"TGO\": {\n        \"countryName\": \"Togo\",\n        \"alpha2\": \"TG\",\n        \"alpha3\": \"TGO\",\n        \"numeric3\": \"768\"\n    },\n    \"TKL\": {\n        \"countryName\": \"Tokelau\",\n        \"alpha2\": \"TK\",\n        \"alpha3\": \"TKL\",\n        \"numeric3\": \"772\"\n    },\n    \"TON\": {\n        \"countryName\": \"Tonga\",\n        \"alpha2\": \"TO\",\n        \"alpha3\": \"TON\",\n        \"numeric3\": \"776\"\n    },\n    \"TTO\": {\n        \"countryName\": \"Trinidad and Tobago\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"TT\",\n        \"alpha3\": \"TTO\",\n        \"numeric3\": \"780\"\n    },\n    \"TUN\": {\n        \"countryName\": \"Tunisia\",\n        \"postalCodeFormat\": \"4Digits.json\",\n        \"alpha2\": \"TN\",\n        \"alpha3\": \"TUN\",\n        \"numeric3\": \"788\"\n    },\n    \"TUR\": {\n        \"countryName\": \"Turkey\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"TR\",\n        \"alpha3\": \"TUR\",\n        \"numeric3\": \"792\"\n    },\n    \"TKM\": {\n        \"countryName\": \"Turkmenistan\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"TM\",\n        \"alpha3\": \"TKM\",\n        \"numeric3\": \"795\"\n    },\n    \"TCA\": {\n        \"countryName\": \"Turks and Caicos Islands\",\n        \"postalCodeFormat\": \"TC.json\",\n        \"alpha2\": \"TC\",\n        \"alpha3\": \"TCA\",\n        \"numeric3\": \"796\"\n    },\n    \"TUV\": {\n        \"countryName\": \"Tuvalu\",\n        \"alpha2\": \"TV\",\n        \"alpha3\": \"TUV\",\n        \"numeric3\": \"798\"\n    },\n    \"UGA\": {\n        \"countryName\": \"Uganda\",\n        \"alpha2\": \"UG\",\n        \"alpha3\": \"UGA\",\n        \"numeric3\": \"800\"\n    },\n    \"UKR\": {\n        \"countryName\": \"Ukraine\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"UA\",\n        \"alpha3\": \"UKR\",\n        \"numeric3\": \"804\"\n    },\n    \"ARE\": {\n        \"countryName\": \"United Arab Emirates\",\n        \"alpha2\": \"AE\",\n        \"alpha3\": \"ARE\",\n        \"numeric3\": \"784\"\n    },\n    \"GBR\": {\n        \"countryName\": \"United Kingdom\",\n        \"postalCodeFormat\": \"GB.json\",\n        \"alpha2\": \"GB\",\n        \"alpha3\": \"GBR\",\n        \"numeric3\": \"826\"\n    },\n    \"USA\": {\n        \"countryName\": \"United States of America\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"US\",\n        \"alpha3\": \"USA\",\n        \"numeric3\": \"840\"\n    },\n    \"UMI\": {\n        \"countryName\": \"United States Minor Outlying Islands\",\n        \"alpha2\": \"UM\",\n        \"alpha3\": \"UMI\",\n        \"numeric3\": \"581\"\n    },\n    \"URY\": {\n        \"countryName\": \"Uruguay\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"UY\",\n        \"alpha3\": \"URY\",\n        \"numeric3\": \"858\"\n    },\n    \"UZB\": {\n        \"countryName\": \"Uzbekistan\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"UZ\",\n        \"alpha3\": \"UZB\",\n        \"numeric3\": \"860\"\n    },\n    \"VUT\": {\n        \"countryName\": \"Vanuatu\",\n        \"alpha2\": \"VU\",\n        \"alpha3\": \"VUT\",\n        \"numeric3\": \"548\"\n    },\n    \"VEN\": {\n        \"countryName\": \"Venezuela (Bolivarian Republic of)\",\n        \"postalCodeFormat\": \"VE.json\",\n        \"alpha2\": \"VE\",\n        \"alpha3\": \"VEN\",\n        \"numeric3\": \"862\"\n    },\n    \"VNM\": {\n        \"countryName\": \"Viet Nam\",\n        \"postalCodeFormat\": \"6Digits.json\",\n        \"alpha2\": \"VN\",\n        \"alpha3\": \"VNM\",\n        \"numeric3\": \"704\"\n    },\n    \"VIR\": {\n        \"countryName\": \"Virgin Islands, US\",\n        \"postalCodeFormat\": \"US.json\",\n        \"alpha2\": \"VI\",\n        \"alpha3\": \"VIR\",\n        \"numeric3\": \"850\"\n    },\n    \"WLF\": {\n        \"countryName\": \"Wallis and Futuna Islands\",\n        \"postalCodeFormat\": \"WF.json\",\n        \"alpha2\": \"WF\",\n        \"alpha3\": \"WLF\",\n        \"numeric3\": \"876\"\n    },\n    \"ESH\": {\n        \"countryName\": \"Western Sahara\",\n        \"alpha2\": \"EH\",\n        \"alpha3\": \"ESH\",\n        \"numeric3\": \"732\"\n    },\n    \"YEM\": {\n        \"countryName\": \"Yemen\",\n        \"alpha2\": \"YE\",\n        \"alpha3\": \"YEM\",\n        \"numeric3\": \"887\"\n    },\n    \"ZMB\": {\n        \"countryName\": \"Zambia\",\n        \"postalCodeFormat\": \"5Digits.json\",\n        \"alpha2\": \"ZM\",\n        \"alpha3\": \"ZMB\",\n        \"numeric3\": \"894\"\n    },\n    \"ZWE\": {\n        \"countryName\": \"Zimbabwe\",\n        \"alpha2\": \"ZW\",\n        \"alpha3\": \"ZWE\",\n        \"numeric3\": \"716\"\n    }\n}", "module.exports = false;\n\n", "module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}", "if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\n\r\nvar isWindows = process.platform === 'win32';\r\nvar util = require('util');\r\n\r\n\r\n// resolves . and .. elements in a path array with directory names there\r\n// must be no slashes or device names (c:\\) in the array\r\n// (so also no leading and trailing slashes - it does not distinguish\r\n// relative and absolute paths)\r\nfunction normalizeArray(parts, allowAboveRoot) {\r\n  var res = [];\r\n  for (var i = 0; i < parts.length; i++) {\r\n    var p = parts[i];\r\n\r\n    // ignore empty parts\r\n    if (!p || p === '.')\r\n      continue;\r\n\r\n    if (p === '..') {\r\n      if (res.length && res[res.length - 1] !== '..') {\r\n        res.pop();\r\n      } else if (allowAboveRoot) {\r\n        res.push('..');\r\n      }\r\n    } else {\r\n      res.push(p);\r\n    }\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\n// returns an array with empty elements removed from either end of the input\r\n// array or the original array if no elements need to be removed\r\nfunction trimArray(arr) {\r\n  var lastIndex = arr.length - 1;\r\n  var start = 0;\r\n  for (; start <= lastIndex; start++) {\r\n    if (arr[start])\r\n      break;\r\n  }\r\n\r\n  var end = lastIndex;\r\n  for (; end >= 0; end--) {\r\n    if (arr[end])\r\n      break;\r\n  }\r\n\r\n  if (start === 0 && end === lastIndex)\r\n    return arr;\r\n  if (start > end)\r\n    return [];\r\n  return arr.slice(start, end + 1);\r\n}\r\n\r\n// Regex to split a windows path into three parts: [*, device, slash,\r\n// tail] windows-only\r\nvar splitDeviceRe =\r\n    /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\r\n\r\n// Regex to split the tail part of the above into [*, dir, basename, ext]\r\nvar splitTailRe =\r\n    /^([\\s\\S]*?)((?:\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))(?:[\\\\\\/]*)$/;\r\n\r\nvar win32 = {};\r\n\r\n// Function to split a filename into [root, dir, basename, ext]\r\nfunction win32SplitPath(filename) {\r\n  // Separate device+slash from tail\r\n  var result = splitDeviceRe.exec(filename),\r\n      device = (result[1] || '') + (result[2] || ''),\r\n      tail = result[3] || '';\r\n  // Split the tail into dir, basename and extension\r\n  var result2 = splitTailRe.exec(tail),\r\n      dir = result2[1],\r\n      basename = result2[2],\r\n      ext = result2[3];\r\n  return [device, dir, basename, ext];\r\n}\r\n\r\nfunction win32StatPath(path) {\r\n  var result = splitDeviceRe.exec(path),\r\n      device = result[1] || '',\r\n      isUnc = !!device && device[1] !== ':';\r\n  return {\r\n    device: device,\r\n    isUnc: isUnc,\r\n    isAbsolute: isUnc || !!result[2], // UNC paths are always absolute\r\n    tail: result[3]\r\n  };\r\n}\r\n\r\nfunction normalizeUNCRoot(device) {\r\n  return '\\\\\\\\' + device.replace(/^[\\\\\\/]+/, '').replace(/[\\\\\\/]+/g, '\\\\');\r\n}\r\n\r\n// path.resolve([from ...], to)\r\nwin32.resolve = function() {\r\n  var resolvedDevice = '',\r\n      resolvedTail = '',\r\n      resolvedAbsolute = false;\r\n\r\n  for (var i = arguments.length - 1; i >= -1; i--) {\r\n    var path;\r\n    if (i >= 0) {\r\n      path = arguments[i];\r\n    } else if (!resolvedDevice) {\r\n      path = process.cwd();\r\n    } else {\r\n      // Windows has the concept of drive-specific current working\r\n      // directories. If we've resolved a drive letter but not yet an\r\n      // absolute path, get cwd for that drive. We're sure the device is not\r\n      // an unc path at this points, because unc paths are always absolute.\r\n      path = process.env['=' + resolvedDevice];\r\n      // Verify that a drive-local cwd was found and that it actually points\r\n      // to our drive. If not, default to the drive's root.\r\n      if (!path || path.substr(0, 3).toLowerCase() !==\r\n          resolvedDevice.toLowerCase() + '\\\\') {\r\n        path = resolvedDevice + '\\\\';\r\n      }\r\n    }\r\n\r\n    // Skip empty and invalid entries\r\n    if (!util.isString(path)) {\r\n      throw new TypeError('Arguments to path.resolve must be strings');\r\n    } else if (!path) {\r\n      continue;\r\n    }\r\n\r\n    var result = win32StatPath(path),\r\n        device = result.device,\r\n        isUnc = result.isUnc,\r\n        isAbsolute = result.isAbsolute,\r\n        tail = result.tail;\r\n\r\n    if (device &&\r\n        resolvedDevice &&\r\n        device.toLowerCase() !== resolvedDevice.toLowerCase()) {\r\n      // This path points to another device so it is not applicable\r\n      continue;\r\n    }\r\n\r\n    if (!resolvedDevice) {\r\n      resolvedDevice = device;\r\n    }\r\n    if (!resolvedAbsolute) {\r\n      resolvedTail = tail + '\\\\' + resolvedTail;\r\n      resolvedAbsolute = isAbsolute;\r\n    }\r\n\r\n    if (resolvedDevice && resolvedAbsolute) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Convert slashes to backslashes when `resolvedDevice` points to an UNC\r\n  // root. Also squash multiple slashes into a single one where appropriate.\r\n  if (isUnc) {\r\n    resolvedDevice = normalizeUNCRoot(resolvedDevice);\r\n  }\r\n\r\n  // At this point the path should be resolved to a full absolute path,\r\n  // but handle relative paths to be safe (might happen when process.cwd()\r\n  // fails)\r\n\r\n  // Normalize the tail path\r\n  resolvedTail = normalizeArray(resolvedTail.split(/[\\\\\\/]+/),\r\n                                !resolvedAbsolute).join('\\\\');\r\n\r\n  return (resolvedDevice + (resolvedAbsolute ? '\\\\' : '') + resolvedTail) ||\r\n         '.';\r\n};\r\n\r\n\r\nwin32.normalize = function(path) {\r\n  var result = win32StatPath(path),\r\n      device = result.device,\r\n      isUnc = result.isUnc,\r\n      isAbsolute = result.isAbsolute,\r\n      tail = result.tail,\r\n      trailingSlash = /[\\\\\\/]$/.test(tail);\r\n\r\n  // Normalize the tail path\r\n  tail = normalizeArray(tail.split(/[\\\\\\/]+/), !isAbsolute).join('\\\\');\r\n\r\n  if (!tail && !isAbsolute) {\r\n    tail = '.';\r\n  }\r\n  if (tail && trailingSlash) {\r\n    tail += '\\\\';\r\n  }\r\n\r\n  // Convert slashes to backslashes when `device` points to an UNC root.\r\n  // Also squash multiple slashes into a single one where appropriate.\r\n  if (isUnc) {\r\n    device = normalizeUNCRoot(device);\r\n  }\r\n\r\n  return device + (isAbsolute ? '\\\\' : '') + tail;\r\n};\r\n\r\n\r\nwin32.isAbsolute = function(path) {\r\n  return win32StatPath(path).isAbsolute;\r\n};\r\n\r\nwin32.join = function() {\r\n  var paths = [];\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    var arg = arguments[i];\r\n    if (!util.isString(arg)) {\r\n      throw new TypeError('Arguments to path.join must be strings');\r\n    }\r\n    if (arg) {\r\n      paths.push(arg);\r\n    }\r\n  }\r\n\r\n  var joined = paths.join('\\\\');\r\n\r\n  // Make sure that the joined path doesn't start with two slashes, because\r\n  // normalize() will mistake it for an UNC path then.\r\n  //\r\n  // This step is skipped when it is very clear that the user actually\r\n  // intended to point at an UNC path. This is assumed when the first\r\n  // non-empty string arguments starts with exactly two slashes followed by\r\n  // at least one more non-slash character.\r\n  //\r\n  // Note that for normalize() to treat a path as an UNC path it needs to\r\n  // have at least 2 components, so we don't filter for that here.\r\n  // This means that the user can use join to construct UNC paths from\r\n  // a server name and a share name; for example:\r\n  //   path.join('//server', 'share') -> '\\\\\\\\server\\\\share\\')\r\n  if (!/^[\\\\\\/]{2}[^\\\\\\/]/.test(paths[0])) {\r\n    joined = joined.replace(/^[\\\\\\/]{2,}/, '\\\\');\r\n  }\r\n\r\n  return win32.normalize(joined);\r\n};\r\n\r\n\r\n// path.relative(from, to)\r\n// it will solve the relative path from 'from' to 'to', for instance:\r\n// from = 'C:\\\\orandea\\\\test\\\\aaa'\r\n// to = 'C:\\\\orandea\\\\impl\\\\bbb'\r\n// The output of the function should be: '..\\\\..\\\\impl\\\\bbb'\r\nwin32.relative = function(from, to) {\r\n  from = win32.resolve(from);\r\n  to = win32.resolve(to);\r\n\r\n  // windows is not case sensitive\r\n  var lowerFrom = from.toLowerCase();\r\n  var lowerTo = to.toLowerCase();\r\n\r\n  var toParts = trimArray(to.split('\\\\'));\r\n\r\n  var lowerFromParts = trimArray(lowerFrom.split('\\\\'));\r\n  var lowerToParts = trimArray(lowerTo.split('\\\\'));\r\n\r\n  var length = Math.min(lowerFromParts.length, lowerToParts.length);\r\n  var samePartsLength = length;\r\n  for (var i = 0; i < length; i++) {\r\n    if (lowerFromParts[i] !== lowerToParts[i]) {\r\n      samePartsLength = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (samePartsLength == 0) {\r\n    return to;\r\n  }\r\n\r\n  var outputParts = [];\r\n  for (var i = samePartsLength; i < lowerFromParts.length; i++) {\r\n    outputParts.push('..');\r\n  }\r\n\r\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\r\n\r\n  return outputParts.join('\\\\');\r\n};\r\n\r\n\r\nwin32._makeLong = function(path) {\r\n  // Note: this will *probably* throw somewhere.\r\n  if (!util.isString(path))\r\n    return path;\r\n\r\n  if (!path) {\r\n    return '';\r\n  }\r\n\r\n  var resolvedPath = win32.resolve(path);\r\n\r\n  if (/^[a-zA-Z]\\:\\\\/.test(resolvedPath)) {\r\n    // path is local filesystem path, which needs to be converted\r\n    // to long UNC path.\r\n    return '\\\\\\\\?\\\\' + resolvedPath;\r\n  } else if (/^\\\\\\\\[^?.]/.test(resolvedPath)) {\r\n    // path is network UNC path, which needs to be converted\r\n    // to long UNC path.\r\n    return '\\\\\\\\?\\\\UNC\\\\' + resolvedPath.substring(2);\r\n  }\r\n\r\n  return path;\r\n};\r\n\r\n\r\nwin32.dirname = function(path) {\r\n  var result = win32SplitPath(path),\r\n      root = result[0],\r\n      dir = result[1];\r\n\r\n  if (!root && !dir) {\r\n    // No dirname whatsoever\r\n    return '.';\r\n  }\r\n\r\n  if (dir) {\r\n    // It has a dirname, strip trailing slash\r\n    dir = dir.substr(0, dir.length - 1);\r\n  }\r\n\r\n  return root + dir;\r\n};\r\n\r\n\r\nwin32.basename = function(path, ext) {\r\n  var f = win32SplitPath(path)[2];\r\n  // TODO: make this comparison case-insensitive on windows?\r\n  if (ext && f.substr(-1 * ext.length) === ext) {\r\n    f = f.substr(0, f.length - ext.length);\r\n  }\r\n  return f;\r\n};\r\n\r\n\r\nwin32.extname = function(path) {\r\n  return win32SplitPath(path)[3];\r\n};\r\n\r\n\r\nwin32.format = function(pathObject) {\r\n  if (!util.isObject(pathObject)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathObject' must be an object, not \" + typeof pathObject\r\n    );\r\n  }\r\n\r\n  var root = pathObject.root || '';\r\n\r\n  if (!util.isString(root)) {\r\n    throw new TypeError(\r\n        \"'pathObject.root' must be a string or undefined, not \" +\r\n        typeof pathObject.root\r\n    );\r\n  }\r\n\r\n  var dir = pathObject.dir;\r\n  var base = pathObject.base || '';\r\n  if (!dir) {\r\n    return base;\r\n  }\r\n  if (dir[dir.length - 1] === win32.sep) {\r\n    return dir + base;\r\n  }\r\n  return dir + win32.sep + base;\r\n};\r\n\r\n\r\nwin32.parse = function(pathString) {\r\n  if (!util.isString(pathString)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\r\n    );\r\n  }\r\n  var allParts = win32SplitPath(pathString);\r\n  if (!allParts || allParts.length !== 4) {\r\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\r\n  }\r\n  return {\r\n    root: allParts[0],\r\n    dir: allParts[0] + allParts[1].slice(0, -1),\r\n    base: allParts[2],\r\n    ext: allParts[3],\r\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\r\n  };\r\n};\r\n\r\n\r\nwin32.sep = '\\\\';\r\nwin32.delimiter = ';';\r\n\r\n\r\n// Split a filename into [root, dir, basename, ext], unix version\r\n// 'root' is just a slash, or nothing.\r\nvar splitPathRe =\r\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\r\nvar posix = {};\r\n\r\n\r\nfunction posixSplitPath(filename) {\r\n  return splitPathRe.exec(filename).slice(1);\r\n}\r\n\r\n\r\n// path.resolve([from ...], to)\r\n// posix version\r\nposix.resolve = function() {\r\n  var resolvedPath = '',\r\n      resolvedAbsolute = false;\r\n\r\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\r\n    var path = (i >= 0) ? arguments[i] : process.cwd();\r\n\r\n    // Skip empty and invalid entries\r\n    if (!util.isString(path)) {\r\n      throw new TypeError('Arguments to path.resolve must be strings');\r\n    } else if (!path) {\r\n      continue;\r\n    }\r\n\r\n    resolvedPath = path + '/' + resolvedPath;\r\n    resolvedAbsolute = path[0] === '/';\r\n  }\r\n\r\n  // At this point the path should be resolved to a full absolute path, but\r\n  // handle relative paths to be safe (might happen when process.cwd() fails)\r\n\r\n  // Normalize the path\r\n  resolvedPath = normalizeArray(resolvedPath.split('/'),\r\n                                !resolvedAbsolute).join('/');\r\n\r\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\r\n};\r\n\r\n// path.normalize(path)\r\n// posix version\r\nposix.normalize = function(path) {\r\n  var isAbsolute = posix.isAbsolute(path),\r\n      trailingSlash = path && path[path.length - 1] === '/';\r\n\r\n  // Normalize the path\r\n  path = normalizeArray(path.split('/'), !isAbsolute).join('/');\r\n\r\n  if (!path && !isAbsolute) {\r\n    path = '.';\r\n  }\r\n  if (path && trailingSlash) {\r\n    path += '/';\r\n  }\r\n\r\n  return (isAbsolute ? '/' : '') + path;\r\n};\r\n\r\n// posix version\r\nposix.isAbsolute = function(path) {\r\n  return path.charAt(0) === '/';\r\n};\r\n\r\n// posix version\r\nposix.join = function() {\r\n  var path = '';\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    var segment = arguments[i];\r\n    if (!util.isString(segment)) {\r\n      throw new TypeError('Arguments to path.join must be strings');\r\n    }\r\n    if (segment) {\r\n      if (!path) {\r\n        path += segment;\r\n      } else {\r\n        path += '/' + segment;\r\n      }\r\n    }\r\n  }\r\n  return posix.normalize(path);\r\n};\r\n\r\n\r\n// path.relative(from, to)\r\n// posix version\r\nposix.relative = function(from, to) {\r\n  from = posix.resolve(from).substr(1);\r\n  to = posix.resolve(to).substr(1);\r\n\r\n  var fromParts = trimArray(from.split('/'));\r\n  var toParts = trimArray(to.split('/'));\r\n\r\n  var length = Math.min(fromParts.length, toParts.length);\r\n  var samePartsLength = length;\r\n  for (var i = 0; i < length; i++) {\r\n    if (fromParts[i] !== toParts[i]) {\r\n      samePartsLength = i;\r\n      break;\r\n    }\r\n  }\r\n\r\n  var outputParts = [];\r\n  for (var i = samePartsLength; i < fromParts.length; i++) {\r\n    outputParts.push('..');\r\n  }\r\n\r\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\r\n\r\n  return outputParts.join('/');\r\n};\r\n\r\n\r\nposix._makeLong = function(path) {\r\n  return path;\r\n};\r\n\r\n\r\nposix.dirname = function(path) {\r\n  var result = posixSplitPath(path),\r\n      root = result[0],\r\n      dir = result[1];\r\n\r\n  if (!root && !dir) {\r\n    // No dirname whatsoever\r\n    return '.';\r\n  }\r\n\r\n  if (dir) {\r\n    // It has a dirname, strip trailing slash\r\n    dir = dir.substr(0, dir.length - 1);\r\n  }\r\n\r\n  return root + dir;\r\n};\r\n\r\n\r\nposix.basename = function(path, ext) {\r\n  var f = posixSplitPath(path)[2];\r\n  // TODO: make this comparison case-insensitive on windows?\r\n  if (ext && f.substr(-1 * ext.length) === ext) {\r\n    f = f.substr(0, f.length - ext.length);\r\n  }\r\n  return f;\r\n};\r\n\r\n\r\nposix.extname = function(path) {\r\n  return posixSplitPath(path)[3];\r\n};\r\n\r\n\r\nposix.format = function(pathObject) {\r\n  if (!util.isObject(pathObject)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathObject' must be an object, not \" + typeof pathObject\r\n    );\r\n  }\r\n\r\n  var root = pathObject.root || '';\r\n\r\n  if (!util.isString(root)) {\r\n    throw new TypeError(\r\n        \"'pathObject.root' must be a string or undefined, not \" +\r\n        typeof pathObject.root\r\n    );\r\n  }\r\n\r\n  var dir = pathObject.dir ? pathObject.dir + posix.sep : '';\r\n  var base = pathObject.base || '';\r\n  return dir + base;\r\n};\r\n\r\n\r\nposix.parse = function(pathString) {\r\n  if (!util.isString(pathString)) {\r\n    throw new TypeError(\r\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\r\n    );\r\n  }\r\n  var allParts = posixSplitPath(pathString);\r\n  if (!allParts || allParts.length !== 4) {\r\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\r\n  }\r\n  allParts[1] = allParts[1] || '';\r\n  allParts[2] = allParts[2] || '';\r\n  allParts[3] = allParts[3] || '';\r\n\r\n  return {\r\n    root: allParts[0],\r\n    dir: allParts[0] + allParts[1].slice(0, -1),\r\n    base: allParts[2],\r\n    ext: allParts[3],\r\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\r\n  };\r\n};\r\n\r\n\r\nposix.sep = '/';\r\nposix.delimiter = ':';\r\n\r\n\r\nif (isWindows)\r\n  module.exports = win32;\r\nelse /* posix */\r\n  module.exports = posix;\r\n\r\nmodule.exports.posix = posix;\r\nmodule.exports.win32 = win32;\r\n", "'use strict';\n\nconst path = require('path');\n\nmodule.exports = function getFormat(postalCodeFormat) {\n    //use eval(require) to workaround webpack which can't require dynamic path\n    return eval('require')(path.join(__dirname, 'formats', postalCodeFormat));\n};", "{\n  \"Description\": \"10-Digits - NNNNNNNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[0-9]{10}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"1234567890\",\n      \"5678567833\"\n    ],\n    \"Invalid\": [\n      \"12334545698\",\n      \"123s33s12\",\n      \"123456789\"\n    ]\n  }\n}\n", "{\n  \"Description\": \"2-Digits - NN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[0-9]{2}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"12\",\n      \"56\"\n    ],\n    \"Invalid\": [\n      \"012\",\n      \"1s\",\n      \"1\",\n      \"x3\"\n    ]\n  }\n}\n", "{\n  \"Description\": \"3-Digits - NNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[0-9]{3}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"123\",\n      \"567\"\n    ],\n    \"Invalid\": [\n      \"1234\",\n      \"13s\",\n      \"1x3\"\n    ]\n  }\n}\n", "{\n  \"Description\": \"4-Digits - NNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[0-9]{4}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"1234\",\n      \"5678\"\n    ],\n    \"Invalid\": [\n      \"12345\",\n      \"123s\",\n      \"12x3\"\n    ]\n  }\n}\n", "{\n  \"Description\": \"5-Digits - NNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[0-9]{5}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"12345\",\n      \"56785\"\n    ],\n    \"Invalid\": [\n      \"123456\",\n      \"1233s\",\n      \"123x3\"\n    ]\n  }\n}\n", "{\n  \"Description\": \"6-Digits - NNNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[0-9]{6}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"123456\",\n      \"567856\"\n    ],\n    \"Invalid\": [\n      \"1233456\",\n      \"123s3s\",\n      \"1s23x3\"\n    ]\n  }\n}\n", "{\n  \"Description\": \"7-Digits - NNNNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[0-9]{7}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"1234567\",\n      \"5678567\"\n    ],\n    \"Invalid\": [\n      \"123345456\",\n      \"123s33s\",\n      \"1s23x3\"\n    ]\n  }\n}\n", "{\n  \"Description\": \"8-Digits - NNNNNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[0-9]{8}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"12345678\",\n      \"56785678\"\n    ],\n    \"Invalid\": [\n      \"123345456\",\n      \"123s33s\",\n      \"1s23x3\"\n    ]\n  }\n}\n", "{\n  \"Description\": \"AD : CCNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^AD[0-9]{3}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"AD123\",\n      \"AD001\"\n    ],\n    \"Invalid\": [\n      \"A1234\",\n      \"AD12\",\n\t  \"AD1234\"\n    ]\n  }\n}", "{\n  \"Description\": \"AI : CC2640\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^AI2640$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"AI2640\",\n      \"AI-2640\"\n    ],\n    \"Invalid\": [\n      \"A2640\",\n      \"AI02640\",\n\t  \"AI-02640\"\n    ]\n  }\n}", "{\n  \"Description\": \"AQ : BIQQ 1ZZ\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^BIQQ1ZZ$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"BIQQ 1ZZ\",\n      \"BIQQ1ZZ\"\n    ],\n    \"Invalid\": [\n      \"BIQQ1Z\",\n      \"BIQQ01ZZ\"\n    ]\n  }\n}", "{\n  \"Description\": \"AX : NNNNN, CC-NNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^(AX)?[0-9]{5}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"12345\",\n      \"AX-12345\",\n      \"AX12345\"\n    ],\n    \"Invalid\": [\n      \"AX123\",\n      \"A1234\",\n      \"AX-1234\"\n    ]\n  }\n}", "{\n  \"Description\": \"AZ : CCNNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^AZ[0-9]{4}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"AZ1234\",\n\t  \"AZ-1234\"\n    ],\n    \"Invalid\": [\n      \"AZ123\",\n      \"A1234\",\n\t  \"AZ-12345\"\n    ]\n  }\n}", "{\n  \"Description\": \"BB : CCNNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^(BB)?[0-9]{5}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"BB12345\",\n      \"12345\"\n    ],\n    \"Invalid\": [\n      \"x1231s\",\n      \"1231sd\"\n    ]\n  }\n}", "{\n  \"Description\": \"BH : NNN, NNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[0-9]{3,4}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"123\",\n      \"1234\"\n    ],\n    \"Invalid\": [\n      \"12\",\n      \"12345\"\n    ]\n  }\n}", "{\n  \"Description\": \"BL : 97133\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^97133$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"97133\"\n    ],\n    \"Invalid\": [\n      \"971330\",\n      \"9713\"\n    ]\n  }\n}", "{\n  \"Description\": \"BN : LLNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[a-zA-Z]{2}[0-9]{4}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"AB1234\",\n      \"tK0987\"\n    ],\n    \"Invalid\": [\n      \"abc123\",\n      \"a12345\",\n\t  \"at123\",\n\t  \"BH12345\"\n    ]\n  }\n}", "{\n  \"Description\": \"CA : A0A 0A0\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[ABCEGHJKLMNPRSTVXY]\\\\d[ABCEGHJ-NPRSTV-Z][\\\\s\\\\-]?\\\\d[ABCEGHJ-NPRSTV-Z]\\\\d$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"A4B5X5\",\n      \"A4B5A5\"\n    ],\n    \"Invalid\": [\n      \"123AAA\",\n      \"12A5AA\"\n    ]\n  }\n}", "{\n  \"Description\": \"DK\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^(DK){0,1}\\\\d{4}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"1124\",\n      \"DK1054\",\n      \"DK-1120\",\n      \"DK1120\",\n      \"DK 1125\",\n      \"DK - 1234\",\n      \"dk-1123\"\n    ],\n    \"Invalid\": [\n      \"1125DK\",\n      \"DK12345\",\n      \"DK123\",\n      \"123\",\n      \"\"\n    ]\n  }\n}", "{\n  \"Description\": \"FK : FIQQ 1ZZ\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^FIQQ1ZZ$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"FIQQ 1ZZ\",\n      \"FIQQ1ZZ\"\n    ],\n    \"Invalid\": [\n      \"FIQQ01ZZ\",\n      \"FIQQ1ZZZ\"\n    ]\n  }\n}", "{\n  \"Description\": \"GB\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([AZa-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9]?[A-Za-z]))))[0-9][A-Za-z]{2})|GIR0AA\",\n  \"ValidationRegex.DOC\": \"https://www.gov.uk/government/uploads/system/uploads/attachment_data/file/488478/Bulk_Data_Transfer_-_additional_validation_valid_from_12_November_2015.pdf\",\n  \"TestData\": {\n    \"Valid\": [\n      \"CW3 9SS\",\n      \"SE5 0EG\",\n      \"SE50EG\",\n      \"WC2H 7LT\",\n      \"se5 0eg\",\n      \"Z29ZZ\",\n      \"Z699ZZ\",\n      \"ZX99ZZ\",\n      \"ZC999ZZ\",\n      \"EC1A 1BB\",\n      \"W1A 0AX\",\n      \"M1 1AE\",\n      \"B33 8TH\",\n      \"CR2 6XH\",\n      \"DN55 1PT\",\n      \"GIR 0AA\",\n      \"W1U 1BW\",\n      \"SK8 7NA\"\n    ],\n    \"Invalid\": [\n      \"WC2H 7LTa\",\n      \"WC2H\"\n    ]\n  }\n}", "{\n  \"Description\": \"GF : 973NN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^973[0-9]{2}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"97300\",\n      \"97390\"\n    ],\n    \"Invalid\": [\n      \"9732\",\n      \"973999\",\n\t  \"97290\",\n\t  \"097390\"\n    ]\n  }\n}", "{\r\n  \"Description\": \"GG\",\r\n  \"RedundantCharacters\": \" -\",\r\n  \"ValidationRegex\": \"^GY[0-9]{2,3}[A-Za-z]{2}$\",\r\n  \"TestData\": {\r\n    \"Valid\": [\r\n      \"GY1 1AA\",\r\n      \"GY111AA\"\r\n    ],\r\n    \"Invalid\": [\r\n      \"CW3 9SS\",\r\n      \"GG1 1AA\",\r\n      \"SE5 0EG\",\r\n      \"SE50EG\",\r\n      \"WC2H 7LTa\",\r\n      \"WC2H\"\r\n    ]\r\n  }\r\n}", "{\n  \"Description\": \"GI : GX11 1AA\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^GX111AA$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"GX111AA\",\n      \"GX11 1AA\"\n    ],\n    \"Invalid\": [\n      \"GX1101AA\",\n      \"GX111AAA\"\n    ]\n  }\n}", "{\n  \"Description\": \"GP : 971NN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^971[0-9]{2}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"97100\",\n      \"97190\"\n    ],\n    \"Invalid\": [\n      \"9712\",\n      \"971999\",\n\t  \"97290\",\n\t  \"097190\"\n    ]\n  }\n}", "{\n  \"Description\": \"GS : SIQQ 1ZZ\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^SIQQ1ZZ$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"SIQQ 1ZZ\",\n      \"SIqq 1zz\",\n      \"SIQQ1ZZ\"\n    ],\n    \"Invalid\": [\n      \"SIQQ01ZZ\",\n      \"SIQQ1ZZZ\"\n    ]\n  }\n}", "{\n  \"Description\": \"HN : CCNNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^(HN)?[0-9]{5}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"HN12345\",\n      \"12345\"\n    ],\n    \"Invalid\": [\n      \"123456\",\n      \"HN123456\",\n      \"HN1234\"\n    ]\n  }\n}", "{\n  \"Description\": \"IE\",\n  \"RedundantCharacters\": \"\",\n  \"ValidationRegex\": \"^[AaC-Fc-fHhKkNnPpRrTtV-Yv-y]\\\\d[0-9Ww][ -]?[0-9AaC-Fc-fHhKkNnPpRrTtV-Yv-y]{4}$\",\n  \"ValidationRegex.DOC\": \"https://www.eircode.ie/docs/default-source/Common/prepareyourbusinessforeircode-edition3published.pdf?sfvrsn=2\",\n  \"TestData\": {\n    \"Valid\": [\n      \"D6W1234\",\n      \"A23 0984\",\n      \"D00-AV92\",\n      \"y631fhk\",\n      \"a00 0000\",\n      \"d44-n4x4\",\n      \"A65F4E2\"\n    ],\n    \"Invalid\": [\"D6Z1234\", \"y63  1fhk\"]\n  }\n}\n", "{\r\n  \"Description\": \"IM\",\r\n  \"RedundantCharacters\": \" -\",\r\n  \"ValidationRegex\": \"^IM[0-9]{2,3}[A-Za-z]{2}$\",\r\n  \"TestData\": {\r\n    \"Valid\": [\r\n      \"IM1 1AA\",\r\n      \"IM111AA\"\r\n    ],\r\n    \"Invalid\": [\r\n      \"CW3 9SS\",\r\n      \"SE5 0EG\",\r\n      \"SE50EG\",\r\n      \"WC2H 7LTa\",\r\n      \"WC2H\"\r\n    ]\r\n  }\r\n}", "{\n  \"Description\": \"IO : BBND 1ZZ\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^BBND1ZZ$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"BBND 1ZZ\",\n      \"BBND1ZZ\"\n    ],\n    \"Invalid\": [\n      \"BBND01ZZ\",\n      \"BBND1ZZZ\"\n    ]\n  }\n}", "{\r\n  \"Description\": \"JE\",\r\n  \"RedundantCharacters\": \" -\",\r\n  \"ValidationRegex\": \"^JE[0-9]{2,3}[A-Za-z]{2}$\",\r\n  \"TestData\": {\r\n    \"Valid\": [\r\n      \"JE1 1AA\",\r\n      \"JE111AA\"\r\n    ],\r\n    \"Invalid\": [\r\n      \"CW3 9SS\",\r\n      \"SE5 0EG\",\r\n      \"SE50EG\",\r\n      \"WC2H 7LTa\",\r\n      \"WC2H\"\r\n    ]\r\n  }\r\n}", "{\n  \"Description\": \"KY : CCN-NNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^KY[0-9]{5}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"KY1-1234\",\n\t  \"KY12345\"\n    ],\n    \"Invalid\": [\n      \"KY1234\",\n      \"KY123456\",\n\t  \"K1-1234\"\n    ]\n  }\n}", "{\n  \"Description\": \"LB : NNNNN, NNNN NNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[0-9]{4}(?:[0-9]{4})?$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"1234\",\n      \"1234 1234\",\n      \"12341234\"\n    ],\n    \"Invalid\": [\n      \"123\",\n      \"1234567\",\n      \"123456789\"\n    ]\n  }\n}", "{\n  \"Description\": \"LC : CCNN NNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^LC[0-9]{5}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"LC12 345\",\n      \"LC12345\"\n    ],\n    \"Invalid\": [\n      \"12345\",\n      \"x1231s\",\n      \"1231sd\"\n    ]\n  }\n}", "{\n  \"Description\": \"LT : LT-NNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^(LT)?[0-9]{5}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"12345\",\n      \"LT12345\",\n      \"LT-12345\"\n    ],\n    \"Invalid\": [\n      \"1234\",\n      \"123456\",\n      \"LT-1234\"\n    ]\n  }\n}", "{\n  \"Description\": \"LU\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^(L){0,1}\\\\d{4}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"1124\",\n      \"L1054\",\n      \"L-1120\",\n      \"L1120\",\n      \"L 1125\",\n      \"L - 1234\",\n      \"l-1123\"\n    ],\n    \"Invalid\": [\n      \"1125L\",\n      \"L12345\",\n      \"L123\",\n      \"123\",\n      \"\"\n    ]\n  }\n}", "{\n  \"Description\": \"LV : NNNNN, CC-NNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^(LV)?[0-9]{4}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"1234\",\n      \"LV-1234\",\n\t  \"LV1234\"\n    ],\n    \"Invalid\": [\n      \"LV123\",\n      \"L1234\",\n\t  \"LV-12345\"\n    ]\n  }\n}", "{\n  \"Description\": \"MC : 980NN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^980[0-9]{2}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"98000\",\n      \"98099\"\n    ],\n    \"Invalid\": [\n      \"98100\",\n      \"97099\"\n    ]\n  }\n}\n", "{\n  \"Description\": \"MD : CCNNNN, CC-NNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^(MD)?[0-9]{4}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"1234\",\n      \"MD1234\",\n\t  \"MD-1234\"\n    ],\n    \"Invalid\": [\n      \"MD123\",\n      \"M1234\",\n\t  \"MD-12345\"\n    ]\n  }\n}", "{\n  \"Description\": \"MF : 97150\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^97150$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"97150\"\n    ],\n    \"Invalid\": [\n      \"971500\",\n      \"9715\"\n    ]\n  }\n}", "{\n  \"Description\": \"MS : MSR NNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^(MSR)?[0-9]{4}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"MSR 1110\",\n      \"MSR 1350\",\n\t  \"1350\"\n    ],\n    \"Invalid\": [\n      \"MS1110\",\n      \"MSR01350\",\n\t  \"12345\"\n    ]\n  }\n}", "{\n  \"Description\": \"MA : LLL NNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[A-Z]{3}[0-9]{4}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"abc1234\",\n      \"ABC1234\",\n      \"SHD4783\"\n    ],\n    \"Invalid\": [\n      \"ABCABC\",\n      \"123ABCD\"\n    ]\n  }\n}", "{\n  \"Description\": \"NC : 988NN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^988[0-9]{2}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"98800\",\n      \"98890\"\n    ],\n    \"Invalid\": [\n      \"9882\",\n      \"988999\",\n\t  \"98990\",\n\t  \"098890\"\n    ]\n  }\n}", "{\n  \"Description\": \"NL : NNNN LL\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[1-9][0-9]{3}(?!SA|SD|SS)[A-Z]{2}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"1235DF\",\n      \"5983DH\",\n      \"1000 AP\"\n    ],\n    \"Invalid\": [\n      \"1235D\",\n      \"12j4h\",\n      \"k3j51l\",\n      \"1945SS\"\n    ]\n  }\n}", "{\n  \"Description\": \"PF : 987NN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^987[0-9]{2}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"98700\",\n      \"98790\"\n    ],\n    \"Invalid\": [\n      \"9872\",\n      \"987999\",\n\t  \"98690\",\n\t  \"098790\"\n    ]\n  }\n}", "{\n  \"Description\": \"PL : 99-999\",\n  \"RedundantCharacters\": \" \",\n  \"ValidationRegex\": \"^[0-9]{2}-[0-9]{3}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"44-100 \",\n      \"44-100\"\n    ],\n    \"Invalid\": [\n      \"44100\",\n      \"44f00\",\n      \"e4410\",\n      \"44-100d\",\n      \"c44-100\",\n      \"b44100\",\n      \"44100a\"\n    ]\n  }\n}\n", "{\n  \"Description\": \"PM : 97500\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^97500$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"97500\"\n    ],\n    \"Invalid\": [\n      \"975000\",\n      \"9750\"\n    ]\n  }\n}", "{\n  \"Description\": \"PN : PCRN 1ZZ\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^PCRN1ZZ$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"PCRN 1ZZ\",\n      \"PCRN1ZZ\"\n    ],\n    \"Invalid\": [\n      \"PCRN01ZZ\",\n      \"PCRN1ZZZ\"\n    ]\n  }\n}", "{\n  \"Description\": \"PT : NNNN-NNN\",\n  \"RedundantCharacters\": \" \",\n  \"ValidationRegex\": \"^[0-9]{4}-[0-9]{3}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"1234-123\"\n    ],\n    \"Invalid\": [\n      \"1255\",\n      \"1234567\",\n      \"1234 123\",\n      \"x1231s\",\n      \"1231sd\",\n      \"1010101010\",\n      \"1234 12\"\n    ]\n  }\n}\n", "{\n  \"Description\": \"RE : 974NN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^974[0-9]{2}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"97400\",\n      \"97490\"\n    ],\n    \"Invalid\": [\n      \"9742\",\n      \"974999\",\n\t  \"97390\",\n\t  \"097490\"\n    ]\n  }\n}", "{\n  \"Description\": \"RU : NNN[-NNN]\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[0-9]{3}([0-9]{3})?$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"125\",\n      \"123456\"\n    ],\n    \"Invalid\": [\n      \"x1231s\",\n      \"1231sd\",\n      \"1010101010\"\n    ]\n  }\n}", "{\n  \"Description\": \"SH : STHL 1ZZ\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^STHL1ZZ$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"STHL 1ZZ\",\n      \"STHL1ZZ\"\n    ],\n    \"Invalid\": [\n      \"STHL01ZZ\",\n      \"STHL1ZZZ\"\n    ]\n  }\n}", "{\n  \"Description\": \"SM : 4789N\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^4789[0-9]{1}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"47890\",\n      \"47899\"\n    ],\n    \"Invalid\": [\n      \"4789\",\n      \"478900\",\n\t  \"47889\"\n    ]\n  }\n}", "{\n  \"Description\": \"SO : AA NNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[a-zA-Z]{2}[0-9]{5}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"AW12345\",\n      \"BN47899\"\n    ],\n    \"Invalid\": [\n      \"12345\",\n      \"A12345\",\n\t  \"SL123456\"\n    ]\n  }\n}", "{\n  \"Description\": \"SZ : ANNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[a-zA-Z]{1}[0-9]{3}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"S123\",\n      \"a789\"\n    ],\n    \"Invalid\": [\n      \"F1234\",\n      \"D12\"\n    ]\n  }\n}", "{\n  \"Description\": \"TC : TKCA 1ZZ\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^TKCA1ZZ$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"TKCA1ZZ\",\n      \"TKCA 1ZZ\"\n    ],\n    \"Invalid\": [\n      \"TKCA01ZZ\",\n      \"TKCA1ZZZ\"\n    ]\n  }\n}", "{\n  \"Description\": \"TW : NNN[-NN]\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[0-9]{3}([0-9]{2})?$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"123\",\n      \"123-45\",\n      \"12345\"\n    ],\n    \"Invalid\": [\n      \"12\",\n      \"1234\",\n      \"101010\"\n    ]\n  }\n}\n", "{\n  \"Description\": \"US : NNNNN[-NNNN]\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[0-9]{5}([0-9]{4})?$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"12345\",\n      \"12345-7689\"\n    ],\n    \"Invalid\": [\n      \"x1231s\",\n      \"1231sd\",\n      \"1010101010\"\n    ]\n  }\n}\n", "{\n  \"Description\": \"VA : 00120\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^00120$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"00120\"\n    ],\n    \"Invalid\": [\n      \"0012\",\n      \"001200\"\n    ]\n  }\n}", "{\n  \"Description\": \"VC : CCNNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^(VC)?[0-9]{4}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"1234\",\n      \"VC1234\",\n\t  \"VC-1234\"\n    ],\n    \"Invalid\": [\n      \"VC123\",\n      \"V1234\",\n\t  \"VC-12345\"\n    ]\n  }\n}", "{\n  \"Description\": \"VE : NNNN, NNNN-A\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^[0-9]{4}[a-zA-Z]?$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"1234\",\n      \"1234-A\"\n    ],\n    \"Invalid\": [\n      \"123\",\n      \"1234AA\"\n    ]\n  }\n}", "{\n  \"Description\": \"VG : CCNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^(VG)?[0-9]{4}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"1234\",\n      \"VG1234\",\n\t  \"VG-1234\"\n    ],\n    \"Invalid\": [\n      \"VG123\",\n      \"V1234\",\n\t  \"VG-12345\"\n    ]\n  }\n}\n", "{\n  \"Description\": \"WF : 986NN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^986[0-9]{2}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"98600\",\n      \"98690\"\n    ],\n    \"Invalid\": [\n      \"9862\",\n      \"986999\",\n\t  \"98990\",\n\t  \"098690\"\n    ]\n  }\n}", "{\n  \"Description\": \"WS : CCNNNNN\",\n  \"RedundantCharacters\": \" -\",\n  \"ValidationRegex\": \"^(WS)?[0-9]{4}$\",\n  \"TestData\": {\n    \"Valid\": [\n      \"1234\",\n      \"WS1234\",\n\t  \"WS-1234\"\n    ],\n    \"Invalid\": [\n      \"WS123\",\n      \"V1234\",\n\t  \"WS-12345\"\n    ]\n  }\n}", "'use strict';\n\nconst formats = {};\n\nformats[\"10Digits.json\"] = require(\"./formats/10Digits.json\");\nformats[\"2Digits.json\"] = require(\"./formats/2Digits.json\");\nformats[\"3Digits.json\"] = require(\"./formats/3Digits.json\");\nformats[\"4Digits.json\"] = require(\"./formats/4Digits.json\");\nformats[\"5Digits.json\"] = require(\"./formats/5Digits.json\");\nformats[\"6Digits.json\"] = require(\"./formats/6Digits.json\");\nformats[\"7Digits.json\"] = require(\"./formats/7Digits.json\");\nformats[\"8Digits.json\"] = require(\"./formats/8Digits.json\");\nformats[\"AD.json\"] = require(\"./formats/AD.json\");\nformats[\"AI.json\"] = require(\"./formats/AI.json\");\nformats[\"AQ.json\"] = require(\"./formats/AQ.json\");\nformats[\"AX.json\"] = require(\"./formats/AX.json\");\nformats[\"AZ.json\"] = require(\"./formats/AZ.json\");\nformats[\"BB.json\"] = require(\"./formats/BB.json\");\nformats[\"BH.json\"] = require(\"./formats/BH.json\");\nformats[\"BL.json\"] = require(\"./formats/BL.json\");\nformats[\"BN.json\"] = require(\"./formats/BN.json\");\nformats[\"CA.json\"] = require(\"./formats/CA.json\");\nformats[\"DK.json\"] = require(\"./formats/DK.json\");\nformats[\"FK.json\"] = require(\"./formats/FK.json\");\nformats[\"GB.json\"] = require(\"./formats/GB.json\");\nformats[\"GF.json\"] = require(\"./formats/GF.json\");\nformats[\"GG.json\"] = require(\"./formats/GG.json\");\nformats[\"GI.json\"] = require(\"./formats/GI.json\");\nformats[\"GP.json\"] = require(\"./formats/GP.json\");\nformats[\"GS.json\"] = require(\"./formats/GS.json\");\nformats[\"HN.json\"] = require(\"./formats/HN.json\");\nformats[\"IE.json\"] = require(\"./formats/IE.json\");\nformats[\"IM.json\"] = require(\"./formats/IM.json\");\nformats[\"IO.json\"] = require(\"./formats/IO.json\");\nformats[\"JE.json\"] = require(\"./formats/JE.json\");\nformats[\"KY.json\"] = require(\"./formats/KY.json\");\nformats[\"LB.json\"] = require(\"./formats/LB.json\");\nformats[\"LC.json\"] = require(\"./formats/LC.json\");\nformats[\"LT.json\"] = require(\"./formats/LT.json\");\nformats[\"LU.json\"] = require(\"./formats/LU.json\");\nformats[\"LV.json\"] = require(\"./formats/LV.json\");\nformats[\"MC.json\"] = require(\"./formats/MC.json\");\nformats[\"MD.json\"] = require(\"./formats/MD.json\");\nformats[\"MF.json\"] = require(\"./formats/MF.json\");\nformats[\"MS.json\"] = require(\"./formats/MS.json\");\nformats[\"MT.json\"] = require(\"./formats/MT.json\");\nformats[\"NC.json\"] = require(\"./formats/NC.json\");\nformats[\"NL.json\"] = require(\"./formats/NL.json\");\nformats[\"PF.json\"] = require(\"./formats/PF.json\");\nformats[\"PL.json\"] = require(\"./formats/PL.json\");\nformats[\"PM.json\"] = require(\"./formats/PM.json\");\nformats[\"PN.json\"] = require(\"./formats/PN.json\");\nformats[\"PT.json\"] = require(\"./formats/PT.json\");\nformats[\"RE.json\"] = require(\"./formats/RE.json\");\nformats[\"RU.json\"] = require(\"./formats/RU.json\");\nformats[\"SH.json\"] = require(\"./formats/SH.json\");\nformats[\"SM.json\"] = require(\"./formats/SM.json\");\nformats[\"SO.json\"] = require(\"./formats/SO.json\");\nformats[\"SZ.json\"] = require(\"./formats/SZ.json\");\nformats[\"TC.json\"] = require(\"./formats/TC.json\");\nformats[\"TW.json\"] = require(\"./formats/TW.json\");\nformats[\"US.json\"] = require(\"./formats/US.json\");\nformats[\"VA.json\"] = require(\"./formats/VA.json\");\nformats[\"VC.json\"] = require(\"./formats/VC.json\");\nformats[\"VE.json\"] = require(\"./formats/VE.json\");\nformats[\"VG.json\"] = require(\"./formats/VG.json\");\nformats[\"WF.json\"] = require(\"./formats/WF.json\");\nformats[\"WS.json\"] = require(\"./formats/WS.json\");\n\n\nmodule.exports = function getFormat(postalCodeFormat) {\n    return formats[postalCodeFormat];\n};", "'use strict';\n\nconst byAlpha2 = require('./generated/postal-codes-alpha2.json');\nconst byAlpha3 = require('./generated/postal-codes-alpha3.json');\nconst isNode = require('detect-node');\n\nvar getFormat = null;\nif ( isNode ) {\n    getFormat = require(\"./formats-node\");\n} else {\n    getFormat = require(\"./formats-web\");\n}\n\nmodule.exports.validate = function (countryCode, postalCode) {\n\n    if ( !countryCode ) {\n        return \"Missing country code.\";\n    }\n\n    if ( !postalCode ) {\n        return 'Missing postal code.';\n    }\n\n    var countryData = undefined;\n    var preparedCountryCode = countryCode.trim().toUpperCase();\n\n    // Is it alpha2 ?\n    if ( preparedCountryCode.length == 2 ) {\n        countryData = byAlpha2[preparedCountryCode];\n    }\n\n    // Is it alpha3 ?\n    if ( preparedCountryCode.length == 3 ) {\n        countryData = byAlpha3[preparedCountryCode];\n    }\n\n    if ( !countryData ) {\n        return 'Unknown alpha2/alpha3 country code: ' + preparedCountryCode;\n    }\n\n    // If the country/region does not use postal codes\n    if ( !countryData.postalCodeFormat ) {\n        return true;\n    }\n\n    var format = getFormat(countryData.postalCodeFormat);\n    if ( !format ) {\n        return 'Failed to load postal code format \"' + countryData.postalCodeFormat + '\".';\n    }\n\n    var preparedPostalCode = postalCode.toString().trim().slice(0);\n    for (var i = 0; i < format.RedundantCharacters.length; i++) {\n        preparedPostalCode = preparedPostalCode.replace(new RegExp(format.RedundantCharacters[i], 'g'), '');\n    }\n\n    var expression = format.ValidationRegex;\n    if ( expression instanceof Array ) {\n        expression = '^' + expression.join('|') + '$';\n    }\n\n    const regexp = new RegExp(expression, 'i');\n    var result = regexp.exec(preparedPostalCode);\n\n    if ( !result ) {\n        // Invalid postal code\n        return \"Postal code \" + preparedPostalCode + \" is not valid for country \" + preparedCountryCode;\n    }\n\n    if ( result[0].toLowerCase() != preparedPostalCode.toLowerCase() ) {\n        // Found \"sub\" match\n        return \"Postal code \" + preparedPostalCode + \" is not valid for country \" + preparedCountryCode;\n    }\n\n    return true;\n};\n"],
  "mappings": "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",
  "names": ["exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "x", "exports", "module", "path", "exports", "module", "require_Digits", "exports", "module", "require_Digits", "exports", "module", "require_Digits", "exports", "module", "require_Digits", "exports", "module", "require_Digits", "exports", "module", "require_Digits", "exports", "module", "require_Digits", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "getFormat", "postalCodeFormat", "exports", "module", "getFormat"]
}
